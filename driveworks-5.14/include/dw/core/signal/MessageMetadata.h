////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_CORE_SIGNAL_MESSAGEMETADATA_H_
#define DW_CORE_SIGNAL_MESSAGEMETADATA_H_
// Generated by dwProto from message_metadata.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

/**
 * @file
 * <b>DriveWorks API: Message Metadata Library </b>
 *
 * @b Description: This file defines message metadata types
 */

/**
 * @defgroup core_signal_message_metadata_group Message Metadata
 * @brief Defines common message metadata fields
 *
 * @{
 * @ingroup core_group
 */

#include <dw/core/base/TypesExtra.h>
#include <dw/core/base/BasicTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Defines valid fields in @ref dwMessageMetadata.
 * If the enum value bit is set, then the associated field is present in the message metadata.
 */
typedef enum dwMessageMetadataFlags {
    /// Sequence counter field is set.
    DW_MESSAGE_METADATA_SEQUENCE_NUMBER = 1 << 0,

    /// Publish timestamp field is set.
    DW_MESSAGE_METADATA_PUBLISH_TIMESTAMP = 1 << 1,

    /// Validity status field is set.
    DW_MESSAGE_METADATA_VALIDITY_STATUS = 1 << 2,

    /// Force 16-bit representation. Do not use this value.
    DW_MESSAGE_METADATA_VALIDITY_FORCE16 = (1 << 15) - 1,
} dwMessageMetadataFlags;

/**
 * @brief Common metadata associated with a message.
 */
typedef struct dwMessageMetadata
{
    /// Sequence number of the message. The message sequence counters start counting at 0,
    /// are incremented by 1 with each message and wrap-over.
    uint32_t sequenceNum;

    /// (Virtual) host time, when the data was published.
    dwTime_t publishTimestamp;

    /// Validity status of the message
    dwValidityStatus validityStatus;

    /// Bit map defining which @a dwMessageMetadata fields are set. See @ref dwMessageMetadataFlags.
    uint16_t validFields;
} dwMessageMetadata;

#ifdef __cplusplus
}
#endif

/** @}
 */

#endif // DW_CORE_SIGNAL_MESSAGEMETADATA_H_
