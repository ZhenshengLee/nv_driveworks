////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2016-2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_CORE_BASE_TYPESEXTRA_H_
#define DW_CORE_BASE_TYPESEXTRA_H_
// Generated by dwProto from types_extra.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

/**
 * @file
 * <b>NVIDIA DriveWorks API: (Extra) Core Types</b>
 *
 * @b Description: This file defines extra POD types, timestamps, and trivial data types.
 */

/**
 * @defgroup core_types_extra_group (Extra) Core Types
 * @brief Defines of POD types, language types, and trivial data types.
 *
 * @{
 * @ingroup core_group_extra
 */

#include <dw/core/base/BasicTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/// @brief Specifies a type indicator of the underlying trivial data type.
typedef enum dwTrivialDataType {
    /// The type of the data is unknown.
    DW_TYPE_UNKNOWN = 0,

    /// The underlying data type is bool.
    DW_TYPE_BOOL = 1 << 1,

    /// 8-bit signed integer.
    DW_TYPE_INT8 = 1 << 2,

    /// 16-bit signed integer.
    DW_TYPE_INT16 = 1 << 3,

    /// 32-bit signed integer.
    DW_TYPE_INT32 = 1 << 4,

    /// 64-bit signed integer.
    DW_TYPE_INT64 = 1 << 5,

    /// 8-bit unsigned integer.
    DW_TYPE_UINT8 = 1 << 6,

    /// 16-bit unsigned integer.
    DW_TYPE_UINT16 = 1 << 7,

    /// 32-bit unsigned integer.
    DW_TYPE_UINT32 = 1 << 8,

    /// 64-bit unsigned integer.
    DW_TYPE_UINT64 = 1 << 9,

    /// 32-bit float number.
    DW_TYPE_FLOAT32 = 1 << 10,

    /// 64-bit float number, i.e., double.
    DW_TYPE_FLOAT64 = 1 << 11,

    /// 16-bit float number.
    DW_TYPE_FLOAT16 = 1 << 12,

    /// chat8_t
    DW_TYPE_CHAR8 = 1 << 13,
} dwTrivialDataType;

/// @brief Precision type definitions
typedef enum dwPrecision {
    /// INT8 precision.
    DW_PRECISION_INT8 = 0,

    /// FP16 precision.
    DW_PRECISION_FP16 = 1,

    /// FP32 precision.
    DW_PRECISION_FP32 = 2,

    /// Combination of multiple precisions.
    DW_PRECISION_MIXED = 3,
} dwPrecision;

/// @brief GPU device type definitions
/// Only applicable on Drive platforms.
/// On x86 platforms, the GPU is considered to be of discrete type always.
typedef enum dwGPUDeviceType {
    DW_GPU_DEVICE_DISCRETE   = 0,
    DW_GPU_DEVICE_INTEGRATED = 1,
} dwGPUDeviceType;

/// @brief Processor type definitions.
typedef enum dwProcessorType {
    DW_PROCESSOR_TYPE_CPU     = 0,
    DW_PROCESSOR_TYPE_GPU     = 1,
    DW_PROCESSOR_TYPE_DLA_0   = 2,
    DW_PROCESSOR_TYPE_DLA_1   = 3,
    DW_PROCESSOR_TYPE_PVA_0   = 4,
    DW_PROCESSOR_TYPE_PVA_1   = 5,
    DW_PROCESSOR_TYPE_NVENC_0 = 6,
    DW_PROCESSOR_TYPE_NVENC_1 = 7,
    DW_PROCESSOR_TYPE_CUDLA   = 8,
    DW_PROCESSOR_TYPE_VULKAN  = 9,
} dwProcessorType;

/// @brief Process type definitions.
typedef enum dwProcessType {
    DW_PROCESS_TYPE_ASYNC = 0,
    DW_PROCESS_TYPE_SYNC  = 1,
} dwProcessType;

/// @brief Memory type definitions.
typedef enum dwMemoryType {
    /// CUDA memory
    DW_MEMORY_TYPE_CUDA = 0,

    /// pageable CPU memory
    DW_MEMORY_TYPE_CPU = 1,

    /// pinned memory
    DW_MEMORY_TYPE_PINNED = 2,
} dwMemoryType;

/**
 * @brief The slot enum used when an application wants a dw module to bind some particular input data to an internal slot
 * for future processing and unbinding.
 * Particularly the module expects an array of instances of such data structure hence maintaining an internal container for them.
 * For example, dwObjectArray instances inputting to dwObjectInPathAnalyzer module
 */
typedef enum dwBindSlot {
    DW_BIND_SLOT_INVALID   = 0,
    DW_BIND_SLOT_1         = 1,
    DW_BIND_SLOT_2         = 2,
    DW_BIND_SLOT_3         = 3,
    DW_BIND_SLOT_4         = 4,
    DW_BIND_SLOT_5         = 5,
    DW_BIND_SLOT_6         = 6,
    DW_BIND_SLOT_7         = 7,
    DW_BIND_SLOT_8         = 8,
    DW_BIND_SLOT_9         = 9,
    DW_BIND_SLOT_10        = 10,
    DW_BIND_SLOT_11        = 11,
    DW_BIND_SLOT_12        = 12,
    DW_BIND_SLOT_13        = 13,
    DW_BIND_SLOT_14        = 14,
    DW_BIND_SLOT_15        = 15,
    DW_BIND_SLOT_16        = 16,
    DW_BIND_SLOT_MAX_COUNT = 17,
} dwBindSlot;

/// @brief Defines the validity of DW struct.
typedef enum dwValidity {
    DW_VALIDITY_INVALID = 0,
    DW_VALIDITY_VALID   = 1,
    DW_VALIDITY_FORCE32 = 0x7fffffff,
} dwValidity;

/// @brief Optional values that are only defined if the 'valid' flag is true, and undefined otherwise
typedef struct dwOptionalf
{
    float32_t value; //!< optional value, defined if 'valid' is true and undefined if 'valid' is false
    bool valid;      //!< flag indicating whether the value is defined or not (following value to keep struct aligned with value alignment requirements)
} dwOptionalf;

/// @brief Optional values that are only defined if the 'valid' flag is true, and undefined otherwise
typedef struct dwOptionalb
{
    bool value; //!< optional value, defined if 'valid' is true and undefined if 'valid' is false
    bool valid; //!< flag indicating whether the value is defined or not (following value to keep struct aligned with value alignment requirements)
} dwOptionalb;

/// @brief Holds blob dimensions.
typedef struct dwBlobSize
{
    /// Batch size (n).
    uint32_t batchsize;

    /// Number of channels (c).
    uint32_t channels;

    /// Height (h).
    uint32_t height;

    /// Width (w).
    uint32_t width;
} dwBlobSize;

/// @brief A light weighted 16 Btyes status to be carried over along with
/// each DW C struct instance that can indicate the data validity status.
typedef struct dwValidityStatus
{
    /// Validity of the whole data entity.
    dwValidity validity;

    /// Reserved 12 bytes which can be extended later.
    uint8_t reserved[12];
} dwValidityStatus;

#ifdef __cplusplus
}
#endif

/** @}
 */

#endif // DW_CORE_BASE_TYPESEXTRA_H_
