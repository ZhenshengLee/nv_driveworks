////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_CONTROL_VEHICLEIO_VEHICLEIOVALSTRUCTURES_H_
#define DW_CONTROL_VEHICLEIO_VEHICLEIOVALSTRUCTURES_H_
// Generated by dwProto from vehicleio_val_structures.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

/**
 * @file
 * <b>NVIDIA DriveWorks API: VehicleIO VAL interface structures</b>
 *
 * @b Description: These structures are used to communicate VIO state and commands between VAL and NDAS.
 */

/**
 * @defgroup VehicleIO_actuators_group VehicleIO Actuators Interface
 *
 * @brief Defines structures to communicate VIO state and commands between VAL and NDAS
 *
 * @{
 */

#include <dw/core/base/Types.h>

#include <dw/core/signal/SignalStatus.h>

#ifdef __cplusplus
extern "C" {
#endif

/// Door lock (latch) state
typedef enum dwVioLockState {
    /// undefined value
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LOCK_STATE_UNKNOWN = 0,

    /// closed fully
    DW_VIO_LOCK_STATE_SECURE_CLOSED = 1,

    /// closed but not secure (two stage lock)
    DW_VIO_LOCK_STATE_UNKNOWN_CLOSED = 2,

    /// open
    DW_VIO_LOCK_STATE_OPEN    = 3,
    DW_VIO_LOCK_STATE_FORCE32 = 0x7fffffff,
} dwVioLockState;

/// Integrity quality of steering wheel angle
typedef enum dwVioSteeringWheelAngleQuality {
    /// Steering wheel angle sensor fault and not initialized
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR_INI = 0,

    /// Steering wheel angle sensor not initialized
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_INI = 1,

    /// Steering wheel angle sensor fault
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR = 2,

    /// Steering wheel angle sensor ok
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_OK      = 3,
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_FORCE32 = 0x7fffffff,
} dwVioSteeringWheelAngleQuality;

/// Hold state report
typedef enum dwVioHoldStatus {
    /// Unknown
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_HOLD_STATUS_UNKNOWN = 0,

    /// No Hold
    DW_VIO_HOLD_STATUS_NOHOLD = 1,

    /// Hold
    DW_VIO_HOLD_STATUS_HOLD = 2,

    /// @deprecated TRANSITION is deprecated and should not be used. REL_23_02
    DW_VIO_HOLD_STATUS_TRANSITION DW_DEPRECATED_ENUM("TRANSITION is deprecated and should not be used. REL_23_02") = 3,
    DW_VIO_HOLD_STATUS_FORCE32                                                                                     = 0x7fffffff,
} dwVioHoldStatus;

/// Current vehicle gear
//# sergen(generate)
typedef enum dwVioGearStatus {
    /// Actual gear "N"
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_GEAR_STATUS_N = 0,

    /// Actual gear "1"
    DW_VIO_GEAR_STATUS_D1 = 1,

    /// Actual gear "2"
    DW_VIO_GEAR_STATUS_D2 = 2,

    /// Actual gear "3"
    DW_VIO_GEAR_STATUS_D3 = 3,

    /// Actual gear "4"
    DW_VIO_GEAR_STATUS_D4 = 4,

    /// Actual gear "5"
    DW_VIO_GEAR_STATUS_D5 = 5,

    /// Actual gear "6"
    DW_VIO_GEAR_STATUS_D6 = 6,

    /// Actual gear "7"
    DW_VIO_GEAR_STATUS_D7 = 7,

    /// Actual gear "8"
    DW_VIO_GEAR_STATUS_D8 = 8,

    /// Actual gear "9"
    DW_VIO_GEAR_STATUS_D9 = 9,

    /// Actual gear "R"
    DW_VIO_GEAR_STATUS_R = 10,

    /// Actual gear "R2"
    DW_VIO_GEAR_STATUS_R2 = 11,

    /// Actual gear "P"
    DW_VIO_GEAR_STATUS_P = 12,

    /// Power free
    DW_VIO_GEAR_STATUS_PWRFREE = 13,
    DW_VIO_GEAR_STATUS_FORCE32 = 0x7fffffff,
} dwVioGearStatus;

/// Gear that will be shifted to.
typedef enum dwVioGearTarget {
    /// Actual gear "N"
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_GEAR_TARGET_N = 0,

    /// Actual gear "1"
    DW_VIO_GEAR_TARGET_D1 = 1,

    /// Actual gear "2"
    DW_VIO_GEAR_TARGET_D2 = 2,

    /// Actual gear "3"
    DW_VIO_GEAR_TARGET_D3 = 3,

    /// Actual gear "4"
    DW_VIO_GEAR_TARGET_D4 = 4,

    /// Actual gear "5"
    DW_VIO_GEAR_TARGET_D5 = 5,

    /// Actual gear "6"
    DW_VIO_GEAR_TARGET_D6 = 6,

    /// Actual gear "7"
    DW_VIO_GEAR_TARGET_D7 = 7,

    /// Actual gear "8"
    DW_VIO_GEAR_TARGET_D8 = 8,

    /// Actual gear "9"
    DW_VIO_GEAR_TARGET_D9 = 9,

    /// Actual gear "R"
    DW_VIO_GEAR_TARGET_R = 11,

    /// Actual gear "R2"
    DW_VIO_GEAR_TARGET_R2 = 12,

    /// Actual gear "P"
    DW_VIO_GEAR_TARGET_P = 13,

    /// Power free
    DW_VIO_GEAR_TARGET_PWRFREE = 14,
    DW_VIO_GEAR_TARGET_FORCE32 = 0x7fffffff,
} dwVioGearTarget;

/// Current vehicle drive position (PRND)
typedef enum dwVioDrivePositionStatus {
    /// D
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_DRIVE_POSITION_STATUS_D = 0,

    /// N
    DW_VIO_DRIVE_POSITION_STATUS_N = 1,

    /// R
    DW_VIO_DRIVE_POSITION_STATUS_R = 2,

    /// P
    DW_VIO_DRIVE_POSITION_STATUS_P       = 3,
    DW_VIO_DRIVE_POSITION_STATUS_FORCE32 = 0x7fffffff,
} dwVioDrivePositionStatus;

/// Drive Position that will be shifted to (PRND)
typedef enum dwVioDrivePositionTarget {
    /// D
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_DRIVE_POSITION_TARGET_D = 0,

    /// N
    DW_VIO_DRIVE_POSITION_TARGET_N = 1,

    /// R
    DW_VIO_DRIVE_POSITION_TARGET_R = 2,

    /// P
    DW_VIO_DRIVE_POSITION_TARGET_P       = 3,
    DW_VIO_DRIVE_POSITION_TARGET_FORCE32 = 0x7fffffff,
} dwVioDrivePositionTarget;

/// Indicator of emergency/hazard lights
typedef enum dwVioHazardFlasherStatus {
    /// Unknown Status
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_HAZARD_FLASHER_STATUS_UNKNOWN = 0,

    /// No Hazard Lights Requested
    DW_VIO_HAZARD_FLASHER_STATUS_OFF = 1,

    /// Hazard Lights Requested
    DW_VIO_HAZARD_FLASHER_STATUS_ON      = 2,
    DW_VIO_HAZARD_FLASHER_STATUS_FORCE32 = 0x7fffffff,
} dwVioHazardFlasherStatus;

/// Indicator if driver override longitudinal control
typedef enum dwVioDriverOverrideThrottle {
    /// Driver doesn't override assistance with accelarator pedal
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_IDLE = 0,

    /// not defined
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_NDEF1 = 1,

    /// Driver overrides assistance system with accelerator pedal
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_DRV_OVERRIDE = 2,
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_FORCE32      = 0x7fffffff,
} dwVioDriverOverrideThrottle;

/// Indication of turn indicators
//# sergen(generate)
typedef enum dwVioTurnSignalStatus {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TURN_SIGNAL_STATUS_UNKNOWN   = 0,
    DW_VIO_TURN_SIGNAL_STATUS_OFF       = 1,
    DW_VIO_TURN_SIGNAL_STATUS_LEFT      = 2,
    DW_VIO_TURN_SIGNAL_STATUS_RIGHT     = 3,
    DW_VIO_TURN_SIGNAL_STATUS_EMERGENCY = 4,
    DW_VIO_TURN_SIGNAL_STATUS_FORCE32   = 0x7fffffff,
} dwVioTurnSignalStatus;

/// Indicates whether the driver requested a turn signal through stalk or other system
typedef enum dwVioTurnSignalDriverRequest {
    /// Driver has not sent a turn signal (such as via the stalk)
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TURN_SIGNAL_DRIVER_REQUEST_IDLE = 0,

    /// Driver has set a turn signal for a left turn (such as via the turn stalk)
    DW_VIO_TURN_SIGNAL_DRIVER_REQUEST_LEFT = 1,

    /// Driver has set a turn signal for a right turn (such as via the turn stalk)
    DW_VIO_TURN_SIGNAL_DRIVER_REQUEST_RIGHT   = 2,
    DW_VIO_TURN_SIGNAL_DRIVER_REQUEST_FORCE32 = 0x7fffffff,
} dwVioTurnSignalDriverRequest;

/// multi stage signal used when the haptic warning is a seat belt pre-tensioner
typedef enum dwVioLongCtrlHapticWarningTargetType {
    /// no warning
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_NONE = 0,

    /// soft
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_SOFT_TARGET = 1,

    /// hard
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_HARD_TARGET = 2,
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_FORCE32     = 0x7fffffff,
} dwVioLongCtrlHapticWarningTargetType;

/// Emergency Steering(ESS, AES) interface prepare request
typedef enum dwVioLatCtrlESCtrlStateRequest {
    /// default for non-ES modes
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_E_S_CTRL_STATE_REQUEST_IDLE = 0,

    /// if ES mode is selected, handshake of ES actuator interface
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_E_S_CTRL_STATE_REQUEST_PREPARE = 1,

    /// if ES mode is selected, activate ES control in actuator
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_E_S_CTRL_STATE_REQUEST_ACTIVE  = 2,
    DW_VIO_LAT_CTRL_E_S_CTRL_STATE_REQUEST_FORCE32 = 0x7fffffff,
} dwVioLatCtrlESCtrlStateRequest;

/// Select what lateral control interface is active (curvature for L2 and above, front wheel angle or front and rear wheel angle for Parking).
typedef enum dwVioLatCtrlReferenceInputSelect {
    /// Curvature based control
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_CURVATURE = 0,

    /// Front wheel angle based control
    DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_STEERINGANGLE = 1,
    DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_FORCE32       = 0x7fffffff,
} dwVioLatCtrlReferenceInputSelect;

/// ASIL Status of control input
typedef enum dwVioLatCtrlASILStatus {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_QM = 0,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_A = 1,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_B = 2,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_C = 3,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_D  = 4,
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_FORCE32 = 0x7fffffff,
} dwVioLatCtrlASILStatus;

/// direction of the steering intervention, opposite to side of departure
typedef enum dwVioLatCtrlInterventionDirectionLKA {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_INVALID = 0,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_FRONT = 1,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_LEFT = 2,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_RIGHT = 3,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_REAR = 4,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_FORCE32              = 0x7fffffff,
} dwVioLatCtrlInterventionDirectionLKA;

/// direction of the steering intervention, opposite to side of departure
typedef enum dwVioLatCtrlInterventionDirectionELK {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_INVALID = 0,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_FRONT = 1,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_LEFT = 2,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_RIGHT = 3,

    ///
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_REAR = 4,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_FORCE32              = 0x7fffffff,
} dwVioLatCtrlInterventionDirectionELK;

/// Report of which limit within EPS is reached on a request
typedef enum dwVioLatCtrlEPSLimitStatus {
    /// no limitation
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_NO_LIM = 0,

    /// angle limited
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_ANGLE = 1,

    /// Force limited
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_FORCE = 2,

    /// angle and force limited
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_ANGLE_FORCE = 3,
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_FORCE32         = 0x7fffffff,
} dwVioLatCtrlEPSLimitStatus;

/// Collaborative steering status, whether driver is in control or the system is controlling the vehicle, or both.
typedef enum dwVioLatCtrlLoopStatus {
    /// Unknown
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_LOOP_STATUS_UNKNOWN = 0,

    /// Open_Loop
    DW_VIO_LAT_CTRL_LOOP_STATUS_OPEN = 1,

    /// Blending
    DW_VIO_LAT_CTRL_LOOP_STATUS_BLENDING = 2,

    /// Closed_Loop
    DW_VIO_LAT_CTRL_LOOP_STATUS_CLOSED  = 3,
    DW_VIO_LAT_CTRL_LOOP_STATUS_FORCE32 = 0x7fffffff,
} dwVioLatCtrlLoopStatus;

/// Requested vehicle gear
typedef enum dwVioLongCtrlDrivePositionCommand {
    /// default
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_DRIVE_POSITION_COMMAND_IDLE    = 0,
    DW_VIO_LONG_CTRL_DRIVE_POSITION_COMMAND_D       = 1,
    DW_VIO_LONG_CTRL_DRIVE_POSITION_COMMAND_R       = 2,
    DW_VIO_LONG_CTRL_DRIVE_POSITION_COMMAND_P       = 3,
    DW_VIO_LONG_CTRL_DRIVE_POSITION_COMMAND_FORCE32 = 0x7fffffff,
} dwVioLongCtrlDrivePositionCommand;

/// signal for remote parking to signal status of redundancy
typedef enum dwVioLongCtrlRedundCheckStatus {
    /// Not availabke
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_NOT_AVBL = 0,

    /// Park redundancy available
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_PARK_REDUNDANCY_AVL = 1,

    /// Driver redundancy available
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_DRIVER_REDUNDANCY_AVL = 2,
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_FORCE32               = 0x7fffffff,
} dwVioLongCtrlRedundCheckStatus;

/// Signalizes which reference input (acceleration, remaining distance, velocity) should be used
typedef enum dwVioLongCtrlReferenceInputRequest {
    /// Idle
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_IDLE = 0,

    /// Acceleration input
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_ACCEL_INPUT = 1,

    /// Speed input
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_SPEED_INPUT = 2,

    /// Distance input
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_DIST_INPUT = 3,
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_FORCE32    = 0x7fffffff,
} dwVioLongCtrlReferenceInputRequest;

/// Friction range estimation from brake system
typedef enum dwVioLongCtrlFrictionRangeEstimation {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_UNKNOWN       = 0,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_LOW_FRICTION  = 1,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_MID_FRICTION  = 2,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_HIGH_FRICTION = 3,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_FORCE32       = 0x7fffffff,
} dwVioLongCtrlFrictionRangeEstimation;

/// Request to fold / unfold the outside mirrors
typedef enum dwVioMirrorFoldRequest {
    /// No actuation
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_MIRROR_FOLD_REQUEST_REQ_NONE = 0,

    /// Mirror should fold in
    DW_VIO_MIRROR_FOLD_REQUEST_FOLD_IN = 1,

    /// Mirror should out
    DW_VIO_MIRROR_FOLD_REQUEST_FOLD_OUT = 2,
    DW_VIO_MIRROR_FOLD_REQUEST_FORCE32  = 0x7fffffff,
} dwVioMirrorFoldRequest;

/// Request of low beam/high beam
typedef enum dwVioHeadlightRequest {
    /// no request
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_HEADLIGHT_REQUEST_NONE = 0,

    /// daylight running lights
    DW_VIO_HEADLIGHT_REQUEST_DRL = 1,

    /// lowbeam
    DW_VIO_HEADLIGHT_REQUEST_LOWBEAM = 2,

    /// highbeam
    DW_VIO_HEADLIGHT_REQUEST_HIGHBEAM = 3,

    /// leave to car setting
    DW_VIO_HEADLIGHT_REQUEST_AUTO    = 4,
    DW_VIO_HEADLIGHT_REQUEST_FORCE32 = 0x7fffffff,
} dwVioHeadlightRequest;

/// request of turn indicators
typedef enum dwVioTurnSignalRequest {
    /// no request
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TURN_SIGNAL_REQUEST_IDLE      = 0,
    DW_VIO_TURN_SIGNAL_REQUEST_OFF       = 1,
    DW_VIO_TURN_SIGNAL_REQUEST_LEFT      = 2,
    DW_VIO_TURN_SIGNAL_REQUEST_RIGHT     = 3,
    DW_VIO_TURN_SIGNAL_REQUEST_EMERGENCY = 4,
    DW_VIO_TURN_SIGNAL_REQUEST_FORCE32   = 0x7fffffff,
} dwVioTurnSignalRequest;

/// Lane Change Type (SILC or DILC). if it is NONE then thats a system error.
typedef enum dwVioTurnSignalRequestType {
    /// / No turn signal requested, or an error if a turn signal is requested
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TURN_SIGNAL_REQUEST_TYPE_NONE = 0,

    /// / The driver is the source of the event causing the turn signal request
    DW_VIO_TURN_SIGNAL_REQUEST_TYPE_DRIVER_INITIATED = 1,

    /// / The system is the source of the event causing the turn signal request
    DW_VIO_TURN_SIGNAL_REQUEST_TYPE_SYSTEM_INITIATED = 2,
    DW_VIO_TURN_SIGNAL_REQUEST_TYPE_FORCE32          = 0x7fffffff,
} dwVioTurnSignalRequestType;

/// This signal describes whether a secondary curvature request is actuated on
typedef enum dwVioLatCtrlCurvReqAdditionalStatus {
    /// Init
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_INIT = 0,

    /// Idle
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_IDLE = 1,

    /// Active
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_ACTIVE = 2,

    /// ERROR
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_ERROR = 3,

    /// Temporarily not available
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_TMP_NOT_AVL = 4,
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_FORCE32     = 0x7fffffff,
} dwVioLatCtrlCurvReqAdditionalStatus;

/// MMLON module state
typedef enum dwVioLongCtrlStatus {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_STATUS_UNKNOWN    = 0,
    DW_VIO_LONG_CTRL_STATUS_INIT       = 1,
    DW_VIO_LONG_CTRL_STATUS_RUN        = 2,
    DW_VIO_LONG_CTRL_STATUS_TERM       = 3,
    DW_VIO_LONG_CTRL_STATUS_TERMINATED = 4,
    DW_VIO_LONG_CTRL_STATUS_IDLE       = 5,
    DW_VIO_LONG_CTRL_STATUS_ERROR      = 6,
    DW_VIO_LONG_CTRL_STATUS_FORCE32    = 0x7fffffff,
} dwVioLongCtrlStatus;

/// Signalizes requested behaviour for driver interaction
typedef enum dwVioLongCtrlInteractionModeRequest {
    /// Idle
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_IDLE = 0,

    /// Regeneration made
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_REGENERATION_MODE = 1,

    /// Minimu mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_MIN_MODE = 2,

    /// Maximum mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_MAX_MODE = 3,

    /// Direct mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_DIRECT_MODE = 4,

    /// Decoupling mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_DECOUPLING_MODE = 5,
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_FORCE32         = 0x7fffffff,
} dwVioLongCtrlInteractionModeRequest;

/// Signalizes request for StillStand Coordination. Vehicle will be secured with parking brake and P-lock
typedef enum dwVioLongCtrlSecureRequest {
    /// in case of loss of communication and still moving below 10 kph the active function will be disengaged and the vehicle is free rolling
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_SECURE_REQUEST_NOMON_FLWUP = 0,

    /// in case of loss of communication ESP will trigger the brake to decelerate into standstill and the vehicle will be secured with parking brake and P-lock
    DW_VIO_LONG_CTRL_SECURE_REQUEST_SSCMON_STNDSTILL_SEC = 1,

    /// request ESP to secure the vehicle (with parking brake and P-lock) actively. This will also work below 10 kph
    DW_VIO_LONG_CTRL_SECURE_REQUEST_SSC_SEC_RQ = 2,
    DW_VIO_LONG_CTRL_SECURE_REQUEST_FORCE32    = 0x7fffffff,
} dwVioLongCtrlSecureRequest;

/// Longitudinal Actuation Health Status
typedef enum dwVioLongCtrlFaultStatus {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_FAULT_STATUS_NONE                           = 0,
    DW_VIO_LONG_CTRL_FAULT_STATUS_INIT                           = 1 << 0,
    DW_VIO_LONG_CTRL_FAULT_STATUS_HYDRAULIC_CONTROL_UNIT_FLT     = 1 << 1,
    DW_VIO_LONG_CTRL_FAULT_STATUS_EPB_FLT                        = 1 << 2,
    DW_VIO_LONG_CTRL_FAULT_STATUS_LTI_FLT                        = 1 << 3,
    DW_VIO_LONG_CTRL_FAULT_STATUS_COM_FLT                        = 1 << 4,
    DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_CHECK_FAILED        = 1 << 5,
    DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_OVERHEATED               = 1 << 6,
    DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_DEGRADATION              = 1 << 7,
    DW_VIO_LONG_CTRL_FAULT_STATUS_SAFETY_LIMITS_VIOLATED         = 1 << 8,
    DW_VIO_LONG_CTRL_FAULT_STATUS_ASU_SGNL_INPUT_PLAUSI_CHCK_FLT = 1 << 9,
    DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_UNIT_FLT            = 1 << 10,
    DW_VIO_LONG_CTRL_FAULT_STATUS_DRIVER_ABSENT                  = 1 << 11,
    DW_VIO_LONG_CTRL_FAULT_STATUS_SSC_FLT                        = 1 << 12,
    DW_VIO_LONG_CTRL_FAULT_STATUS_ESP_OR_ASR_CTRL_ACTV           = 1 << 13,
    DW_VIO_LONG_CTRL_FAULT_STATUS_FORCE32                        = 0x7fffffff,
} dwVioLongCtrlFaultStatus;

/// Brake torque availability full / reduced
typedef enum dwVioLongCtrlBrakeTorqueAvailable {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_NO_BRKTRQ_AVL = 0,

    /// reduced availability
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_RED_BRKTRQ_AVL = 1,

    /// reduced powertrain availability
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_RED_BRKTRQ_PT_AVL = 2,

    /// full availability
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_FULL_BRKTRQ_AVL = 3,
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_FORCE32         = 0x7fffffff,
} dwVioLongCtrlBrakeTorqueAvailable;

/// Request for precision or "slack" allowed for control to choose optimal strategy vs. high accuracy
typedef enum dwVioLongCtrlAccelPerfRequest {
    /// none
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_NONE = 0,

    /// comfort
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_COMFORT = 1,

    /// dynamic
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_DYNAMIC = 2,

    /// High accuracy
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_HIGH_ACCURACY = 3,

    /// emergency
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_EMERGENCY = 4,
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_FORCE32   = 0x7fffffff,
} dwVioLongCtrlAccelPerfRequest;

/// Active ADAS Mode
typedef enum dwVioLongCtrlActiveSystem {
    /// default
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_NONE              = 0,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_MANEUVER_CTRL = 1,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_PARK_CTRL     = 2,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_REMOTE_CTRL   = 3,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_DBS           = 4,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CA            = 5,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CA_PLUS       = 6,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CRUISE_CTRL   = 7,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_L3            = 8,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_FORCE32           = 0x7fffffff,
} dwVioLongCtrlActiveSystem;

/// Brake pedal state
typedef enum dwVioBrakePedalStatus {
    /// Pedal upstopped
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_BRAKE_PEDAL_STATUS_UPSTOP = 0,

    /// Pedal pressed
    DW_VIO_BRAKE_PEDAL_STATUS_PSD = 1,

    /// not defined
    DW_VIO_BRAKE_PEDAL_STATUS_NDEF2   = 2,
    DW_VIO_BRAKE_PEDAL_STATUS_FORCE32 = 0x7fffffff,
} dwVioBrakePedalStatus;

/// with this signal VAL can give Information to BP about the Status of ECOAssist
//values:
//Inactive
//Active
//Controlling
typedef enum dwVioLongCtrlEcoAssistStatus {
    /// eco assist unknown
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_UNKNOWN = 0,

    /// eco assist inactive
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_INACTIVE = 1,

    /// eco assist active
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ACTIVE = 2,

    /// eco assist engaged
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ENGAGED = 3,
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_FORCE32 = 0x7fffffff,
} dwVioLongCtrlEcoAssistStatus;

/// This signal shows the availability of the L3 communication of the Motion Management longitudinal interface.
typedef enum dwVioLongCtrlComAvailable {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_COM_AVAILABLE_NO_PATH_VALID       = 0,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_VALID          = 1,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_SAT_VALID           = 2,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_SAT_VALID      = 3,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_BMRM_VALID          = 4,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_BMRM_VALID     = 5,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_SAT_BMRM_VALID      = 6,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_SAT_BMRM_VALID = 7,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_FORCE32             = 0x7fffffff,
} dwVioLongCtrlComAvailable;

/// SW mModule state
typedef enum dwVioLatCtrlStatus {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_STATUS_INIT       = 0,
    DW_VIO_LAT_CTRL_STATUS_IDLE       = 1,
    DW_VIO_LAT_CTRL_STATUS_CTRL       = 2,
    DW_VIO_LAT_CTRL_STATUS_TERMINATED = 3,
    DW_VIO_LAT_CTRL_STATUS_ERROR      = 4,
    DW_VIO_LAT_CTRL_STATUS_FORCE32    = 0x7fffffff,
} dwVioLatCtrlStatus;

/// requested mode for the lateral control interface
typedef enum dwVioLatCtrlModeRequest {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_MODE_REQUEST_IDLE    = 0,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2      = 1,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2_PLUS = 2,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2_HFE  = 3,
    DW_VIO_LAT_CTRL_MODE_REQUEST_AES     = 4,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L3      = 5,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L3_EMG  = 6,
    DW_VIO_LAT_CTRL_MODE_REQUEST_LSS     = 7,
    DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_L2 = 8,
    DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_L3 = 9,

    /// @deprecated PARK_RECORD is deprecated and should not be used. REL_23_02
    DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_RECORD DW_DEPRECATED_ENUM("PARK_RECORD is deprecated and should not be used. REL_23_02") = 10,
    DW_VIO_LAT_CTRL_MODE_REQUEST_ESS                                                                                           = 11,
    DW_VIO_LAT_CTRL_MODE_REQUEST_ARP                                                                                           = 12,

    /// L2++
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2_PLUS_PLUS = 13,

    /// Emergency Escalating Stop Function
    DW_VIO_LAT_CTRL_MODE_REQUEST_EESF    = 14,
    DW_VIO_LAT_CTRL_MODE_REQUEST_FORCE32 = 0x7fffffff,
} dwVioLatCtrlModeRequest;

/// Longitudinal Mode Request for functions that have medium safety requirements on activation
//Request for Longitudinal interface to go into one of the following modes: manual/human driving, active safety, L1/L2, parking
typedef enum dwVioLonCtrlSafetyLimRequest {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_NONE                     = 0,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_MANEUVERING              = 1,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_PARKING_CONTROL          = 2,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_REMOTE_OR_L4_PARKING     = 3,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_DRIVER_BRAKE_SUPPORT     = 4,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_COLLISION_AVOIDANCE      = 5,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_COLLISION_AVOIDANCE_PLUS = 6,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_CRUISE_CONTROL           = 7,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_L3_DRIVING               = 8,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_FORCE32                  = 0x7fffffff,
} dwVioLonCtrlSafetyLimRequest;

/// Current returned mode of the lateral interface: manual/human driving, active safety, L1/L2/L3, parking (from MM to NDAS)
typedef enum dwVioLatCtrlModeStatus {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_MODE_STATUS_IDLE    = 0,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2      = 1,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2_PLUS = 2,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2_HFE  = 3,
    DW_VIO_LAT_CTRL_MODE_STATUS_AES     = 4,
    DW_VIO_LAT_CTRL_MODE_STATUS_L3      = 5,
    DW_VIO_LAT_CTRL_MODE_STATUS_L3_EMG  = 6,
    DW_VIO_LAT_CTRL_MODE_STATUS_LSS     = 7,
    DW_VIO_LAT_CTRL_MODE_STATUS_PARK_L2 = 8,
    DW_VIO_LAT_CTRL_MODE_STATUS_PARK_L3 = 9,

    /// @deprecated PARK_RECORD is deprecated and should not be used. REL_23_02
    DW_VIO_LAT_CTRL_MODE_STATUS_PARK_RECORD DW_DEPRECATED_ENUM("PARK_RECORD is deprecated and should not be used. REL_23_02") = 10,
    DW_VIO_LAT_CTRL_MODE_STATUS_ESS                                                                                           = 11,
    DW_VIO_LAT_CTRL_MODE_STATUS_ARP                                                                                           = 12,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2_PLUS_PLUS                                                                                  = 13,

    /// Emergency Escalating Stop Function
    DW_VIO_LAT_CTRL_MODE_STATUS_EESF    = 14,
    DW_VIO_LAT_CTRL_MODE_STATUS_FORCE32 = 0x7fffffff,
} dwVioLatCtrlModeStatus;

/// Currently available Modes (bitmask definition)
typedef enum dwVioLatCtrlModeAvail {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_MODE_AVAIL_NONE    = 0,
    DW_VIO_LAT_CTRL_MODE_AVAIL_DFLT    = 1 << 0,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L2      = 1 << 1,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L2_PLUS = 1 << 2,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L2_HFE  = 1 << 3,
    DW_VIO_LAT_CTRL_MODE_AVAIL_AES     = 1 << 4,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L3      = 1 << 5,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L3_EMG  = 1 << 6,
    DW_VIO_LAT_CTRL_MODE_AVAIL_LSS     = 1 << 7,
    DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L2 = 1 << 8,
    DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L3 = 1 << 9,

    /// @deprecated PARK_RECORD is deprecated and should not be used. REL_23_02
    DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_RECORD DW_DEPRECATED_ENUM("PARK_RECORD is deprecated and should not be used. REL_23_02") = 1 << 10,
    DW_VIO_LAT_CTRL_MODE_AVAIL_ESS                                                                                           = 1 << 11,
    DW_VIO_LAT_CTRL_MODE_AVAIL_ARP                                                                                           = 1 << 12,

    /// L2++
    DW_VIO_LAT_CTRL_MODE_AVAIL_L2_PLUS_PLUS = 1 << 13,

    /// Emergency Escalating Stop Function
    DW_VIO_LAT_CTRL_MODE_AVAIL_EESF    = 1 << 14,
    DW_VIO_LAT_CTRL_MODE_AVAIL_FORCE32 = 0x7fffffff,
} dwVioLatCtrlModeAvail;

/// Steering system override status
typedef enum dwVioLatCtrlDriverInterventionStatus {
    /// no detection
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_NOHOWDETECTION = 0,

    /// Driver in the loop/HandsOn
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP = 1,

    /// Driver in the loop: TOUCH
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_TOUCH = 2,

    /// Driver in the loop: GRASP
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_GRASP = 3,

    /// driver in the loop: DOUBLE_GRABBED
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_DOUBLEGRABBED = 4,

    /// Driver in the loop: Park interruption detected
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVPARKINTERRUPT = 5,

    /// Driver in the loop: L3 interruption detected
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVL3INTERRUPT = 6,

    /// Error in driver intervention detection
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINERRHOSWD = 7,

    /// Driver in loop/HandsOn (no HOSWD)
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_DEGRADEDHOSWD = 8,

    /// No driver in the loop detected (no HOSWD)
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_NOHOWDETECTION_DEGRADEDHOSWD = 9,
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_FORCE32                      = 0x7fffffff,
} dwVioLatCtrlDriverInterventionStatus;

/// Currently active Error (bitmask definition)
//
// (0 means no error present
// 65535 all possible errors are present)
typedef enum dwVioLatCtrlErrorStatus {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LAT_CTRL_ERROR_STATUS_NONE = 0,

    /// Speed too high for PARK IF activation
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_ENGMNT_RQ_SPD = 1 << 0,

    /// Speed violation for PARK function
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_MAX_SPD_LIM_MODE_MAX_SPD = 1 << 1,

    /// Powertrain off during active PARK mode
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_PT_OFF = 1 << 2,

    /// Not specified error during active PARK mode
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_MISC = 1 << 3,

    /// Reverse gear engaged during L2 driving
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_REV_GR = 1 << 4,

    /// Temporary off error during L2 driving or Start Stop System override during stand still
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_TMP_OFF_SSA = 1 << 5,

    /// Not specified error during active L2 mode
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_OTHER = 1 << 6,

    /// Plausibility error detected
    DW_VIO_LAT_CTRL_ERROR_STATUS_PLAUSIERROR = 1 << 7,

    /// Communication error detected
    DW_VIO_LAT_CTRL_ERROR_STATUS_COMMERROR = 1 << 8,

    /// L3 error - tbd
    DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_1 = 1 << 9,

    /// L3 error - tbd
    DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_2   = 1 << 10,
    DW_VIO_LAT_CTRL_ERROR_STATUS_TIMEOUTDTCTD = 1 << 11,

    /// “Engagement prevention suppresses activation of MM”
    DW_VIO_LAT_CTRL_ERROR_STATUS_ENGAGEMENTPREVENTIONCOND = 1 << 12,

    /// Engagement while driver not ready / Disengagement due to faulty driver conditions
    DW_VIO_LAT_CTRL_ERROR_STATUS_SAFETYDRIVERCNDTNSFLT = 1 << 13,

    /// Rear axle steering is in derating
    DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_DERATING = 1 << 14,

    /// Rear axle interface canceled by ECU
    DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_MD_MAN_CANCEL = 1 << 15,

    /// "ABSM Interface is permanently closed, new Ignition Cycle necessary"
    DW_VIO_LAT_CTRL_ERROR_STATUS_ABSM_ERROR_IFCPERMCLOSED = 1 << 16,

    /// "interface request rejected by priorization in RoV"
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_TMP_OFF_REJECT = 1 << 17,

    /// "interface request rejected by derating of EPS"
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_DERATE = 1 << 18,
    DW_VIO_LAT_CTRL_ERROR_STATUS_FORCE32            = 0x7fffffff,
} dwVioLatCtrlErrorStatus;

/// Unified Longitudinal Mode Request
typedef enum dwVioLongCtrlFunctionReq {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_FUNCTION_REQ_IDLE                         = 0,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_APA_COMFORT                  = 1,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_APA_HIGH_ACCURACY            = 2,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_RMA                          = 3,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_TMA                          = 4,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_ACC                          = 10,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_ECO                          = 11,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_EESF_COMFORT                 = 12,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_EESF_EMERGENCY               = 13,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_DBS                          = 20,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_AEB_PB                       = 21,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_AEB_FB                       = 22,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_CPM_EMERGENCY                = 23,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_CPM_DAA                      = 24,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_L3_COMFORT                   = 30,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_L3_EMERGENCY                 = 31,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_REMOTE_PARKING_COMFORT       = 32,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_REMOTE_PARKING_HIGH_ACCURACY = 33,
    DW_VIO_LONG_CTRL_FUNCTION_REQ_FORCE32                      = 0x7fffffff,
} dwVioLongCtrlFunctionReq;

/// Active Longitudinal Mode
typedef enum dwVioLongCtrlActiveFunction {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_IDLE                         = 0,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_APA_COMFORT                  = 1,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_APA_HIGH_ACCURACY            = 2,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_RMA                          = 3,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_TMA                          = 4,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_ACC                          = 10,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_ECO                          = 11,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_EESF_COMFORT                 = 12,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_EESF_EMERGENCY               = 13,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_DBS                          = 20,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_AEB_PB                       = 21,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_AEB_FB                       = 22,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_CPM_EMERGENCY                = 23,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_CPM_DAA                      = 24,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_L3_COMFORT                   = 30,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_L3_EMERGENCY                 = 31,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_REMOTE_PARKING_COMFORT       = 32,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_REMOTE_PARKING_HIGH_ACCURACY = 33,
    DW_VIO_LONG_CTRL_ACTIVE_FUNCTION_FORCE32                      = 0x7fffffff,
} dwVioLongCtrlActiveFunction;

/// ESP operation state for assistance systems
typedef enum dwVioESCOperationalState {
    /// Normal operation
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_NORM = 0,

    /// Initialization
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_INIT = 1,

    /// Diagnostics
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_DIAG = 2,

    /// Exhaust emission test
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_EMT = 3,

    /// Test bench cruise control mode
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_TBCC = 4,

    /// Temporary or continously system error
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_FLT = 5,

    /// ESP or ASR control active
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_ESP_ASR_CTRL_ACTV = 6,

    /// Sport Version
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_SPORT_OFF = 7,

    /// ESP off mode or Sport plus
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_OFF_SPORT_PLUS = 8,

    /// ABS control active
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO__E_S_C_OPERATIONAL_STATE_ABS_CTRL_ACTV = 9,
    DW_VIO__E_S_C_OPERATIONAL_STATE_FORCE32       = 0x7fffffff,
} dwVioESCOperationalState;

/// This arbitration activation status signal shows if the arbitration overrode any of the driving functions on a per function basis. Each bit indicates if the corresponding ndas signal is manipulated/overridden by the arbitration. For a bit, a value of 0 indicates that the signal is not changed through arbitration, a value of 1 indicates that the signal will be changed through arbitration.
typedef enum dwVioAbtActivationStatus {
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_ABT_ACTIVATION_STATUS_NONE = 0,

    /// Activation Control (longCtrlActivationRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_ACTIVATION_CTRL = 1 << 0,

    /// Drive select gear position (longCtrlDrivePositionCommand)
    DW_VIO_ABT_ACTIVATION_STATUS_GEAR_COMMAND_RQ = 1 << 1,

    /// Interaction Mode (longCtrlInteractionModeRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_INTERACTION_MODE = 1 << 2,

    /// Performance Request (longCtrlAccelPerfRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_PERFORMANCE_RQ = 1 << 3,

    /// Prefill Request (longCtrlBrakePrefillRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_PREFILL_RQ = 1 << 4,

    /// Redundancy Check Status Request (longCtrlRedundCheckStatus)
    DW_VIO_ABT_ACTIVATION_STATUS_REDUNDANCY_CHECK_RQ = 1 << 5,

    /// Reference Input Select (longCtrlReferenceInputRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_REFERENCE_INPUT = 1 << 6,

    /// Remaining Distance (longCtrlRemainingDistance)
    DW_VIO_ABT_ACTIVATION_STATUS_REMAINING_DISTANCE_RQ = 1 << 7,

    /// Secure state request (longCtrlSecureRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_SECURE_STATE_RQ = 1 << 8,

    /// Safety Limit Request (lonCtrlSafetyLimRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_SAFETY_LIMIT = 1 << 9,

    /// Acceleration Request (longCtrlAccelRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_ACCELERATION_RQ = 1 << 10,

    /// Maximum Speed Request (longCtrlMaxSpeedRequest)
    DW_VIO_ABT_ACTIVATION_STATUS_MAXIMUM_SPEED_RQ = 1 << 11,
    DW_VIO_ABT_ACTIVATION_STATUS_FORCE32          = 0x7fffffff,
} dwVioAbtActivationStatus;

/// UNKNOWN   = 0,
//OFF   = 1,
//LOW_BEAM  = 2,
//HIGH_BEAM = 3,
//DRL   = 4 //DAYTIME RUNNING LIGHTS
typedef enum dwVioHeadlightState {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_HEADLIGHT_STATE_UNKNOWN   = 0,
    DW_VIO_HEADLIGHT_STATE_OFF       = 1,
    DW_VIO_HEADLIGHT_STATE_LOW_BEAM  = 2,
    DW_VIO_HEADLIGHT_STATE_HIGH_BEAM = 3,

    /// DAYTIME RUNNING LIGHTS
    DW_VIO_HEADLIGHT_STATE_DRL     = 4,
    DW_VIO_HEADLIGHT_STATE_FORCE32 = 0x7fffffff,
} dwVioHeadlightState;

/// Ambient temperature Signal Quality identifier
typedef enum dwVioOutsideTemperatureQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_SIG_DEF = 3,
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_FORCE32 = 0x7fffffff,
} dwVioOutsideTemperatureQuality;

/// Rain Level as an enumeration
typedef enum dwVioRainLevel {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_RAIN_LEVEL_INIT         = 0,
    DW_VIO_RAIN_LEVEL_DRY          = 1,
    DW_VIO_RAIN_LEVEL_RAIN_LEVEL_1 = 2,
    DW_VIO_RAIN_LEVEL_RAIN_LEVEL_2 = 3,
    DW_VIO_RAIN_LEVEL_RAIN_LEVEL_3 = 4,
    DW_VIO_RAIN_LEVEL_RAIN_LEVEL_4 = 5,
    DW_VIO_RAIN_LEVEL_RAIN_LEVEL_5 = 6,
    DW_VIO_RAIN_LEVEL_FORCE32      = 0x7fffffff,
} dwVioRainLevel;

/// Rain sensor fault indicates if the rain sensor is in a fault state.
typedef enum dwVioRainSensorFault {
    /// no info
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_RAIN_SENSOR_FAULT_UNKNOWN = 0,

    /// False
    DW_VIO_RAIN_SENSOR_FAULT_FALSE = 1,

    /// True
    DW_VIO_RAIN_SENSOR_FAULT_TRUE    = 2,
    DW_VIO_RAIN_SENSOR_FAULT_FORCE32 = 0x7fffffff,
} dwVioRainSensorFault;

/// Light sensor fault
typedef enum dwVioLightSensorFault {
    /// no info
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LIGHT_SENSOR_FAULT_UNKNOWN = 0,

    /// False
    DW_VIO_LIGHT_SENSOR_FAULT_FALSE = 1,

    /// True
    DW_VIO_LIGHT_SENSOR_FAULT_TRUE    = 2,
    DW_VIO_LIGHT_SENSOR_FAULT_FORCE32 = 0x7fffffff,
} dwVioLightSensorFault;

/// Micro Siren detected
typedef enum dwVioMicroSirenDetected {
    /// no info
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_MICRO_SIREN_DETECTED_UNKNOWN = 0,

    /// False
    DW_VIO_MICRO_SIREN_DETECTED_FALSE = 1,

    /// True
    DW_VIO_MICRO_SIREN_DETECTED_TRUE    = 2,
    DW_VIO_MICRO_SIREN_DETECTED_FORCE32 = 0x7fffffff,
} dwVioMicroSirenDetected;

/// Micro Siren available
typedef enum dwVioMicroSirenAvailable {
    /// no info
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_MICRO_SIREN_AVAILABLE_UNKNOWN = 0,

    /// False
    DW_VIO_MICRO_SIREN_AVAILABLE_FALSE = 1,

    /// True
    DW_VIO_MICRO_SIREN_AVAILABLE_TRUE    = 2,
    DW_VIO_MICRO_SIREN_AVAILABLE_FORCE32 = 0x7fffffff,
} dwVioMicroSirenAvailable;

/// State Function Siren Detection
typedef enum dwVioStateFunctionSirenDetection {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_STATE_FUNCTION_SIREN_DETECTION_OFF         = 0,
    DW_VIO_STATE_FUNCTION_SIREN_DETECTION_OPERATIONAL = 1,
    DW_VIO_STATE_FUNCTION_SIREN_DETECTION_INIT        = 2,
    DW_VIO_STATE_FUNCTION_SIREN_DETECTION_NOT_OK      = 3,
    DW_VIO_STATE_FUNCTION_SIREN_DETECTION_FORCE32     = 0x7fffffff,
} dwVioStateFunctionSirenDetection;

/// Micro Siren Type
typedef enum dwVioMicroSirenType {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_MICRO_SIREN_TYPE_DEFAULT = 0,
    DW_VIO_MICRO_SIREN_TYPE_TYPE1   = 1,
    DW_VIO_MICRO_SIREN_TYPE_TYPE2   = 2,
    DW_VIO_MICRO_SIREN_TYPE_TYPE3   = 3,
    DW_VIO_MICRO_SIREN_TYPE_TYPE4   = 4,
    DW_VIO_MICRO_SIREN_TYPE_TYPE5   = 5,
    DW_VIO_MICRO_SIREN_TYPE_TYPE6   = 6,
    DW_VIO_MICRO_SIREN_TYPE_TYPE7   = 7,
    DW_VIO_MICRO_SIREN_TYPE_TYPE8   = 8,
    DW_VIO_MICRO_SIREN_TYPE_TYPE9   = 9,
    DW_VIO_MICRO_SIREN_TYPE_FORCE32 = 0x7fffffff,
} dwVioMicroSirenType;

/// Light sensor 'tunnel' detected
typedef enum dwVioLightSensorTunnel {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LIGHT_SENSOR_TUNNEL_UNKNOWN = 0,

    /// Not in Tunnel
    DW_VIO_LIGHT_SENSOR_TUNNEL_FALSE = 1,

    /// In Tunnel
    DW_VIO_LIGHT_SENSOR_TUNNEL_TRUE    = 2,
    DW_VIO_LIGHT_SENSOR_TUNNEL_FORCE32 = 0x7fffffff,
} dwVioLightSensorTunnel;

/// Light sensor detects night mode
typedef enum dwVioLightSensorNightMode {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LIGHT_SENSOR_NIGHT_MODE_DAY       = 0,
    DW_VIO_LIGHT_SENSOR_NIGHT_MODE_NIGHT     = 1,
    DW_VIO_LIGHT_SENSOR_NIGHT_MODE_UNDEFINED = 2,
    DW_VIO_LIGHT_SENSOR_NIGHT_MODE_FORCE32   = 0x7fffffff,
} dwVioLightSensorNightMode;

/// Light sensor request - turn on low beam
typedef enum dwVioLightSensorRequestLowBeam {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_LIGHT_SENSOR_REQUEST_LOW_BEAM_IDLE     = 0,
    DW_VIO_LIGHT_SENSOR_REQUEST_LOW_BEAM_LOBM_ON  = 1,
    DW_VIO_LIGHT_SENSOR_REQUEST_LOW_BEAM_LOBM_OFF = 2,
    DW_VIO_LIGHT_SENSOR_REQUEST_LOW_BEAM_FORCE32  = 0x7fffffff,
} dwVioLightSensorRequestLowBeam;

/// Current status of front wide camera calibration.
typedef enum dwVioCalibratedStatus {
    /// calibration has not accepted the value yet
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_CALIBRATED_STATUS_NOT_ACCEPTED = 0,

    /// calibration has accepted the value
    DW_VIO_CALIBRATED_STATUS_ACCEPTED = 1,

    /// calibration has failed
    DW_VIO_CALIBRATED_STATUS_FAILED = 2,

    /// calibration state is invalid (e.g. when a door with a sensor is open or a mirror is moving)
    DW_VIO_CALIBRATED_STATUS_INVALID = 3,
    DW_VIO_CALIBRATED_STATUS_FORCE32 = 0x7fffffff,
} dwVioCalibratedStatus;

/// State of drivers safety belt
typedef enum dwVioBuckleStateDriver {
    /// buckle closed
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_BUCKLE_STATE_DRIVER_CLOSED = 0,

    /// buckle opened
    DW_VIO_BUCKLE_STATE_DRIVER_OPEN = 1,

    /// state not known
    DW_VIO_BUCKLE_STATE_DRIVER_UNKNOWN = 2,
    DW_VIO_BUCKLE_STATE_DRIVER_FORCE32 = 0x7fffffff,
} dwVioBuckleStateDriver;

/// State of front passenger safety belt
typedef enum dwVioBuckleStateFrontPassenger {
    /// buckle closed
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_CLOSED = 0,

    /// buckle opened
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_OPEN = 1,

    /// state not known
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_UNKNOWN = 2,
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_FORCE32 = 0x7fffffff,
} dwVioBuckleStateFrontPassenger;

/// Status of Trailer Hitch
typedef enum dwVioTrailerHitchStatus {
    /// unknown status
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_UNKNOWN = 0,

    /// error
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_ERROR = 1,

    /// not fitted / installed
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_NOT_FITTED = 2,

    /// Retracted position
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_RETRACTED = 3,

    /// Working position with nothing plugged in
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED = 4,

    /// Working position with device plugged in
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED_ATTACHED = 5,
    DW_VIO_TRAILER_HITCH_STATUS_FORCE32                 = 0x7fffffff,
} dwVioTrailerHitchStatus;

/// Status of vehicle ignition.
typedef enum dwVioIgnitionStatus {
    /// Ignition lock (0)
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_IGNITION_STATUS_IGN_LOCK = 0,

    /// Ignition off (15c)
    DW_VIO_IGNITION_STATUS_IGN_OFF = 1,

    /// Ignition accessory (15r)
    DW_VIO_IGNITION_STATUS_IGN_ACC = 2,

    /// Ignition on (15)
    DW_VIO_IGNITION_STATUS_IGN_ON = 3,

    /// Ignition start (50)
    DW_VIO_IGNITION_STATUS_IGN_START = 4,
    DW_VIO_IGNITION_STATUS_FORCE32   = 0x7fffffff,
} dwVioIgnitionStatus;

/// Direction of travel as measured by ESP (forward, backward, undefined)
typedef enum dwVioSpeedDirectionESC {
    /// Neither forward nor backward (stop)
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_SPEED_DIRECTION_E_S_C_VOID = 0,

    /// Direction forward
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_SPEED_DIRECTION_E_S_C_FORWARD = 1,

    /// Direction backward
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_SPEED_DIRECTION_E_S_C_BACKWARD = 2,
    DW_VIO_SPEED_DIRECTION_E_S_C_FORCE32  = 0x7fffffff,
} dwVioSpeedDirectionESC;

/// Quality of velocity of the vehicle in the longitudinal direction as measured by ESC
typedef enum dwVioSpeedQualityESC {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_SPEED_QUALITY_E_S_C_NOT_DEFINED = 0,

    /// normal as specified
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_SPEED_QUALITY_E_S_C_NORMAL_OPERATION = 1,

    /// reduced signal integrity, "best effort"
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_SPEED_QUALITY_E_S_C_REDUCED_QUALITY = 2,

    /// Signal defect detected
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_SPEED_QUALITY_E_S_C_SIG_DEF = 3,
    DW_VIO_SPEED_QUALITY_E_S_C_FORCE32 = 0x7fffffff,
} dwVioSpeedQualityESC;

/// Vehicle in Standstill as detected by ESC
typedef enum dwVioVehicleStopped {
    /// Schroedingers Vehicle Motion
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_VEHICLE_STOPPED_UNKNOWN = 0,

    /// Vehicle moving
    DW_VIO_VEHICLE_STOPPED_FALSE = 1,

    /// Vehicle not moving
    DW_VIO_VEHICLE_STOPPED_TRUE    = 2,
    DW_VIO_VEHICLE_STOPPED_FORCE32 = 0x7fffffff,
} dwVioVehicleStopped;

/// Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR)
typedef enum dwVioWheelSpeedQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_SPEED_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity, Electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_WHEEL_SPEED_QUALITY_SIG_DEF = 3,
    DW_VIO_WHEEL_SPEED_QUALITY_FORCE32 = 0x7fffffff,
} dwVioWheelSpeedQuality;

/// Quality of the wheel ticks (vector of enums) (Order FL,FR,RL,RR)
typedef enum dwVioWheelTicksQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_TICKS_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_WHEEL_TICKS_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity, Electrical checks passed
    DW_VIO_WHEEL_TICKS_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_WHEEL_TICKS_QUALITY_SIG_DEF = 3,
    DW_VIO_WHEEL_TICKS_QUALITY_FORCE32 = 0x7fffffff,
} dwVioWheelTicksQuality;

/// Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR)
typedef enum dwVioWheelTicksDirection {
    /// Neither forward nor backward (stop)
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_TICKS_DIRECTION_VOID = 0,

    /// Direction forward
    DW_VIO_WHEEL_TICKS_DIRECTION_FORWARD = 1,

    /// Direction backward
    DW_VIO_WHEEL_TICKS_DIRECTION_BACKWARD = 2,
    DW_VIO_WHEEL_TICKS_DIRECTION_FORCE32  = 0x7fffffff,
} dwVioWheelTicksDirection;

/// Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR)
typedef enum dwVioWheelTicksTimestampQuality {
    /// Not Initialized. still initializing
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_OK = 1,

    /// Synchronization lost.
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_FORCE32   = 0x7fffffff,
} dwVioWheelTicksTimestampQuality;

/// Quality of torque of each individual wheel (Order FL,FR,RL,RR)
typedef enum dwVioWheelTorqueQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_TORQUE_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_WHEEL_TORQUE_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_WHEEL_TORQUE_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_WHEEL_TORQUE_QUALITY_SIG_DEF = 3,
    DW_VIO_WHEEL_TORQUE_QUALITY_FORCE32 = 0x7fffffff,
} dwVioWheelTorqueQuality;

/// Quality of currently applied brake torque on each individual wheel (Order FL,FR,RL,RR)
typedef enum dwVioBrakeTorqueWheelsQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_SIG_DEF = 3,
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_FORCE32 = 0x7fffffff,
} dwVioBrakeTorqueWheelsQuality;

/// Signals whether the main brake applied
typedef enum dwVioBrakeStatus {
    /// No Braking
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_BRAKE_STATUS_NO_BRAKING = 0,

    /// Braking
    DW_VIO_BRAKE_STATUS_BRAKING = 1,

    /// unknown status
    DW_VIO_BRAKE_STATUS_UNKNOWN = 2,
    DW_VIO_BRAKE_STATUS_FORCE32 = 0x7fffffff,
} dwVioBrakeStatus;

/// ABS Lock control on all wheels
typedef enum dwVioBrakeAllWheelsABS {
    /// Not all wheels
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_INACTIVE = 0,

    /// All wheels in ABS
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_ACTIVE = 1,

    /// unknown status
    // buf:lint:ignore ENUM_VALUE_PREFIX
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_UNKNOWN = 2,
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_FORCE32 = 0x7fffffff,
} dwVioBrakeAllWheelsABS;

/// Quality of timestamp(s) of wheel torques (Order FL,FR,RL,RR)
typedef enum dwVioWheelTorqueTimestampsQuality {
    /// Not Initialized. still initializing
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_OK = 1,

    /// Synchronization lost.
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_SYNC_LOST = 2,
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_FORCE32   = 0x7fffffff,
} dwVioWheelTorqueTimestampsQuality;

/// Current front axle angle status
typedef enum dwVioFrontSteeringAngleQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_REDUCED_QUALITY = 2,

    /// not initialized
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_INIT = 3,

    /// Signal defect detected
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_SIG_DEF = 4,
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_FORCE32 = 0x7fffffff,
} dwVioFrontSteeringAngleQuality;

/// Current front axle steering angle offset quality
typedef enum dwVioFrontSteeringAngleOffsetQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_SIG_DEF = 3,
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_FORCE32 = 0x7fffffff,
} dwVioFrontSteeringAngleOffsetQuality;

/// Front axle steering angle timestamp quality
typedef enum dwVioFrontSteeringTimestampQuality {
    /// Not Initialized. still initializing
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_OK = 1,

    /// Synchronization lost.
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_FORCE32   = 0x7fffffff,
} dwVioFrontSteeringTimestampQuality;

/// Current rear axle steering angle quality
typedef enum dwVioRearWheelAngleQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_REDUCED_QUALITY = 2,

    /// not initialized
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_INIT = 3,

    /// Signal defect detected
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_SIG_DEF = 4,
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_FORCE32 = 0x7fffffff,
} dwVioRearWheelAngleQuality;

/// Current rear axlesteering angle offset quality
typedef enum dwVioRearWheelAngleOffsetQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_SIG_DEF = 3,
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_FORCE32 = 0x7fffffff,
} dwVioRearWheelAngleOffsetQuality;

/// Rear axle steering angle timestamp quality
typedef enum dwVioRearWheelAngleTimestampQuality {
    /// Not Initialized. still initializing
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_OK = 1,

    /// Synchronization lost.
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_FORCE32   = 0x7fffffff,
} dwVioRearWheelAngleTimestampQuality;

/// Indicator of ESP/ABS intervention status
typedef enum dwVioAbsIntervention {
    /// Normal operation, no intervention
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_ABS_INTERVENTION_FALSE = 0,

    /// @deprecated INIT is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_INIT DW_DEPRECATED_ENUM("INIT is deprecated and should not be used. REL_23_02") = 1,

    /// @deprecated DIAG is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_DIAG DW_DEPRECATED_ENUM("DIAG is deprecated and should not be used. REL_23_02") = 2,

    /// @deprecated EMT is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_EMT DW_DEPRECATED_ENUM("EMT is deprecated and should not be used. REL_23_02") = 3,

    /// @deprecated TTBCC is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_TBCC DW_DEPRECATED_ENUM("TTBCC is deprecated and should not be used. REL_23_02") = 4,

    /// @deprecated FLT is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_FLT DW_DEPRECATED_ENUM("FLT is deprecated and should not be used. REL_23_02") = 5,

    /// @deprecated ESP_ASR_CTRL is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_ESP_ASR_CTRL_ACTV DW_DEPRECATED_ENUM("ESP_ASR_CTRL is deprecated and should not be used. REL_23_02") = 6,

    /// @deprecated SPORT_OFF is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_SPORT_OFF DW_DEPRECATED_ENUM("SPORT_OFF is deprecated and should not be used. REL_23_02") = 7,

    /// @deprecated SPORT2_OFF is deprecated and should not be used. REL_23_02
    DW_VIO_ABS_INTERVENTION_SPORT2_OFF DW_DEPRECATED_ENUM("SPORT2_OFF is deprecated and should not be used. REL_23_02") = 8,

    /// ABS control active
    DW_VIO_ABS_INTERVENTION_TRUE    = 9,
    DW_VIO_ABS_INTERVENTION_FORCE32 = 0x7fffffff,
} dwVioAbsIntervention;

/// State of mirror folding procedure (FOLD, MOVING, UNFOLD). mirrorFoldState[0] corresponds to the left mirror and mirrorFoldState[1] corresponds to the right one.
typedef enum dwVioMirrorFoldState {
    /// Mirror/Camera is not in end position and not being moved / ERROR
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_MIRROR_FOLD_STATE_UNKNOWN = 0,

    /// Mirror/Camera is in folded position
    DW_VIO_MIRROR_FOLD_STATE_FOLDED = 1,

    /// Mirror/Camera is in unfolded position
    DW_VIO_MIRROR_FOLD_STATE_UNFOLDED = 2,

    /// Mirror/Camera is folding in
    DW_VIO_MIRROR_FOLD_STATE_FOLD_IN = 3,

    /// Mirror/Camera is folding out
    DW_VIO_MIRROR_FOLD_STATE_FOLD_OUT = 4,
    DW_VIO_MIRROR_FOLD_STATE_FORCE32  = 0x7fffffff,
} dwVioMirrorFoldState;

/// State of SVS cameras (front/rear) folding procedure (FOLD, MOVING, UNFOLD)
typedef enum dwVioCameraFoldState {
    /// Mirror/Camera is not in end position and not being moved / ERROR
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_CAMERA_FOLD_STATE_UNKNOWN = 0,

    /// Mirror/Camera is in folded position
    DW_VIO_CAMERA_FOLD_STATE_FOLDED = 1,

    /// Mirror/Camera is in unfolded position
    DW_VIO_CAMERA_FOLD_STATE_UNFOLDED = 2,

    /// Mirror/Camera is folding in
    DW_VIO_CAMERA_FOLD_STATE_FOLD_IN = 3,

    /// Mirror/Camera is folding out
    DW_VIO_CAMERA_FOLD_STATE_FOLD_OUT = 4,
    DW_VIO_CAMERA_FOLD_STATE_FORCE32  = 0x7fffffff,
} dwVioCameraFoldState;

/// State of SVS cameras (front/rear) folding procedure (FOLD, MOVING, UNFOLD)
typedef enum dwVioCameraFoldRequest {
    /// No actuation
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_CAMERA_FOLD_REQUEST_NONE = 0,

    /// Mirror should fold in
    DW_VIO_CAMERA_FOLD_REQUEST_FOLD_IN = 1,

    /// Mirror should out
    DW_VIO_CAMERA_FOLD_REQUEST_FOLD_OUT = 2,
    DW_VIO_CAMERA_FOLD_REQUEST_FORCE32  = 0x7fffffff,
} dwVioCameraFoldRequest;

/// Vehicle suspension level quality quality
typedef enum dwVioSuspensionLevelQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_SUSPENSION_LEVEL_QUALITY_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_SUSPENSION_LEVEL_QUALITY_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_SUSPENSION_LEVEL_QUALITY_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_SUSPENSION_LEVEL_QUALITY_SIG_DEF = 3,
    DW_VIO_SUSPENSION_LEVEL_QUALITY_FORCE32 = 0x7fffffff,
} dwVioSuspensionLevelQuality;

/// Vehicle suspension level timestamp quality
typedef enum dwVioSuspensionLevelTimestampQuality {
    /// Not Initialized. still initializing
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_OK = 1,

    /// Synchronization lost.
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_FORCE32   = 0x7fffffff,
} dwVioSuspensionLevelTimestampQuality;

/// Vehicle suspension calibration status
typedef enum dwVioSuspensionLevelCalibrationState {
    /// False
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_FALSE = 0,

    /// True
    DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_TRUE    = 1,
    DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_FORCE32 = 0x7fffffff,
} dwVioSuspensionLevelCalibrationState;

/// Validity of egomotion signals
typedef enum dwVioEmStatus {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_EM_STATUS_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_EM_STATUS_NORMAL_OPERATION = 1,

    /// reduced signal integrity
    DW_VIO_EM_STATUS_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_EM_STATUS_SIG_DEF = 3,
    DW_VIO_EM_STATUS_FORCE32 = 0x7fffffff,
} dwVioEmStatus;

/// Egomotion standstill detected based on wheel ticks
typedef enum dwVioEmStandStillWheelBased {
    /// Vehicle moving
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_EM_STAND_STILL_WHEEL_BASED_FALSE = 0,

    /// Vehicle not moving
    DW_VIO_EM_STAND_STILL_WHEEL_BASED_TRUE = 1,

    /// Schroedingers Vehicle Motion
    DW_VIO_EM_STAND_STILL_WHEEL_BASED_UNKNOWN = 2,
    DW_VIO_EM_STAND_STILL_WHEEL_BASED_FORCE32 = 0x7fffffff,
} dwVioEmStandStillWheelBased;

/// Vehicle tire pressure quality (Order FL,FR,RL,RR)
typedef enum dwVioTirePressureQuality {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TIRE_PRESSURE_QUALITY_NOT_DEFINED = 0,

    /// normal as specified
    DW_VIO_TIRE_PRESSURE_QUALITY_NORMAL_OPERATION = 1,

    /// slow deflation
    DW_VIO_TIRE_PRESSURE_QUALITY_SOFT_WARNING = 2,

    /// low pressure threshold exceeded
    DW_VIO_TIRE_PRESSURE_QUALITY_LOW_PRESSURE = 3,

    /// fast deflation - pressure drop
    DW_VIO_TIRE_PRESSURE_QUALITY_FAST_DEFLATION = 4,
    DW_VIO_TIRE_PRESSURE_QUALITY_FORCE32        = 0x7fffffff,
} dwVioTirePressureQuality;

/// Tire Pressure Monitoring System Status
typedef enum dwVioTirePressureMonitoringState {
    /// TPMS active
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_ACTIVE = 0,

    /// Waiting for pressure values
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_WAIT = 1,

    /// TPM system error
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_ERROR = 2,

    /// no wheel sensors
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_NO_SENSORS = 3,

    /// TPM activation acknowledged
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_RESET_ACK = 4,
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_FORCE32   = 0x7fffffff,
} dwVioTirePressureMonitoringState;

///  -
typedef enum dwVioTrailerConnected {
    ///
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_UNKNOWN = 0,
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_NO      = 1,
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_YES     = 2,
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_ERROR   = 3,
    DW_VIO_TRAILER_CONNECTED_FORCE32                   = 0x7fffffff,
} dwVioTrailerConnected;

/// Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR). Redundant signal.
typedef enum dwVioWheelSpeedQualityRedundant {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_SPEED_QUALITY_REDUNDANT_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_REDUNDANT_NORMAL_OPERATION = 1,

    /// reduced signal integrity, Electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_REDUNDANT_REDUCED_QUALITY = 2,

    /// Signal defect detected
    DW_VIO_WHEEL_SPEED_QUALITY_REDUNDANT_SIG_DEF = 3,
    DW_VIO_WHEEL_SPEED_QUALITY_REDUNDANT_FORCE32 = 0x7fffffff,
} dwVioWheelSpeedQualityRedundant;

/// Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR). Redundant signal.
typedef enum dwVioWheelTicksDirectionRedundant {
    /// Neither forward nor backward (stop)
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_TICKS_DIRECTION_REDUNDANT_VOID = 0,

    /// Direction forward
    DW_VIO_WHEEL_TICKS_DIRECTION_REDUNDANT_FORWARD = 1,

    /// Direction backward
    DW_VIO_WHEEL_TICKS_DIRECTION_REDUNDANT_BACKWARD = 2,
    DW_VIO_WHEEL_TICKS_DIRECTION_REDUNDANT_FORCE32  = 0x7fffffff,
} dwVioWheelTicksDirectionRedundant;

/// Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR). Redundant signal.
typedef enum dwVioWheelTicksTimestampQualityRedundant {
    /// Not Initialized. still initializing
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_REDUNDANT_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_REDUNDANT_OK = 1,

    /// Synchronization lost.
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_REDUNDANT_SYNC_LOST = 2,
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_REDUNDANT_FORCE32   = 0x7fffffff,
} dwVioWheelTicksTimestampQualityRedundant;

/// Current front axle angle status. Second signal source available in HIGH only.
typedef enum dwVioFrontSteeringAngleControlQualityHigh {
    /// undefined
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_FRONT_STEERING_ANGLE_CONTROL_QUALITY_HIGH_NOT_DEFINED = 0,

    /// Functional and electrical checks passed
    DW_VIO_FRONT_STEERING_ANGLE_CONTROL_QUALITY_HIGH_NORMAL_OPERATION = 1,

    /// Upper Limit temporarily exceeded
    DW_VIO_FRONT_STEERING_ANGLE_CONTROL_QUALITY_HIGH_TMP_HIGH = 2,

    /// Lower Limit temporarily exceeded
    DW_VIO_FRONT_STEERING_ANGLE_CONTROL_QUALITY_HIGH_TMP_LOW = 3,

    /// Upper Limit and Error Integral exceeded
    DW_VIO_FRONT_STEERING_ANGLE_CONTROL_QUALITY_HIGH_PERM_HIGH = 4,

    /// Lower Limit and Error Integral exceeded
    DW_VIO_FRONT_STEERING_ANGLE_CONTROL_QUALITY_HIGH_PERM_LOW = 5,
    DW_VIO_FRONT_STEERING_ANGLE_CONTROL_QUALITY_HIGH_FORCE32  = 0x7fffffff,
} dwVioFrontSteeringAngleControlQualityHigh;

/// Driver Intervention Detection. Available in HIGH only.
typedef enum dwVioDriverInterventionDetectionHigh {
    /// no detection
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_NO_DETECTION = 0,

    /// Driver not in the loop
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_NOT_IN_LOOP = 1,

    /// Driver in the loop Step1 ABC
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_1_ABC = 2,

    /// Driver in the loop Step1 EH
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_1_EH = 3,

    /// Driver in the loop Step2
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_2 = 4,
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_FORCE32            = 0x7fffffff,
} dwVioDriverInterventionDetectionHigh;

/// Failure indicator for components related to High steering. Available in HIGH only.
typedef enum dwVioSteeringSystemStatusHigh {
    /// Not available
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_NOT_AVBL = 0,

    /// Degraded available
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_DEG_AVBL = 1,

    /// Available
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_AVBL = 2,
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_FORCE32      = 0x7fffffff,
} dwVioSteeringSystemStatusHigh;

/// Failure reason for components related to High steering. Available in HIGH only.
typedef enum dwVioSteeringSystemFailureReasonHigh {
    /// EPS fully available no reason
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_NO_REASON = 0,

    /// EPS temporarily degraded
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_Temp = 1,

    /// EPS temporarily degraded
    // buf:lint:ignore ENUM_VALUE_UPPER_SNAKE_CASE
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_Temp = 2,

    /// EPS permanently degraded
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_PERM = 3,

    /// EPS permanently degraded
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_PERM = 4,

    /// EPS degraded due to IPC failure
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_IPC = 5,

    /// EPS degraded due to IPC failure
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_IPC = 6,

    /// EPS not available due to EPS1 and EPS2 failure
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS_NA  = 28,
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_FORCE32 = 0x7fffffff,
} dwVioSteeringSystemFailureReasonHigh;

/// High Steering System Off Status. Available in HIGH only.
typedef enum dwVioSteeringSystemOffStatusHigh {
    /// not off
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_NOT_OFF = 0,

    /// HLC-Off-State in EPS because of ADSE-activation
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_ADSE = 1,

    /// HLC-Off-State in EPS because of driver activation
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_DRVINT = 2,

    /// HLC-Off-State in EPS because of Hand-over-time expired
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_NO_TERM_IDC = 3,

    /// HLC-Off-State in EPS because of EPS activation
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_EPSFKT = 4,

    /// HLC-Off-State in EPS because of high vehicle speed
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_VEHSPDLIM = 5,

    /// HLC-Off-State in EPS because of der driving state not in D
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_PT_DRVPOS = 6,

    /// HLC-Off-State in EPS because of driving backwards
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_VEHDRVDIR = 7,

    /// HLC-Off-State in EPS because of limited steering angle
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_FWA_POS_LIM = 8,

    /// HLC-Off-State in EPS because of limited steering angle speed
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_FWA_SPD_LIM = 9,

    /// HLC-Off-State in EPS because of other reasons
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_OTHER = 10,
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_FORCE32       = 0x7fffffff,
} dwVioSteeringSystemOffStatusHigh;

/// High Steering System Interface Status. Available in HIGH only.
typedef enum dwVioSteeringSystemInterfaceStatusHigh {
    /// Init
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_INIT = 0,

    /// Off
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_OFF = 1,

    /// Ready
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_READY = 2,

    /// Ramp to HAF
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2H = 3,

    /// ABC Steer
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_ABC_STEER = 4,

    /// EH Steer
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_EH_STEER = 5,

    /// Ramp to Ready
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2R = 6,

    /// Ramp to Off
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2O = 7,

    /// Ramp to Error
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2E = 8,

    /// Error
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_ERROR = 9,
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_FORCE32       = 0x7fffffff,
} dwVioSteeringSystemInterfaceStatusHigh;

/// Front wheel angle limitation status. Available in HIGH only.
typedef enum dwVioFrontSteeringAngleLimitationStatusHigh {
    /// No Limit
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_NO_LIM = 0,

    /// Position Limit
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_POS_LIM = 1,

    /// Speed Limit
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_SPD_LIM = 2,

    /// Position und Speed Limit
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_POS_SPD_LIM = 3,
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_FORCE32          = 0x7fffffff,
} dwVioFrontSteeringAngleLimitationStatusHigh;

/// Horn shall be requested by ADH(L3), if warning of OTPs is necessary. (1 FALSE; 2 TRUE)
typedef enum dwVioHornOnRequest {
    /// Horn State Unknown
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_HORN_ON_REQUEST_UNKNOWN = 0,

    /// Horn Off
    DW_VIO_HORN_ON_REQUEST_FALSE = 1,

    /// Horn On
    DW_VIO_HORN_ON_REQUEST_TRUE    = 2,
    DW_VIO_HORN_ON_REQUEST_FORCE32 = 0x7fffffff,
} dwVioHornOnRequest;

/// Provides information if the attached trailer is a particular type.
typedef enum dwVioAttachedTrailerType {
    /// Unknown connection or none connected.
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    DW_VIO_ATTACHED_TRAILER_TYPE_UNKNOWN = 0,

    /// Error identifying connection type.
    DW_VIO_ATTACHED_TRAILER_TYPE_ERROR = 1,

    /// Bicycle rack connected.
    DW_VIO_ATTACHED_TRAILER_TYPE_BICYCLE_RACK = 2,

    /// Regular trailer connected.
    DW_VIO_ATTACHED_TRAILER_TYPE_TRAILER = 3,
    DW_VIO_ATTACHED_TRAILER_TYPE_FORCE32 = 0x7fffffff,
} dwVioAttachedTrailerType;

/// @brief Validity Info for signals in dwVehicleIOSafetyCommand
///
/// Contains a validity info value for each signal in dwVehicleIOSafetyCommand
/// with the same name as the signal in the base structure.
typedef struct dwVehicleIOSafetyCommandValidityInfo
{
    /// ValidityInfo for size
    dwSignalValidity size;

    /// ValidityInfo for latCtrlCrossTrackError
    dwSignalValidity latCtrlCrossTrackError;

    /// ValidityInfo for latCtrlBpReadyForClosedLoop
    dwSignalValidity latCtrlBpReadyForClosedLoop;

    /// ValidityInfo for longCtrlBrakePrefillRequest
    dwSignalValidity longCtrlBrakePrefillRequest;

    /// ValidityInfo for longCtrlHapticWarningRequest
    dwSignalValidity longCtrlHapticWarningRequest;

    /// ValidityInfo for longCtrlHapticWarningTargetType
    dwSignalValidity longCtrlHapticWarningTargetType;

    /// ValidityInfo for latCtrlCurvRequest
    dwSignalValidity latCtrlCurvRequest;

    /// ValidityInfo for latCtrlReferenceInputSelect
    dwSignalValidity latCtrlReferenceInputSelect;

    /// ValidityInfo for latCtrlASILStatus
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity latCtrlASILStatus;

    /// ValidityInfo for latCtrlFrontWheelAngleRequest
    dwSignalValidity latCtrlFrontWheelAngleRequest;

    /// ValidityInfo for latCtrlSteeringWheelAngleRequest
    dwSignalValidity latCtrlSteeringWheelAngleRequest;

    /// ValidityInfo for latCtrlSteeringWheelAngleRateMax
    dwSignalValidity latCtrlSteeringWheelAngleRateMax;

    /// ValidityInfo for latCtrlInterventionDirectionLKA
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity latCtrlInterventionDirectionLKA;

    /// ValidityInfo for latCtrlInterventionDirectionELK
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity latCtrlInterventionDirectionELK;

    /// ValidityInfo for latCtrlLaneChangePushingLaterally
    dwSignalValidity latCtrlLaneChangePushingLaterally;

    /// ValidityInfo for latCtrlRearWheelAngleRequest
    dwSignalValidity latCtrlRearWheelAngleRequest;

    /// ValidityInfo for longCtrlDrivePositionCommand
    dwSignalValidity longCtrlDrivePositionCommand;

    /// ValidityInfo for longCtrlRemainingDistance
    dwSignalValidity longCtrlRemainingDistance;

    /// ValidityInfo for longCtrlRedundCheckRequest
    dwSignalValidity longCtrlRedundCheckRequest;

    /// ValidityInfo for longCtrlReferenceInputRequest
    dwSignalValidity longCtrlReferenceInputRequest;

    /// ValidityInfo for longCtrlAccelRequest
    dwSignalValidity longCtrlAccelRequest;

    /// ValidityInfo for longCtrlThrottlePedalRequest
    dwSignalValidity longCtrlThrottlePedalRequest;

    /// ValidityInfo for longCtrlBrakePedalRequest
    dwSignalValidity longCtrlBrakePedalRequest;

    /// ValidityInfo for longCtrlMaxSpeedRequest
    dwSignalValidity longCtrlMaxSpeedRequest;

    /// ValidityInfo for latCtrlCurvReqPred
    dwSignalValidity latCtrlCurvReqPred;

    /// ValidityInfo for latCtrlCurvReqAdditional
    dwSignalValidity latCtrlCurvReqAdditional;

    /// ValidityInfo for latCtrlCurvReqAdditionalActive
    dwSignalValidity latCtrlCurvReqAdditionalActive;

    /// ValidityInfo for latCtrlCurvReqAdditionalPrefill
    dwSignalValidity latCtrlCurvReqAdditionalPrefill;

    /// ValidityInfo for latCtrlActivationRequest
    dwSignalValidity latCtrlActivationRequest;

    /// ValidityInfo for longCtrlActivationRequest
    dwSignalValidity longCtrlActivationRequest;

    /// ValidityInfo for longCtrlInteractionModeRequest
    dwSignalValidity longCtrlInteractionModeRequest;

    /// ValidityInfo for longCtrlSecureRequest
    dwSignalValidity longCtrlSecureRequest;

    /// ValidityInfo for longCtrlAccelPerfRequest
    dwSignalValidity longCtrlAccelPerfRequest;

    /// ValidityInfo for latCtrlModeRequest
    dwSignalValidity latCtrlModeRequest;

    /// ValidityInfo for latCtrlHapticWarningRequest
    dwSignalValidity latCtrlHapticWarningRequest;

    /// ValidityInfo for lonCtrlSafetyLimRequest
    dwSignalValidity lonCtrlSafetyLimRequest;

    /// ValidityInfo for timestamp_us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity timestamp_us;

    /// ValidityInfo for emLinearVelocity
    dwSignalValidity emLinearVelocity[3];

    /// ValidityInfo for emLinearVelocityStdev
    dwSignalValidity emLinearVelocityStdev[3];

    /// ValidityInfo for emLinearAccel
    dwSignalValidity emLinearAccel[3];

    /// ValidityInfo for emAngularVelocity
    dwSignalValidity emAngularVelocity[3];

    /// ValidityInfo for emAngularAccel
    dwSignalValidity emAngularAccel[3];

    /// ValidityInfo for emOrientation
    dwSignalValidity emOrientation[3];

    /// ValidityInfo for emOrientationStdev
    dwSignalValidity emOrientationStdev[3];

    /// ValidityInfo for emTranslation
    dwSignalValidity emTranslation[3];

    /// ValidityInfo for emTimestamp
    dwSignalValidity emTimestamp;

    /// ValidityInfo for emStatus
    dwSignalValidity emStatus;

    /// ValidityInfo for emSensorPosition
    dwSignalValidity emSensorPosition[3];

    /// ValidityInfo for emStandStillWheelBased
    dwSignalValidity emStandStillWheelBased;

    /// ValidityInfo for turnSignalRequest
    dwSignalValidity turnSignalRequest;

    /// ValidityInfo for turnSignalRequestType
    dwSignalValidity turnSignalRequestType;

    /// ValidityInfo for latCtrlESCtrlStateRequest
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity latCtrlESCtrlStateRequest;

    /// ValidityInfo for longCtrlFunctionReq
    dwSignalValidity longCtrlFunctionReq;

    /// ValidityInfo for latCtrlC0SteeringGradientGainLt
    dwSignalValidity latCtrlC0SteeringGradientGainLt;

    /// ValidityInfo for latCtrlC0SteeringGradientGainRt
    dwSignalValidity latCtrlC0SteeringGradientGainRt;

    /// reserved
    dwSignalValidity reserved[60];
} dwVehicleIOSafetyCommandValidityInfo;

/// Safety critical RoV commands.
/// Expected to be sent from NDAS to Actuation Module.
typedef struct dwVehicleIOSafetyCommand
{
    /// validity info of VehicleIOSafetyCommand fields
    dwVehicleIOSafetyCommandValidityInfo validityInfo;

    /// @note ID VS-10000
    /// @note description User need to set size = sizeof(itself).
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit nan
    uint32_t size;

    /// @note ID VS-10071
    /// @note description Used for debugging controller integration..
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m
    float32_t latCtrlCrossTrackError;

    /// @note ID VS-10075
    /// @note description BP is ready in context of cooperative steering.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlBpReadyForClosedLoop;

    /// @note ID VS-11110
    /// @note description brake pressure prefill charge request.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t longCtrlBrakePrefillRequest;

    /// @note ID VS-11111
    /// @note description e.g. reversible pre-tension of seat belt or brake jolt.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    /// @deprecated longCtrlHapticWarningRequest is no longer supported and exists only for binary layout compatibility. REL_23_02
    DW_DEPRECATED("longCtrlHapticWarningRequest is no longer supported and exists only for binary layout compatibility. REL_23_02")
    uint8_t longCtrlHapticWarningRequest;

    /// @note ID VS-11112
    /// @note description multi stage signal used when the haptic warning is a seat belt pre-tensioner.
    /// @note freq 100    unit unitless
    /// @deprecated longCtrlHapticWarningTargetType is no longer supported and exists only for binary layout compatibility. REL_23_02
    DW_DEPRECATED("longCtrlHapticWarningTargetType is no longer supported and exists only for binary layout compatibility. REL_23_02")
    dwVioLongCtrlHapticWarningTargetType longCtrlHapticWarningTargetType;

    /// @note ID VS-11130
    /// @note description Effective curvature request (in code rearAxleCurvatureValue). RearAxle is the reference point.
    /// @note min -1.0737    max 1.0737
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvRequest;

    /// @note ID VS-11131
    /// @note description Select what lateral control interface is active (curvature for L2 and above, front wheel angle or front and rear wheel angle for Parking)..
    /// @note freq 100    unit unitless
    dwVioLatCtrlReferenceInputSelect latCtrlReferenceInputSelect;

    /// @note ID VS-11136
    /// @note description ASIL Status of control input.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioLatCtrlASILStatus latCtrlASILStatus;

    /// @note ID VS-11140
    /// @note description Effective front steering angle request, used for parking control.
    /// @note min -1.4297    max 1.4297
    /// @note freq 100    unit rad
    float32_t latCtrlFrontWheelAngleRequest;

    /// @note ID VS-11145
    /// @note description Steering Wheel Angle Request.
    /// @note freq 100    unit rad
    float32_t latCtrlSteeringWheelAngleRequest;

    /// @note ID VS-11146
    /// @note description Rate Limit for Steering Wheel Angle Request.
    /// @note freq 100    unit rad
    float32_t latCtrlSteeringWheelAngleRateMax;

    /// @note ID VS-11150
    /// @note description direction of the steering intervention, opposite to side of departure.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioLatCtrlInterventionDirectionLKA latCtrlInterventionDirectionLKA;

    /// @note ID VS-11151
    /// @note description direction of the steering intervention, opposite to side of departure.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioLatCtrlInterventionDirectionELK latCtrlInterventionDirectionELK;

    /// @note ID VS-11152
    /// @note description This bit is set if lateral movement has started.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlLaneChangePushingLaterally;

    /// @note ID VS-11170
    /// @note description Effective rear steering angle request, for low speed maneuvering.
    /// @note min -0.3573    max 0.3573
    /// @note freq 100    unit rad
    float32_t latCtrlRearWheelAngleRequest;

    /// @note ID VS-11200
    /// @note description Requested vehicle gear.
    /// @note freq 10    unit unitless
    dwVioLongCtrlDrivePositionCommand longCtrlDrivePositionCommand;

    /// @note ID VS-11220
    /// @note description Remaining distance the vehicle can travel before stopping. Applicable forward and in reverse directions. Combined with max speed request..
    /// @note min -0.15    max 10.08
    /// @note freq 100    unit m
    float32_t longCtrlRemainingDistance;

    /// @note ID VS-11221
    /// @note description signal for remote parking to check for redundancy.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    /// @deprecated longCtrlRedundCheckRequest is no longer supported and exists only for binary layout compatibility. REL_23_06 longCtrlRedundCheckRequest is not necessary.
    DW_DEPRECATED("longCtrlRedundCheckRequest is no longer supported and exists only for binary layout compatibility. REL_23_06 longCtrlRedundCheckRequest is not necessary.")
    uint8_t longCtrlRedundCheckRequest;

    /// @note ID VS-11224
    /// @note description Signalizes which reference input (acceleration, remaining distance, velocity) should be used.
    /// @note freq 100    unit unitless
    dwVioLongCtrlReferenceInputRequest longCtrlReferenceInputRequest;

    /// @note ID VS-11230
    /// @note description Time derivative of longitudinal velocity request.
    /// @note min -40    max 25
    /// @note freq 100    unit m/s²
    float32_t longCtrlAccelRequest;

    /// @note ID VS-11245
    /// @note description legacy control signal.
    /// @note min 0    max 1
    /// @note freq 100    unit unitless
    float32_t longCtrlThrottlePedalRequest;

    /// @note ID VS-11246
    /// @note description legacy control signal.
    /// @note min 0    max 1
    /// @note freq 100    unit unitless
    float32_t longCtrlBrakePedalRequest;

    /// @note ID VS-11260
    /// @note description Maximum speed the vehice can travel in while using distance2stop request. .
    /// @note min 0    max 5
    /// @note freq 100    unit m/s
    float32_t longCtrlMaxSpeedRequest;

    /// @note ID VS-11320
    /// @note description The target curvature without feedback compensation. Can be used to represent the target curvature also at some brief period in the future..
    /// @note min -1.0737    max 1.0737
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvReqPred;

    /// @note ID VS-11325
    /// @note description Effective secondary curvature request. Curvature for the secondary means of actuation (e.g. differential braking).
    /// @note min -1.0737    max 1.0737
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvReqAdditional;

    /// @note ID VS-11326
    /// @note description This signal describes whether a secondary curvature request is requested.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlCurvReqAdditionalActive;

    /// @note ID VS-11327
    /// @note description If the secondary control is a braking interface, this requests to pre-fill the braking system for shorter response.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlCurvReqAdditionalPrefill;

    /// @note ID VS-17000
    /// @note description Activation request of lateral control.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlActivationRequest;

    /// @note ID VS-17002
    /// @note description Activation request of longitudinal control.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t longCtrlActivationRequest;

    /// @note ID VS-17003
    /// @note description Signalizes requested behaviour for driver interaction.
    /// @note freq 100    unit unitless
    dwVioLongCtrlInteractionModeRequest longCtrlInteractionModeRequest;

    /// @note ID VS-17004
    /// @note description Signalizes request for StillStand Coordination. Vehicle will be secured with parking brake and P-lock.
    /// @note freq 100    unit unitless
    dwVioLongCtrlSecureRequest longCtrlSecureRequest;

    /// @note ID VS-17011
    /// @note description Request for precision or "slack" allowed for control to choose optimal strategy vs. high accuracy.
    /// @note freq 100    unit unitless
    dwVioLongCtrlAccelPerfRequest longCtrlAccelPerfRequest;

    /// @note ID VS-17110
    /// @note description requested mode for the lateral control interface.
    /// @note freq 100    unit unitless
    dwVioLatCtrlModeRequest latCtrlModeRequest;

    /// @note ID VS-17111
    /// @note description triggers a haptic warning, e.g. in the steering wheel or seat.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlHapticWarningRequest;

    /// @note ID VS-17120
    /// @note description Longitudinal Mode Request for functions that have medium safety requirements on activation Request for Longitudinal interface to go into one of the following modes: manual/human driving, active safety, L1/L2, parking.
    /// @note freq 100    unit unitless
    dwVioLonCtrlSafetyLimRequest lonCtrlSafetyLimRequest;

    /// @note ID VS-17510
    /// @note description SafetyCommand Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t timestamp_us;

    /// @note ID VS-31010
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t emLinearVelocity[3];

    /// @note ID VS-31011
    /// @note description Vehicle linear velocity standard deviation aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t emLinearVelocityStdev[3];

    /// @note ID VS-31020
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s²
    float32_t emLinearAccel[3];

    /// @note ID VS-31030
    /// @note description Vehicle angular velocity aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad/s
    float32_t emAngularVelocity[3];

    /// @note ID VS-31040
    /// @note description Vehicle angular acceleration aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad/s
    float32_t emAngularAccel[3];

    /// @note ID VS-31110
    /// @note description Vehicle orientation (integrated, as Euler angles, since t0). Differently from VS-90020 (which is a signal that can be provided by certain types of IMUs as part of their internal state estimation, and is not used by egomotion), this is an output signal from egomotion estimator. Egomotion outputs the orientation of the vehicle, as NDAS “rig” coordinate frame, relative to a local horizontal, local vertical coordinate frame.  Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases    A Kalman filter and integrator combine information from wheel odometry (incl. steering), suspension and IMU into a 6 degrees of freedom motion estimation, also known as dead reckoning. The orientation representation in VS-31110 uses the DriveWorks Euler angle convention, described as:    - One rotation is applied about each of the axes (use of a Tait-Bryan convention)  - The order of the rotations is either of (both are equivalent):  -- z-y’-x’’: (1) yaw about original fixed z axis, (2) pitch about interim rotated y axis, (3) roll about interim rotated x axis  -- x-y-z: (1) roll about fixed x axis, (2) pitch about fixed y axis, (3) yaw about fixed z axis  All coordinate frames are right-handed.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t emOrientation[3];

    /// @note ID VS-31111
    /// @note description Vehicle orientation standard deviation (for each Euler angle) (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t emOrientationStdev[3];

    /// @note ID VS-31120
    /// @note description Vehicle translation (integrated, since t0). The translation representation in VS-31120 is the position of the vehicle in the local horizontal, local vertical coordinate frame defined at t=0. As egomotion is a dead reckoning solution, the position values should only be used and compared in a local sense; the motion of the vehicle between two points nearby in time (order: a couple seconds, tens of seconds, depending on the application and accuracy requirements). Egomotion will drift and interpreting the position signal as an absolute signal in a fixed coordinate frame will lead to incorrect use. Egomotion is not localization. Localization will provide an absolute position in a global coordinate system (e.g. WGS-84). Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m
    float64_t emTranslation[3];

    /// @note ID VS-31130
    /// @note description Timestamp of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    dwTime_t emTimestamp;

    /// @note ID VS-31140
    /// @note description Validity of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioEmStatus emStatus;

    /// @note ID VS-31141
    /// @note description Egomotion Position of "virtual" sensor.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m
    float32_t emSensorPosition[3];

    /// @note ID VS-31142
    /// @note description Egomotion standstill detected based on wheel ticks.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioEmStandStillWheelBased emStandStillWheelBased;

    /// @note ID VS-11310
    /// @note description request of turn indicators.
    /// @note freq 100    unit unitless
    dwVioTurnSignalRequest turnSignalRequest;

    /// @note ID VS-11311
    /// @note description Lane Change Type (SILC or DILC). if it is NONE then thats a system error. .
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioTurnSignalRequestType turnSignalRequestType;

    /// @note ID VS-11120
    /// @note description Emergency Steering(ESS, AES) interface prepare request.
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioLatCtrlESCtrlStateRequest latCtrlESCtrlStateRequest;

    /// @note ID VS-17180
    /// @note description Unified Longitudinal Mode Request.
    /// @note freq 100    unit unitless
    dwVioLongCtrlFunctionReq longCtrlFunctionReq;

    /// @note ID VS-11164
    /// @note description FuSa left steering gradient limitation (related to C0). Used to limit the steering capability based on the scenario. Default value: 1..
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 1
    /// @note freq 100    unit unitless
    float32_t latCtrlC0SteeringGradientGainLt;

    /// @note ID VS-11165
    /// @note description FuSa right steering gradient limitation (related to C0). Used to limit the steering capability based on the scenario. Default value: 1..
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 1
    /// @note freq 100    unit unitless
    float32_t latCtrlC0SteeringGradientGainRt;
} dwVehicleIOSafetyCommand;

/// @brief Validity Info for signals in dwVehicleIOActuationFeedback
///
/// Contains a validity info value for each signal in dwVehicleIOActuationFeedback
/// with the same name as the signal in the base structure.
typedef struct dwVehicleIOActuationFeedbackValidityInfo
{
    /// ValidityInfo for size
    dwSignalValidity size;

    /// ValidityInfo for latCtrlCurvatureActual
    dwSignalValidity latCtrlCurvatureActual;

    /// ValidityInfo for rearWheelAngle
    dwSignalValidity rearWheelAngle;

    /// ValidityInfo for rearWheelAngleFactor
    dwSignalValidity rearWheelAngleFactor;

    /// ValidityInfo for steeringWheelTorque
    dwSignalValidity steeringWheelTorque;

    /// ValidityInfo for steeringWheelAngle
    dwSignalValidity steeringWheelAngle;

    /// ValidityInfo for steeringWheelAngleQuality
    dwSignalValidity steeringWheelAngleQuality;

    /// ValidityInfo for holdStatus
    dwSignalValidity holdStatus;

    /// ValidityInfo for throttleValue
    dwSignalValidity throttleValue;

    /// ValidityInfo for driverBrakePedal
    dwSignalValidity driverBrakePedal;

    /// ValidityInfo for gearStatus
    dwSignalValidity gearStatus;

    /// ValidityInfo for gearTarget
    dwSignalValidity gearTarget;

    /// ValidityInfo for drivePositionStatus
    dwSignalValidity drivePositionStatus;

    /// ValidityInfo for drivePositionTarget
    dwSignalValidity drivePositionTarget;

    /// ValidityInfo for driverOverrideThrottle
    dwSignalValidity driverOverrideThrottle;

    /// ValidityInfo for latCtrlCurvCapMin
    dwSignalValidity latCtrlCurvCapMin[10];

    /// ValidityInfo for latCtrlCurvCapMax
    dwSignalValidity latCtrlCurvCapMax[10];

    /// ValidityInfo for latCtrlEPSLimitStatus
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity latCtrlEPSLimitStatus;

    /// ValidityInfo for latCtrlLoopStatus
    dwSignalValidity latCtrlLoopStatus;

    /// ValidityInfo for longCtrlRedundCheckStatus
    dwSignalValidity longCtrlRedundCheckStatus;

    /// ValidityInfo for longCtrlEstimatedStopDistance
    dwSignalValidity longCtrlEstimatedStopDistance;

    /// ValidityInfo for longCtrlFrictionRangeEstimation
    dwSignalValidity longCtrlFrictionRangeEstimation;

    /// ValidityInfo for latCtrlCurvReqAdditionalStatus
    dwSignalValidity latCtrlCurvReqAdditionalStatus;

    /// ValidityInfo for longCtrlStatus
    dwSignalValidity longCtrlStatus;

    /// ValidityInfo for longCtrlFaultStatus
    dwSignalValidity longCtrlFaultStatus;

    /// ValidityInfo for longCtrlBrakeTorqueAvailable
    dwSignalValidity longCtrlBrakeTorqueAvailable;

    /// ValidityInfo for longCtrlAccelAvailable
    dwSignalValidity longCtrlAccelAvailable;

    /// ValidityInfo for longCtrlActiveSystem
    dwSignalValidity longCtrlActiveSystem;

    /// ValidityInfo for brakePedalStatus
    dwSignalValidity brakePedalStatus;

    /// ValidityInfo for longCtrlEcoAssistStatus
    dwSignalValidity longCtrlEcoAssistStatus;

    /// ValidityInfo for longCtrlComAvailable
    dwSignalValidity longCtrlComAvailable;

    /// ValidityInfo for latCtrlStatus
    dwSignalValidity latCtrlStatus;

    /// ValidityInfo for latCtrlModeStatus
    dwSignalValidity latCtrlModeStatus;

    /// ValidityInfo for latCtrlModeAvail
    dwSignalValidity latCtrlModeAvail;

    /// ValidityInfo for latCtrlDriverInterventionStatus
    dwSignalValidity latCtrlDriverInterventionStatus;

    /// ValidityInfo for handsoffDetectedFiltered
    dwSignalValidity handsoffDetectedFiltered;

    /// ValidityInfo for latCtrlErrorStatus
    dwSignalValidity latCtrlErrorStatus;

    /// ValidityInfo for latCtrlMaxFrontWheelAngleRequestAllowed
    dwSignalValidity latCtrlMaxFrontWheelAngleRequestAllowed;

    /// ValidityInfo for latCtrlMinFrontWheelAngleRequestAllowed
    dwSignalValidity latCtrlMinFrontWheelAngleRequestAllowed;

    /// ValidityInfo for latCtrlMaxRearWheelAngleRequestAllowed
    dwSignalValidity latCtrlMaxRearWheelAngleRequestAllowed;

    /// ValidityInfo for timestamp_us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity timestamp_us;

    /// ValidityInfo for trailerHitchStatus
    dwSignalValidity trailerHitchStatus;

    /// ValidityInfo for speedESC
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedESC;

    /// ValidityInfo for speedDirectionESC
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedDirectionESC;

    /// ValidityInfo for speedQualityESC
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedQualityESC;

    /// ValidityInfo for speedMin
    dwSignalValidity speedMin;

    /// ValidityInfo for speedMax
    dwSignalValidity speedMax;

    /// ValidityInfo for speedESCTimestamp
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedESCTimestamp;

    /// ValidityInfo for vehicleStopped
    dwSignalValidity vehicleStopped;

    /// ValidityInfo for wheelSpeed
    dwSignalValidity wheelSpeed[4];

    /// ValidityInfo for wheelSpeedQuality
    dwSignalValidity wheelSpeedQuality[4];

    /// ValidityInfo for wheelTicks
    dwSignalValidity wheelTicks[4];

    /// ValidityInfo for wheelTicksQuality
    dwSignalValidity wheelTicksQuality[4];

    /// ValidityInfo for wheelTicksDirection
    dwSignalValidity wheelTicksDirection[4];

    /// ValidityInfo for wheelTicksTimestamp
    dwSignalValidity wheelTicksTimestamp[4];

    /// ValidityInfo for wheelTicksTimestampQuality
    dwSignalValidity wheelTicksTimestampQuality[4];

    /// ValidityInfo for wheelTorque
    dwSignalValidity wheelTorque[4];

    /// ValidityInfo for wheelTorqueQuality
    dwSignalValidity wheelTorqueQuality[4];

    /// ValidityInfo for brakeTorqueWheels
    dwSignalValidity brakeTorqueWheels[4];

    /// ValidityInfo for brakeTorqueWheelsQuality
    dwSignalValidity brakeTorqueWheelsQuality[4];

    /// ValidityInfo for brakeTorque
    dwSignalValidity brakeTorque;

    /// ValidityInfo for brakeStatus
    dwSignalValidity brakeStatus;

    /// ValidityInfo for brakeAllWheelsABS
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity brakeAllWheelsABS;

    /// ValidityInfo for wheelTorqueTimestamps
    dwSignalValidity wheelTorqueTimestamps[4];

    /// ValidityInfo for wheelTorqueTimestampsQuality
    dwSignalValidity wheelTorqueTimestampsQuality[4];

    /// ValidityInfo for frontSteeringAngle
    dwSignalValidity frontSteeringAngle;

    /// ValidityInfo for frontSteeringAngleQuality
    dwSignalValidity frontSteeringAngleQuality;

    /// ValidityInfo for frontSteeringAngleOffset
    dwSignalValidity frontSteeringAngleOffset;

    /// ValidityInfo for frontSteeringAngleOffsetQuality
    dwSignalValidity frontSteeringAngleOffsetQuality;

    /// ValidityInfo for frontSteeringTimestamp
    dwSignalValidity frontSteeringTimestamp;

    /// ValidityInfo for frontSteeringTimestampQuality
    dwSignalValidity frontSteeringTimestampQuality;

    /// ValidityInfo for rearWheelAngleQuality
    dwSignalValidity rearWheelAngleQuality;

    /// ValidityInfo for rearWheelAngleOffset
    dwSignalValidity rearWheelAngleOffset;

    /// ValidityInfo for rearWheelAngleOffsetQuality
    dwSignalValidity rearWheelAngleOffsetQuality;

    /// ValidityInfo for rearWheelAngleTimestamp
    dwSignalValidity rearWheelAngleTimestamp;

    /// ValidityInfo for rearWheelAngleTimestampQuality
    dwSignalValidity rearWheelAngleTimestampQuality;

    /// ValidityInfo for rearWheelAngleMaximum
    dwSignalValidity rearWheelAngleMaximum;

    /// ValidityInfo for absIntervention
    dwSignalValidity absIntervention;

    /// ValidityInfo for wheelSpeedRedundant
    dwSignalValidity wheelSpeedRedundant[4];

    /// ValidityInfo for wheelSpeedQualityRedundant
    dwSignalValidity wheelSpeedQualityRedundant[4];

    /// ValidityInfo for wheelTicksRedundant
    dwSignalValidity wheelTicksRedundant[4];

    /// ValidityInfo for wheelTicksDirectionRedundant
    dwSignalValidity wheelTicksDirectionRedundant[4];

    /// ValidityInfo for wheelTicksTimestampRedundant
    dwSignalValidity wheelTicksTimestampRedundant[4];

    /// ValidityInfo for wheelTicksTimestampQualityRedundant
    dwSignalValidity wheelTicksTimestampQualityRedundant[4];

    /// ValidityInfo for frontSteeringAngleHigh
    dwSignalValidity frontSteeringAngleHigh;

    /// ValidityInfo for frontSteeringAngleControlQualityHigh
    dwSignalValidity frontSteeringAngleControlQualityHigh;

    /// ValidityInfo for steeringWheelTorqueHigh
    dwSignalValidity steeringWheelTorqueHigh;

    /// ValidityInfo for frontSteeringTimestampHigh
    dwSignalValidity frontSteeringTimestampHigh;

    /// ValidityInfo for driverInterventionDetectionHigh
    dwSignalValidity driverInterventionDetectionHigh;

    /// ValidityInfo for steeringSystemStatusHigh
    dwSignalValidity steeringSystemStatusHigh;

    /// ValidityInfo for steeringSystemFailureReasonHigh
    dwSignalValidity steeringSystemFailureReasonHigh;

    /// ValidityInfo for steeringSystemOffStatusHigh
    dwSignalValidity steeringSystemOffStatusHigh;

    /// ValidityInfo for steeringSystemInterfaceStatusHigh
    dwSignalValidity steeringSystemInterfaceStatusHigh;

    /// ValidityInfo for frontSteeringAngleLimitationStatusHigh
    dwSignalValidity frontSteeringAngleLimitationStatusHigh;

    /// ValidityInfo for latCtrlMaxFrontWheelAngleRequestAllowedHigh
    dwSignalValidity latCtrlMaxFrontWheelAngleRequestAllowedHigh;

    /// ValidityInfo for latCtrlMaxFrontWheelAngleSpeedRequestAllowedHigh
    dwSignalValidity latCtrlMaxFrontWheelAngleSpeedRequestAllowedHigh;

    /// ValidityInfo for latCtrlFrontWheelAngleRequestLimitedHigh
    dwSignalValidity latCtrlFrontWheelAngleRequestLimitedHigh;

    /// ValidityInfo for latCtrlFailedDegradedSteeringTimeToTakeoverHigh
    dwSignalValidity latCtrlFailedDegradedSteeringTimeToTakeoverHigh;

    /// ValidityInfo for latCtrlRackForceHigh
    dwSignalValidity latCtrlRackForceHigh;

    /// ValidityInfo for latCtrlRackForceEffectiveHigh
    dwSignalValidity latCtrlRackForceEffectiveHigh;

    /// ValidityInfo for longCtrlActiveFunction
    dwSignalValidity longCtrlActiveFunction;

    /// ValidityInfo for latCtrlCurvRateCap
    dwSignalValidity latCtrlCurvRateCap[10];

    /// reserved
    dwSignalValidity reserved[53];
} dwVehicleIOActuationFeedbackValidityInfo;

/// Feedback from actuation.
/// Expected to be sent from FSI actuation code back to NDAS.
typedef struct dwVehicleIOActuationFeedback
{
    /// validity info of VehicleIOActuationFeedback fields
    dwVehicleIOActuationFeedbackValidityInfo validityInfo;

    /// @note ID VS-10000
    /// @note description User need to set size = sizeof(itself).
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit nan
    uint32_t size;

    /// @note ID VS-10040
    /// @note description Vector form of effective curvature request (uniform time-spaced).
    /// @note min -0.16384    max 0.16384
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvatureActual;

    /// @note ID VS-10080
    /// @note description Effective rear steering angle (wheel to driving axis), positive to left.
    /// @note min -0.3573    max 0.3573
    /// @note freq 100    unit rad
    float32_t rearWheelAngle;

    /// @note ID VS-10082
    /// @note description Effective rear steering angle ratio ().
    /// @note freq 100    unit unitless
    float32_t rearWheelAngleFactor;

    /// @note ID VS-10090
    /// @note description Measurement driver's torque input from steering wheel, unfiltered.
    /// @note min -81.9    max 81.9
    /// @note freq 100    unit N*m
    float32_t steeringWheelTorque;

    /// @note ID VS-10091
    /// @note description Angle of the steering wheel as picked up by the sensor close to the steering wheel, positive to left.
    /// @note freq 100    unit rad
    float32_t steeringWheelAngle;

    /// @note ID VS-10092
    /// @note description Integrity quality of steering wheel angle.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioSteeringWheelAngleQuality steeringWheelAngleQuality;

    /// @note ID VS-10120
    /// @note description Hold state report.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioHoldStatus holdStatus;

    /// @note ID VS-10130
    /// @note description Current state/position of the accelerator pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t throttleValue;

    /// @note ID VS-10140
    /// @note description Current state/position of the brake pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t driverBrakePedal;

    /// @note ID VS-10150
    /// @note description Current vehicle gear.
    /// @note freq 10    unit unitless
    dwVioGearStatus gearStatus;

    /// @note ID VS-10151
    /// @note description Gear that will be shifted to..
    /// @note freq 10    unit unitless
    dwVioGearTarget gearTarget;

    /// @note ID VS-10152
    /// @note description Current vehicle drive position (PRND).
    /// @note freq 10    unit unitless
    dwVioDrivePositionStatus drivePositionStatus;

    /// @note ID VS-10153
    /// @note description Drive Position that will be shifted to (PRND).
    /// @note freq 10    unit unitless
    dwVioDrivePositionTarget drivePositionTarget;

    /// @note ID VS-10230
    /// @note description Indicator if driver override longitudinal control.
    /// @note freq 100    unit unitless
    dwVioDriverOverrideThrottle driverOverrideThrottle;

    /// @note ID VS-11159
    /// @note description Minumum (asymetric) curvature capability the vehicle is capable of at various velocities in L2/L3 mode. Communicated as a vector. .
    /// @note min -0.1638    max 0
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvCapMin[10];

    /// @note ID VS-11160
    /// @note description Maximum curvature capability the vehicle is capable of at various velocities in L2/L3 mode. Communicated as a vector..
    /// @note min 0    max 0.1638
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvCapMax[10];

    /// @note ID VS-11161
    /// @note description Report of which limit within EPS is reached on a request.
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    /// @deprecated latCtrlEPSLimitStatus is no longer supported and exists only for binary layout compatibility. REL_23_02
    DW_DEPRECATED("latCtrlEPSLimitStatus is no longer supported and exists only for binary layout compatibility. REL_23_02")
    dwVioLatCtrlEPSLimitStatus latCtrlEPSLimitStatus;

    /// @note ID VS-11162
    /// @note description Collaborative steering status, whether driver is in control or the system is controlling the vehicle, or both..
    /// @note freq 100    unit unitless
    dwVioLatCtrlLoopStatus latCtrlLoopStatus;

    /// @note ID VS-11222
    /// @note description signal for remote parking to signal status of redundancy.
    /// @note freq 100    unit unitless
    /// @deprecated longCtrlRedundCheckStatus is no longer supported and exists only for binary layout compatibility. REL_23_06 longCtrlRedundCheckStatus is not necessary.
    DW_DEPRECATED("longCtrlRedundCheckStatus is no longer supported and exists only for binary layout compatibility. REL_23_06 longCtrlRedundCheckStatus is not necessary.")
    dwVioLongCtrlRedundCheckStatus longCtrlRedundCheckStatus;

    /// @note ID VS-11261
    /// @note description Estimated stopping distance for parking control.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m
    float32_t longCtrlEstimatedStopDistance;

    /// @note ID VS-11262
    /// @note description Friction range estimation from brake system.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioLongCtrlFrictionRangeEstimation longCtrlFrictionRangeEstimation;

    /// @note ID VS-11328
    /// @note description This signal describes whether a secondary curvature request is actuated on.
    /// @note freq 100    unit unitless
    /// @deprecated latCtrlCurvReqAdditionalStatus is no longer supported and exists only for binary layout compatibility. REL_23_02
    DW_DEPRECATED("latCtrlCurvReqAdditionalStatus is no longer supported and exists only for binary layout compatibility. REL_23_02")
    dwVioLatCtrlCurvReqAdditionalStatus latCtrlCurvReqAdditionalStatus;

    /// @note ID VS-17001
    /// @note description MMLON module state.
    /// @note freq 100    unit unitless
    dwVioLongCtrlStatus longCtrlStatus;

    /// @note ID VS-17007
    /// @note description Longitudinal Actuation Health Status .
    /// @note freq 100    unit unitless
    /// @note bitmask field: the expected data is a bitmask of combined bits.
    /// @note *** valid bits**: {
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_INIT (bit#0),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_HYDRAULIC_CONTROL_UNIT_FLT (bit#1),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_EPB_FLT (bit#2),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_LTI_FLT (bit#3),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_COM_FLT (bit#4),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_CHECK_FAILED (bit#5),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_OVERHEATED (bit#6),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_DEGRADATION (bit#7),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_SAFETY_LIMITS_VIOLATED (bit#8),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_ASU_SGNL_INPUT_PLAUSI_CHCK_FLT (bit#9),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_UNIT_FLT (bit#10),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_DRIVER_ABSENT (bit#11),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_SSC_FLT (bit#12),
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_ESP_OR_ASR_CTRL_ACTV (bit#13)
    ///        }
    uint32_t longCtrlFaultStatus;

    /// @note ID VS-17009
    /// @note description Brake torque availability full / reduced.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioLongCtrlBrakeTorqueAvailable longCtrlBrakeTorqueAvailable;

    /// @note ID VS-17010
    /// @note description Actual available maximum vehicle accelleration  .
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s²
    float32_t longCtrlAccelAvailable;

    /// @note ID VS-17013
    /// @note description Active ADAS Mode.
    /// @note freq 100    unit unitless
    dwVioLongCtrlActiveSystem longCtrlActiveSystem;

    /// @note ID VS-17015
    /// @note description Brake pedal state.
    /// @note freq 100    unit unitless
    dwVioBrakePedalStatus brakePedalStatus;

    /// @note ID VS-17020
    /// @note description with this signal VAL can give Information to BP about the Status of ECOAssist values: Inactive Active Controlling.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioLongCtrlEcoAssistStatus longCtrlEcoAssistStatus;

    /// @note ID VS-17030
    /// @note description This signal shows the availability of the L3 communication of the Motion Management longitudinal interface..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioLongCtrlComAvailable longCtrlComAvailable;

    /// @note ID VS-17100
    /// @note description SW mModule state.
    /// @note freq 100    unit unitless
    dwVioLatCtrlStatus latCtrlStatus;

    /// @note ID VS-17130
    /// @note description Current returned mode of the lateral interface: manual/human driving, active safety, L1/L2/L3, parking (from MM to NDAS).
    /// @note freq 100    unit unitless
    dwVioLatCtrlModeStatus latCtrlModeStatus;

    /// @note ID VS-17131
    /// @note description Currently available Modes (bitmask definition).
    /// @note freq 100    unit unitless
    /// @note bitmask field: the expected data is a bitmask of combined bits.
    /// @note *** valid bits**: {
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_DFLT (bit#0),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L2 (bit#1),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L2_PLUS (bit#2),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L2_HFE (bit#3),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_AES (bit#4),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L3 (bit#5),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L3_EMG (bit#6),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_LSS (bit#7),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L2 (bit#8),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L3 (bit#9),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_RECORD (bit#10),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_ESS (bit#11),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_ARP (bit#12),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L2_PLUS_PLUS (bit#13),
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_EESF (bit#14)
    ///        }
    uint32_t latCtrlModeAvail;

    /// @note ID VS-17135
    /// @note description Steering system override status.
    /// @note freq 100    unit unitless
    dwVioLatCtrlDriverInterventionStatus latCtrlDriverInterventionStatus;

    /// @note ID VS-17137
    /// @note description detection if driver has their hands on the wheel, for ECE lane change and EESF.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t handsoffDetectedFiltered;

    /// @note ID VS-17140
    /// @note description Currently active Error (bitmask definition)    (0 means no error present  65535 all possible errors are present).
    /// @note freq 100    unit unitless
    /// @note bitmask field: the expected data is a bitmask of combined bits.
    /// @note *** valid bits**: {
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_ENGMNT_RQ_SPD (bit#0),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_MAX_SPD_LIM_MODE_MAX_SPD (bit#1),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_PT_OFF (bit#2),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_MISC (bit#3),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_REV_GR (bit#4),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_TMP_OFF_SSA (bit#5),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_OTHER (bit#6),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PLAUSIERROR (bit#7),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_COMMERROR (bit#8),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_1 (bit#9),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_2 (bit#10),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_TIMEOUTDTCTD (bit#11),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_ENGAGEMENTPREVENTIONCOND (bit#12),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_SAFETYDRIVERCNDTNSFLT (bit#13),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_DERATING (bit#14),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_MD_MAN_CANCEL (bit#15),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_ABSM_ERROR_IFCPERMCLOSED (bit#16),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_TMP_OFF_REJECT (bit#17),
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_DERATE (bit#18)
    ///        }
    uint32_t latCtrlErrorStatus;

    /// @note ID VS-17155
    /// @note description Max allowed front wheel angle request.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t latCtrlMaxFrontWheelAngleRequestAllowed;

    /// @note ID VS-17156
    /// @note description Min allowed front wheel angle request.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t latCtrlMinFrontWheelAngleRequestAllowed;

    /// @note ID VS-17160
    /// @note description additional to the MAX-limit a min-limited is needed to allow non-symmetric limits.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t latCtrlMaxRearWheelAngleRequestAllowed;

    /// @note ID VS-17520
    /// @note description ActuationFeedback Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t timestamp_us;

    /// @note ID VS-21090
    /// @note description Status of Trailer Hitch.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioTrailerHitchStatus trailerHitchStatus;

    /// @note ID VS-30100
    /// @note description Velocity of the vehicle in the longitudinal direction as measured by ESP, always positive..
    /// @note min 0    max 113
    /// @note freq 100    unit m/s
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    float32_t speedESC;

    /// @note ID VS-30101
    /// @note description Direction of travel as measured by ESP (forward, backward, undefined) .
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioSpeedDirectionESC speedDirectionESC;

    /// @note ID VS-30102
    /// @note description Quality of velocity of the vehicle in the longitudinal direction as measured by ESC.
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioSpeedQualityESC speedQualityESC;

    /// @note ID VS-30103
    /// @note description Lower bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t speedMin;

    /// @note ID VS-30104
    /// @note description Higher bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t speedMax;

    /// @note ID VS-30106
    /// @note description ESC Longitudinal Speed timestamp. Should be filled at sender.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t speedESCTimestamp;

    /// @note ID VS-30107
    /// @note description Vehicle in Standstill as detected by ESC.
    /// @note freq 100    unit unitless
    dwVioVehicleStopped vehicleStopped;

    /// @note ID VS-30110
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR).
    /// @note freq 100    unit rad/s
    float32_t wheelSpeed[4];

    /// @note ID VS-30111
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelSpeedQuality wheelSpeedQuality[4];

    /// @note ID VS-30120
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR).
    /// @note freq 100    unit unitless
    int16_t wheelTicks[4];

    /// @note ID VS-30121
    /// @note description Quality of the wheel ticks (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTicksQuality wheelTicksQuality[4];

    /// @note ID VS-30130
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR).
    /// @note freq 100    unit unitless
    dwVioWheelTicksDirection wheelTicksDirection[4];

    /// @note ID VS-30140
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR).
    /// @note freq 100    unit us
    dwTime_t wheelTicksTimestamp[4];

    /// @note ID VS-30141
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTicksTimestampQuality wheelTicksTimestampQuality[4];

    /// @note ID VS-30150
    /// @note description Torque of each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit N*m
    float32_t wheelTorque[4];

    /// @note ID VS-30151
    /// @note description Quality of torque of each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTorqueQuality wheelTorqueQuality[4];

    /// @note ID VS-30160
    /// @note description Currently applied brake torque on each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit N*m
    float32_t brakeTorqueWheels[4];

    /// @note ID VS-30161
    /// @note description Quality of currently applied brake torque on each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioBrakeTorqueWheelsQuality brakeTorqueWheelsQuality[4];

    /// @note ID VS-30162
    /// @note description Currently applied brake torque on all wheels.
    /// @note freq 100    unit N*m
    float32_t brakeTorque;

    /// @note ID VS-30163
    /// @note description Signals whether the main brake applied.
    /// @note freq 100    unit unitless
    dwVioBrakeStatus brakeStatus;

    /// @note ID VS-30164
    /// @note description ABS Lock control on all wheels.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioBrakeAllWheelsABS brakeAllWheelsABS;

    /// @note ID VS-30165
    /// @note description Timestamp(s) of wheel torques (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    dwTime_t wheelTorqueTimestamps[4];

    /// @note ID VS-30166
    /// @note description Quality of timestamp(s) of wheel torques (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTorqueTimestampsQuality wheelTorqueTimestampsQuality[4];

    /// @note ID VS-30170
    /// @note description Current front axle steering angle, positive to left.
    /// @note min -1.57    max 1.57
    /// @note freq 100    unit rad
    float32_t frontSteeringAngle;

    /// @note ID VS-30171
    /// @note description Current front axle angle status.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioFrontSteeringAngleQuality frontSteeringAngleQuality;

    /// @note ID VS-30180
    /// @note description Current front axle steering angle offset, positive to left.
    /// @note TODO: Backend not yet implemented
    /// @note min -1.57    max 1.57
    /// @note freq 100    unit rad
    float32_t frontSteeringAngleOffset;

    /// @note ID VS-30181
    /// @note description Current front axle steering angle offset quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioFrontSteeringAngleOffsetQuality frontSteeringAngleOffsetQuality;

    /// @note ID VS-30185
    /// @note description Front axle steering angle timestamp.
    /// @note freq 100    unit us
    dwTime_t frontSteeringTimestamp;

    /// @note ID VS-30186
    /// @note description Front axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioFrontSteeringTimestampQuality frontSteeringTimestampQuality;

    /// @note ID VS-30191
    /// @note description Current rear axle steering angle quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioRearWheelAngleQuality rearWheelAngleQuality;

    /// @note ID VS-30200
    /// @note description Current rear axle steering angle offset, positive to left.
    /// @note min -0.3573    max 0.3573
    /// @note freq 100    unit rad
    /// @deprecated rearWheelAngleOffset is no longer supported and exists only for binary layout compatibility. REL_23_06 .
    DW_DEPRECATED("rearWheelAngleOffset is no longer supported and exists only for binary layout compatibility. REL_23_06 .")
    float32_t rearWheelAngleOffset;

    /// @note ID VS-30201
    /// @note description Current rear axlesteering angle offset quality.
    /// @note freq 100    unit unitless
    /// @deprecated rearWheelAngleOffsetQuality is no longer supported and exists only for binary layout compatibility. REL_23_06 .
    DW_DEPRECATED("rearWheelAngleOffsetQuality is no longer supported and exists only for binary layout compatibility. REL_23_06 .")
    dwVioRearWheelAngleOffsetQuality rearWheelAngleOffsetQuality;

    /// @note ID VS-30205
    /// @note description Rear axle steering angle timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    dwTime_t rearWheelAngleTimestamp;

    /// @note ID VS-30206
    /// @note description Rear axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioRearWheelAngleTimestampQuality rearWheelAngleTimestampQuality;

    /// @note ID VS-30208
    /// @note description Maximum rear angle steering capability.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 0.3573
    /// @note freq 100    unit rad
    float32_t rearWheelAngleMaximum;

    /// @note ID VS-30210
    /// @note description Indicator of ESP/ABS intervention status.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioAbsIntervention absIntervention;

    /// @note ID VS-95010
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit rad/s
    float32_t wheelSpeedRedundant[4];

    /// @note ID VS-95011
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioWheelSpeedQualityRedundant wheelSpeedQualityRedundant[4];

    /// @note ID VS-95020
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    int16_t wheelTicksRedundant[4];

    /// @note ID VS-95021
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioWheelTicksDirectionRedundant wheelTicksDirectionRedundant[4];

    /// @note ID VS-95040
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit us
    dwTime_t wheelTicksTimestampRedundant[4];

    /// @note ID VS-95041
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioWheelTicksTimestampQualityRedundant wheelTicksTimestampQualityRedundant[4];

    /// @note ID VS-95050
    /// @note description Current front axle steering angle. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit rad
    float32_t frontSteeringAngleHigh;

    /// @note ID VS-95051
    /// @note description Current front axle angle status. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioFrontSteeringAngleControlQualityHigh frontSteeringAngleControlQualityHigh;

    /// @note ID VS-95060
    /// @note description Measurement driver's torque input from steering wheel. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min -81.9    max 81.9
    /// @note freq 100    unit N*m
    float32_t steeringWheelTorqueHigh;

    /// @note ID VS-95070
    /// @note description Front axle steering angle timestamp. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit us
    dwTime_t frontSteeringTimestampHigh;

    /// @note ID VS-95080
    /// @note description Driver Intervention Detection. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioDriverInterventionDetectionHigh driverInterventionDetectionHigh;

    /// @note ID VS-95090
    /// @note description Failure indicator for components related to High steering. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioSteeringSystemStatusHigh steeringSystemStatusHigh;

    /// @note ID VS-95100
    /// @note description Failure reason for components related to High steering. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioSteeringSystemFailureReasonHigh steeringSystemFailureReasonHigh;

    /// @note ID VS-95110
    /// @note description High Steering System Off Status. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioSteeringSystemOffStatusHigh steeringSystemOffStatusHigh;

    /// @note ID VS-95120
    /// @note description High Steering System Interface Status. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioSteeringSystemInterfaceStatusHigh steeringSystemInterfaceStatusHigh;

    /// @note ID VS-95130
    /// @note description Front wheel angle limitation status. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioFrontSteeringAngleLimitationStatusHigh frontSteeringAngleLimitationStatusHigh;

    /// @note ID VS-95140
    /// @note description Max allowed front wheel angle request until SW limitation. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit deg
    float32_t latCtrlMaxFrontWheelAngleRequestAllowedHigh;

    /// @note ID VS-95150
    /// @note description Max allowed front wheel angle speed request until SW limitation. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit deg/s
    float32_t latCtrlMaxFrontWheelAngleSpeedRequestAllowedHigh;

    /// @note ID VS-95160
    /// @note description Front wheel angle after limiter. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit deg
    float32_t latCtrlFrontWheelAngleRequestLimitedHigh;

    /// @note ID VS-95170
    /// @note description Time for Takeover in Fail-Degraded situation of High Steering System. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit s
    float32_t latCtrlFailedDegradedSteeringTimeToTakeoverHigh;

    /// @note ID VS-95180
    /// @note description High Steering System rack force after controller. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit N
    float32_t latCtrlRackForceHigh;

    /// @note ID VS-95190
    /// @note description High Steering System effective actuating rack force. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit N
    float32_t latCtrlRackForceEffectiveHigh;

    /// @note ID VS-17181
    /// @note description Active Longitudinal Mode.
    /// @note freq 100    unit unitless
    dwVioLongCtrlActiveFunction longCtrlActiveFunction;

    /// @note ID VS-11163
    /// @note description C1 Curvature rate capability as a function of speed in Lx modes. Communicated as a vector. Can dynamically change over time..
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit (1/m)/s
    float32_t latCtrlCurvRateCap[10];
} dwVehicleIOActuationFeedback;

/// @brief Validity Info for signals in dwVehicleIOSafetyState
///
/// Contains a validity info value for each signal in dwVehicleIOSafetyState
/// with the same name as the signal in the base structure.
typedef struct dwVehicleIOSafetyStateValidityInfo
{
    /// ValidityInfo for size
    dwSignalValidity size;

    /// ValidityInfo for rearWheelAngle
    dwSignalValidity rearWheelAngle;

    /// ValidityInfo for rearWheelAngleFactor
    dwSignalValidity rearWheelAngleFactor;

    /// ValidityInfo for steeringWheelAngle
    dwSignalValidity steeringWheelAngle;

    /// ValidityInfo for steeringWheelAngleQuality
    dwSignalValidity steeringWheelAngleQuality;

    /// ValidityInfo for timestamp_us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity timestamp_us;

    /// ValidityInfo for rearWheelAngleQuality
    dwSignalValidity rearWheelAngleQuality;

    /// ValidityInfo for rearWheelAngleTimestamp
    dwSignalValidity rearWheelAngleTimestamp;

    /// ValidityInfo for steeringWheelAngleSpeed
    dwSignalValidity steeringWheelAngleSpeed;

    /// reserved
    dwSignalValidity reserved[63];
} dwVehicleIOSafetyStateValidityInfo;

/// Safety critical VIO state.
/// Expected to be sent from VAL to AV Stack.
typedef struct dwVehicleIOSafetyState
{
    /// validity info of VehicleIOSafetyState fields
    dwVehicleIOSafetyStateValidityInfo validityInfo;

    /// @note ID VS-10000
    /// @note description User need to set size = sizeof(itself).
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit nan
    uint32_t size;

    /// @note ID VS-10080
    /// @note description Effective rear steering angle (wheel to driving axis), positive to left.
    /// @note min -0.3573    max 0.3573
    /// @note freq 100    unit rad
    float32_t rearWheelAngle;

    /// @note ID VS-10082
    /// @note description Effective rear steering angle ratio ().
    /// @note freq 100    unit unitless
    float32_t rearWheelAngleFactor;

    /// @note ID VS-10091
    /// @note description Angle of the steering wheel as picked up by the sensor close to the steering wheel, positive to left.
    /// @note freq 100    unit rad
    float32_t steeringWheelAngle;

    /// @note ID VS-10092
    /// @note description Integrity quality of steering wheel angle.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioSteeringWheelAngleQuality steeringWheelAngleQuality;

    /// @note ID VS-17530
    /// @note description SafetyState Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t timestamp_us;

    /// @note ID VS-30191
    /// @note description Current rear axle steering angle quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioRearWheelAngleQuality rearWheelAngleQuality;

    /// @note ID VS-30205
    /// @note description Rear axle steering angle timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    dwTime_t rearWheelAngleTimestamp;

    /// @note ID VS-10093
    /// @note description Angular speed of the steering wheel as picked up by the sensor close to the steering wheel, positive to left.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad/s
    float32_t steeringWheelAngleSpeed;
} dwVehicleIOSafetyState;

/// @brief Validity Info for signals in dwVehicleIONonSafetyState
///
/// Contains a validity info value for each signal in dwVehicleIONonSafetyState
/// with the same name as the signal in the base structure.
typedef struct dwVehicleIONonSafetyStateValidityInfo
{
    /// ValidityInfo for size
    dwSignalValidity size;

    /// ValidityInfo for kickdownStatus
    dwSignalValidity kickdownStatus;

    /// ValidityInfo for latCtrlCurvatureActual
    dwSignalValidity latCtrlCurvatureActual;

    /// ValidityInfo for holdStatus
    dwSignalValidity holdStatus;

    /// ValidityInfo for throttleValue
    dwSignalValidity throttleValue;

    /// ValidityInfo for driverBrakePedal
    dwSignalValidity driverBrakePedal;

    /// ValidityInfo for gearStatus
    dwSignalValidity gearStatus;

    /// ValidityInfo for gearTarget
    dwSignalValidity gearTarget;

    /// ValidityInfo for drivePositionStatus
    dwSignalValidity drivePositionStatus;

    /// ValidityInfo for drivePositionTarget
    dwSignalValidity drivePositionTarget;

    /// ValidityInfo for hazardFlasherStatus
    dwSignalValidity hazardFlasherStatus;

    /// ValidityInfo for turnSignalStatus
    dwSignalValidity turnSignalStatus;

    /// ValidityInfo for brakePedalStatus
    dwSignalValidity brakePedalStatus;

    /// ValidityInfo for longCtrlEcoAssistStatus
    dwSignalValidity longCtrlEcoAssistStatus;

    /// ValidityInfo for handsoffDetectedFiltered
    dwSignalValidity handsoffDetectedFiltered;

    /// ValidityInfo for ESCOperationalState
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity ESCOperationalState;

    /// ValidityInfo for timestamp_us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity timestamp_us;

    /// ValidityInfo for headlightState
    dwSignalValidity headlightState;

    /// ValidityInfo for outsideTemperature
    dwSignalValidity outsideTemperature;

    /// ValidityInfo for outsideTemperatureQuality
    dwSignalValidity outsideTemperatureQuality;

    /// ValidityInfo for wetnessLevelUnfiltered
    dwSignalValidity wetnessLevelUnfiltered;

    /// ValidityInfo for wetnessLevelFiltered
    dwSignalValidity wetnessLevelFiltered;

    /// ValidityInfo for rainLevelRemoved
    dwSignalValidity rainLevelRemoved;

    /// ValidityInfo for rainSensorFault
    dwSignalValidity rainSensorFault;

    /// ValidityInfo for lightSensorTwilight
    dwSignalValidity lightSensorTwilight;

    /// ValidityInfo for lightSensorFault
    dwSignalValidity lightSensorFault;

    /// ValidityInfo for microSirenID
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity microSirenID;

    /// ValidityInfo for microSirenDetected
    dwSignalValidity microSirenDetected;

    /// ValidityInfo for microSirenAvailable
    dwSignalValidity microSirenAvailable;

    /// ValidityInfo for microSirenConfidenceLevel
    dwSignalValidity microSirenConfidenceLevel;

    /// ValidityInfo for buckleStateDriver
    dwSignalValidity buckleStateDriver;

    /// ValidityInfo for buckleStateFrontPassenger
    dwSignalValidity buckleStateFrontPassenger;

    /// ValidityInfo for doorFrontLeftState
    dwSignalValidity doorFrontLeftState;

    /// ValidityInfo for doorFrontRightState
    dwSignalValidity doorFrontRightState;

    /// ValidityInfo for doorRearLeftState
    dwSignalValidity doorRearLeftState;

    /// ValidityInfo for doorRearRightState
    dwSignalValidity doorRearRightState;

    /// ValidityInfo for rearTrunkState
    dwSignalValidity rearTrunkState;

    /// ValidityInfo for frontHoodState
    dwSignalValidity frontHoodState;

    /// ValidityInfo for trailerHitchStatus
    dwSignalValidity trailerHitchStatus;

    /// ValidityInfo for ignitionStatus
    dwSignalValidity ignitionStatus;

    /// ValidityInfo for speedESC
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedESC;

    /// ValidityInfo for speedDirectionESC
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedDirectionESC;

    /// ValidityInfo for speedQualityESC
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedQualityESC;

    /// ValidityInfo for speedMin
    dwSignalValidity speedMin;

    /// ValidityInfo for speedMax
    dwSignalValidity speedMax;

    /// ValidityInfo for speedIndicated
    dwSignalValidity speedIndicated;

    /// ValidityInfo for speedESCTimestamp
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity speedESCTimestamp;

    /// ValidityInfo for vehicleStopped
    dwSignalValidity vehicleStopped;

    /// ValidityInfo for wheelSpeed
    dwSignalValidity wheelSpeed[4];

    /// ValidityInfo for wheelSpeedQuality
    dwSignalValidity wheelSpeedQuality[4];

    /// ValidityInfo for wheelTicks
    dwSignalValidity wheelTicks[4];

    /// ValidityInfo for wheelTicksQuality
    dwSignalValidity wheelTicksQuality[4];

    /// ValidityInfo for wheelTicksDirection
    dwSignalValidity wheelTicksDirection[4];

    /// ValidityInfo for wheelTicksTimestamp
    dwSignalValidity wheelTicksTimestamp[4];

    /// ValidityInfo for wheelTicksTimestampQuality
    dwSignalValidity wheelTicksTimestampQuality[4];

    /// ValidityInfo for wheelTorque
    dwSignalValidity wheelTorque[4];

    /// ValidityInfo for wheelTorqueQuality
    dwSignalValidity wheelTorqueQuality[4];

    /// ValidityInfo for brakeTorqueWheels
    dwSignalValidity brakeTorqueWheels[4];

    /// ValidityInfo for brakeTorqueWheelsQuality
    dwSignalValidity brakeTorqueWheelsQuality[4];

    /// ValidityInfo for brakeTorque
    dwSignalValidity brakeTorque;

    /// ValidityInfo for brakeStatus
    dwSignalValidity brakeStatus;

    /// ValidityInfo for brakeAllWheelsABS
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity brakeAllWheelsABS;

    /// ValidityInfo for wheelTorqueTimestamps
    dwSignalValidity wheelTorqueTimestamps[4];

    /// ValidityInfo for wheelTorqueTimestampsQuality
    dwSignalValidity wheelTorqueTimestampsQuality[4];

    /// ValidityInfo for frontSteeringAngle
    dwSignalValidity frontSteeringAngle;

    /// ValidityInfo for frontSteeringAngleQuality
    dwSignalValidity frontSteeringAngleQuality;

    /// ValidityInfo for frontSteeringAngleOffset
    dwSignalValidity frontSteeringAngleOffset;

    /// ValidityInfo for frontSteeringAngleOffsetQuality
    dwSignalValidity frontSteeringAngleOffsetQuality;

    /// ValidityInfo for frontSteeringTimestamp
    dwSignalValidity frontSteeringTimestamp;

    /// ValidityInfo for frontSteeringTimestampQuality
    dwSignalValidity frontSteeringTimestampQuality;

    /// ValidityInfo for rearWheelAngleOffset
    dwSignalValidity rearWheelAngleOffset;

    /// ValidityInfo for rearWheelAngleOffsetQuality
    dwSignalValidity rearWheelAngleOffsetQuality;

    /// ValidityInfo for rearWheelAngleTimestampQuality
    dwSignalValidity rearWheelAngleTimestampQuality;

    /// ValidityInfo for rearWheelAngleMaximum
    dwSignalValidity rearWheelAngleMaximum;

    /// ValidityInfo for absIntervention
    dwSignalValidity absIntervention;

    /// ValidityInfo for mirrorFoldState
    dwSignalValidity mirrorFoldState[2];

    /// ValidityInfo for cameraFoldState
    dwSignalValidity cameraFoldState[2];

    /// ValidityInfo for suspensionLevel
    dwSignalValidity suspensionLevel[4];

    /// ValidityInfo for suspensionLevelQuality
    dwSignalValidity suspensionLevelQuality;

    /// ValidityInfo for suspensionLevelTimestamp
    dwSignalValidity suspensionLevelTimestamp;

    /// ValidityInfo for suspensionLevelTimestampQuality
    dwSignalValidity suspensionLevelTimestampQuality;

    /// ValidityInfo for suspensionLevelCalibrationState
    dwSignalValidity suspensionLevelCalibrationState;

    /// ValidityInfo for tirePressure
    dwSignalValidity tirePressure[4];

    /// ValidityInfo for tirePressureQuality
    dwSignalValidity tirePressureQuality[4];

    /// ValidityInfo for tirePressureStateTimestamp
    dwSignalValidity tirePressureStateTimestamp[4];

    /// ValidityInfo for tirePressureMonitoringState
    dwSignalValidity tirePressureMonitoringState;

    /// ValidityInfo for tireSwitched
    dwSignalValidity tireSwitched[4];

    /// ValidityInfo for trailerMass
    dwSignalValidity trailerMass;

    /// ValidityInfo for trailerArticulationAngle
    dwSignalValidity trailerArticulationAngle;

    /// ValidityInfo for trailerConnected
    dwSignalValidity trailerConnected;

    /// ValidityInfo for axleFrontLoad
    dwSignalValidity axleFrontLoad;

    /// ValidityInfo for axlePusherLoad
    dwSignalValidity axlePusherLoad;

    /// ValidityInfo for axleDriverLoad
    dwSignalValidity axleDriverLoad;

    /// ValidityInfo for axleTrailerLoad
    dwSignalValidity axleTrailerLoad;

    /// ValidityInfo for wiperStatusRear
    dwSignalValidity wiperStatusRear;

    /// ValidityInfo for wiperFrontSecondaryStatus
    dwSignalValidity wiperFrontSecondaryStatus;

    /// ValidityInfo for wiperFrontStatus
    dwSignalValidity wiperFrontStatus;

    /// ValidityInfo for wheelSpeedRedundant
    dwSignalValidity wheelSpeedRedundant[4];

    /// ValidityInfo for wheelSpeedQualityRedundant
    dwSignalValidity wheelSpeedQualityRedundant[4];

    /// ValidityInfo for wheelTicksRedundant
    dwSignalValidity wheelTicksRedundant[4];

    /// ValidityInfo for wheelTicksDirectionRedundant
    dwSignalValidity wheelTicksDirectionRedundant[4];

    /// ValidityInfo for wheelTicksTimestampRedundant
    dwSignalValidity wheelTicksTimestampRedundant[4];

    /// ValidityInfo for wheelTicksTimestampQualityRedundant
    dwSignalValidity wheelTicksTimestampQualityRedundant[4];

    /// ValidityInfo for frontSteeringAngleHigh
    dwSignalValidity frontSteeringAngleHigh;

    /// ValidityInfo for frontSteeringAngleControlQualityHigh
    dwSignalValidity frontSteeringAngleControlQualityHigh;

    /// ValidityInfo for frontSteeringTimestampHigh
    dwSignalValidity frontSteeringTimestampHigh;

    /// ValidityInfo for microSirenDuration
    dwSignalValidity microSirenDuration;

    /// ValidityInfo for stateFunctionSirenDetectionRemoved
    dwSignalValidity stateFunctionSirenDetectionRemoved;

    /// ValidityInfo for microSirenTypeRemoved
    dwSignalValidity microSirenTypeRemoved;

    /// ValidityInfo for microSirenLatency
    dwSignalValidity microSirenLatency;

    /// ValidityInfo for lightSensorTunnelRemoved
    dwSignalValidity lightSensorTunnelRemoved;

    /// ValidityInfo for lightSensorNightModeRemoved
    dwSignalValidity lightSensorNightModeRemoved;

    /// ValidityInfo for lightSensorRequestLowBeamRemoved
    dwSignalValidity lightSensorRequestLowBeamRemoved;

    /// ValidityInfo for cameraHeatingRequestRearRight
    dwSignalValidity cameraHeatingRequestRearRight;

    /// ValidityInfo for cameraHeatingRequestRearLeft
    dwSignalValidity cameraHeatingRequestRearLeft;

    /// ValidityInfo for abtActivationStatus
    dwSignalValidity abtActivationStatus;

    /// ValidityInfo for turnSignalDriverRequest
    dwSignalValidity turnSignalDriverRequest;

    /// ValidityInfo for rearFogLampStatus
    dwSignalValidity rearFogLampStatus;

    /// ValidityInfo for displayVehicleSpeed
    dwSignalValidity displayVehicleSpeed;

    /// ValidityInfo for stateFunctionSirenDetection
    dwSignalValidity stateFunctionSirenDetection;

    /// ValidityInfo for microSirenType
    dwSignalValidity microSirenType;

    /// ValidityInfo for lightSensorTunnel
    dwSignalValidity lightSensorTunnel;

    /// ValidityInfo for lightSensorNightMode
    dwSignalValidity lightSensorNightMode;

    /// ValidityInfo for lightSensorRequestLowBeam
    dwSignalValidity lightSensorRequestLowBeam;

    /// ValidityInfo for currentTimeSecond
    dwSignalValidity currentTimeSecond;

    /// ValidityInfo for currentTimeMinute
    dwSignalValidity currentTimeMinute;

    /// ValidityInfo for currentTimeHour
    dwSignalValidity currentTimeHour;

    /// ValidityInfo for currentDay
    dwSignalValidity currentDay;

    /// ValidityInfo for rainLevel
    dwSignalValidity rainLevel;

    /// ValidityInfo for attachedTrailerType
    dwSignalValidity attachedTrailerType;

    /// reserved
    dwSignalValidity reserved[52];
} dwVehicleIONonSafetyStateValidityInfo;

/// Non-safety critical RoV state.
/// Expected to be sent from VAL in CCPLEX to AV Stack
typedef struct dwVehicleIONonSafetyState
{
    /// validity info of VehicleIOSafetyState fields
    dwVehicleIONonSafetyStateValidityInfo validityInfo;

    /// @note ID VS-10000
    /// @note description User need to set size = sizeof(itself).
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit nan
    uint32_t size;

    /// @note ID VS-10010
    /// @note description Whether kickdown of accelerator pedal.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    /// @deprecated kickdownStatus is no longer supported and exists only for binary layout compatibility.
    DW_DEPRECATED("kickdownStatus is no longer supported and exists only for binary layout compatibility. ")
    uint8_t kickdownStatus;

    /// @note ID VS-10040
    /// @note description Vector form of effective curvature request (uniform time-spaced).
    /// @note min -0.16384    max 0.16384
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvatureActual;

    /// @note ID VS-10120
    /// @note description Hold state report.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioHoldStatus holdStatus;

    /// @note ID VS-10130
    /// @note description Current state/position of the accelerator pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t throttleValue;

    /// @note ID VS-10140
    /// @note description Current state/position of the brake pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t driverBrakePedal;

    /// @note ID VS-10150
    /// @note description Current vehicle gear.
    /// @note freq 10    unit unitless
    dwVioGearStatus gearStatus;

    /// @note ID VS-10151
    /// @note description Gear that will be shifted to..
    /// @note freq 10    unit unitless
    dwVioGearTarget gearTarget;

    /// @note ID VS-10152
    /// @note description Current vehicle drive position (PRND).
    /// @note freq 10    unit unitless
    dwVioDrivePositionStatus drivePositionStatus;

    /// @note ID VS-10153
    /// @note description Drive Position that will be shifted to (PRND).
    /// @note freq 10    unit unitless
    dwVioDrivePositionTarget drivePositionTarget;

    /// @note ID VS-10220
    /// @note description Indicator of emergency/hazard lights.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioHazardFlasherStatus hazardFlasherStatus;

    /// @note ID VS-10260
    /// @note description Indication of turn indicators.
    /// @note freq 100    unit unitless
    dwVioTurnSignalStatus turnSignalStatus;

    /// @note ID VS-17015
    /// @note description Brake pedal state.
    /// @note freq 100    unit unitless
    dwVioBrakePedalStatus brakePedalStatus;

    /// @note ID VS-17020
    /// @note description with this signal VAL can give Information to BP about the Status of ECOAssist values: Inactive Active Controlling.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioLongCtrlEcoAssistStatus longCtrlEcoAssistStatus;

    /// @note ID VS-17137
    /// @note description detection if driver has their hands on the wheel, for ECE lane change and EESF.
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t handsoffDetectedFiltered;

    /// @note ID VS-17202
    /// @note description ESP operation state for assistance systems.
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioESCOperationalState ESCOperationalState;

    /// @note ID VS-17540
    /// @note description NonSafetyState Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t timestamp_us;

    /// @note ID VS-20010
    /// @note description UNKNOWN   = 0, OFF   = 1, LOW_BEAM  = 2, HIGH_BEAM = 3, DRL   = 4 //DAYTIME RUNNING LIGHTS.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioHeadlightState headlightState;

    /// @note ID VS-20040
    /// @note description Ambient temperature value.
    /// @note freq 10    unit Celsius
    float32_t outsideTemperature;

    /// @note ID VS-20041
    /// @note description Ambient temperature Signal Quality identifier.
    /// @note freq 10    unit unitless
    dwVioOutsideTemperatureQuality outsideTemperatureQuality;

    /// @note ID VS-20060
    /// @note description Measured road wetness level.
    /// @note TODO: Backend not yet implemented
    /// @note min 0U    max 250U
    /// @note freq 10    unit unitless
    uint8_t wetnessLevelUnfiltered;

    /// @note ID VS-20061
    /// @note description Wetness level "robust"/filtered and therefore slower one.
    /// @note TODO: Backend not yet implemented
    /// @note min 0U    max 250U
    /// @note freq 10    unit unitless
    uint8_t wetnessLevelFiltered;

    /// @note ID VS-20070
    /// @note description Rain Level, proportinal to droplets / minute.
    /// @note min 0    max 6
    /// @note freq nan    unit nan
    /// @deprecated rainLevelRemoved is no longer supported and exists only for binary layout compatibility. REL_23_06 The newer version of rainLevel should be used instead of this signal.
    DW_DEPRECATED("rainLevelRemoved is no longer supported and exists only for binary layout compatibility. REL_23_06 The newer version of rainLevel should be used instead of this signal.")
    uint8_t rainLevelRemoved;

    /// @note ID VS-20080
    /// @note description Rain sensor fault indicates if the rain sensor is in a fault state..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioRainSensorFault rainSensorFault;

    /// @note ID VS-20090
    /// @note description Twilight state light sensor, lightlevel from 0 (dark) to 7 (bright) in steps of 150 lux (0...150,150...300,...).
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 7
    /// @note freq nan    unit nan
    uint8_t lightSensorTwilight;

    /// @note ID VS-20100
    /// @note description Light sensor fault.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioLightSensorFault lightSensorFault;

    /// @note ID VS-20110
    /// @note description Micro Siren ID.
    /// @note TODO: Backend not yet implemented
    /// @note min 1    max 30
    /// @note freq nan    unit nan
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    uint8_t microSirenID;

    /// @note ID VS-20120
    /// @note description Micro Siren detected.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioMicroSirenDetected microSirenDetected;

    /// @note ID VS-20130
    /// @note description Micro Siren available.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioMicroSirenAvailable microSirenAvailable;

    /// @note ID VS-20140
    /// @note description Micro Siren Detection Confidence Level.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 100
    /// @note freq nan    unit nan
    uint8_t microSirenConfidenceLevel;

    /// @note ID VS-21010
    /// @note description State of drivers safety belt.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioBuckleStateDriver buckleStateDriver;

    /// @note ID VS-21020
    /// @note description State of front passenger safety belt.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioBuckleStateFrontPassenger buckleStateFrontPassenger;

    /// @note ID VS-21030
    /// @note description Door lock (latch) state, describing if the door is closed (open usually triggers a warning on the dashboard).
    /// @note TODO: Backend not yet implemented
    /// @note freq 20    unit unitless
    dwVioLockState doorFrontLeftState;

    /// @note ID VS-21040
    /// @note description Door lock (latch) state, describing if the door is closed (open usually triggers a warning on the dashboard).
    /// @note TODO: Backend not yet implemented
    /// @note freq 20    unit unitless
    dwVioLockState doorFrontRightState;

    /// @note ID VS-21050
    /// @note description Door lock (latch) state, describing if the door is closed (open usually triggers a warning on the dashboard).
    /// @note TODO: Backend not yet implemented
    /// @note freq 20    unit unitless
    dwVioLockState doorRearLeftState;

    /// @note ID VS-21060
    /// @note description Door lock (latch) state, describing if the door is closed (open usually triggers a warning on the dashboard).
    /// @note TODO: Backend not yet implemented
    /// @note freq 20    unit unitless
    dwVioLockState doorRearRightState;

    /// @note ID VS-21070
    /// @note description Trunk lock state.
    /// @note freq 20    unit unitless
    /// @deprecated rearTrunkState is no longer supported and exists only for binary layout compatibility. REL_23_02
    DW_DEPRECATED("rearTrunkState is no longer supported and exists only for binary layout compatibility. REL_23_02")
    dwVioLockState rearTrunkState;

    /// @note ID VS-21080
    /// @note description Door lock (latch) state.
    /// @note freq 20    unit unitless
    /// @deprecated frontHoodState is no longer supported and exists only for binary layout compatibility. REL_23_02
    DW_DEPRECATED("frontHoodState is no longer supported and exists only for binary layout compatibility. REL_23_02")
    dwVioLockState frontHoodState;

    /// @note ID VS-21090
    /// @note description Status of Trailer Hitch.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioTrailerHitchStatus trailerHitchStatus;

    /// @note ID VS-21100
    /// @note description Status of vehicle ignition..
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioIgnitionStatus ignitionStatus;

    /// @note ID VS-30100
    /// @note description Velocity of the vehicle in the longitudinal direction as measured by ESP, always positive..
    /// @note min 0    max 113
    /// @note freq 100    unit m/s
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    float32_t speedESC;

    /// @note ID VS-30101
    /// @note description Direction of travel as measured by ESP (forward, backward, undefined) .
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioSpeedDirectionESC speedDirectionESC;

    /// @note ID VS-30102
    /// @note description Quality of velocity of the vehicle in the longitudinal direction as measured by ESC.
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioSpeedQualityESC speedQualityESC;

    /// @note ID VS-30103
    /// @note description Lower bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t speedMin;

    /// @note ID VS-30104
    /// @note description Higher bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t speedMax;

    /// @note ID VS-30105
    /// @note description Indicated speed for warnings associated with speed violations.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t speedIndicated;

    /// @note ID VS-30106
    /// @note description ESC Longitudinal Speed timestamp. Should be filled at sender.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t speedESCTimestamp;

    /// @note ID VS-30107
    /// @note description Vehicle in Standstill as detected by ESC.
    /// @note freq 100    unit unitless
    dwVioVehicleStopped vehicleStopped;

    /// @note ID VS-30110
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR).
    /// @note freq 100    unit rad/s
    float32_t wheelSpeed[4];

    /// @note ID VS-30111
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelSpeedQuality wheelSpeedQuality[4];

    /// @note ID VS-30120
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR).
    /// @note freq 100    unit unitless
    int16_t wheelTicks[4];

    /// @note ID VS-30121
    /// @note description Quality of the wheel ticks (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTicksQuality wheelTicksQuality[4];

    /// @note ID VS-30130
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR).
    /// @note freq 100    unit unitless
    dwVioWheelTicksDirection wheelTicksDirection[4];

    /// @note ID VS-30140
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR).
    /// @note freq 100    unit us
    dwTime_t wheelTicksTimestamp[4];

    /// @note ID VS-30141
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTicksTimestampQuality wheelTicksTimestampQuality[4];

    /// @note ID VS-30150
    /// @note description Torque of each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit N*m
    float32_t wheelTorque[4];

    /// @note ID VS-30151
    /// @note description Quality of torque of each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTorqueQuality wheelTorqueQuality[4];

    /// @note ID VS-30160
    /// @note description Currently applied brake torque on each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit N*m
    float32_t brakeTorqueWheels[4];

    /// @note ID VS-30161
    /// @note description Quality of currently applied brake torque on each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioBrakeTorqueWheelsQuality brakeTorqueWheelsQuality[4];

    /// @note ID VS-30162
    /// @note description Currently applied brake torque on all wheels.
    /// @note freq 100    unit N*m
    float32_t brakeTorque;

    /// @note ID VS-30163
    /// @note description Signals whether the main brake applied.
    /// @note freq 100    unit unitless
    dwVioBrakeStatus brakeStatus;

    /// @note ID VS-30164
    /// @note description ABS Lock control on all wheels.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioBrakeAllWheelsABS brakeAllWheelsABS;

    /// @note ID VS-30165
    /// @note description Timestamp(s) of wheel torques (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    dwTime_t wheelTorqueTimestamps[4];

    /// @note ID VS-30166
    /// @note description Quality of timestamp(s) of wheel torques (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioWheelTorqueTimestampsQuality wheelTorqueTimestampsQuality[4];

    /// @note ID VS-30170
    /// @note description Current front axle steering angle, positive to left.
    /// @note min -1.57    max 1.57
    /// @note freq 100    unit rad
    float32_t frontSteeringAngle;

    /// @note ID VS-30171
    /// @note description Current front axle angle status.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioFrontSteeringAngleQuality frontSteeringAngleQuality;

    /// @note ID VS-30180
    /// @note description Current front axle steering angle offset, positive to left.
    /// @note TODO: Backend not yet implemented
    /// @note min -1.57    max 1.57
    /// @note freq 100    unit rad
    float32_t frontSteeringAngleOffset;

    /// @note ID VS-30181
    /// @note description Current front axle steering angle offset quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioFrontSteeringAngleOffsetQuality frontSteeringAngleOffsetQuality;

    /// @note ID VS-30185
    /// @note description Front axle steering angle timestamp.
    /// @note freq 100    unit us
    dwTime_t frontSteeringTimestamp;

    /// @note ID VS-30186
    /// @note description Front axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioFrontSteeringTimestampQuality frontSteeringTimestampQuality;

    /// @note ID VS-30200
    /// @note description Current rear axle steering angle offset, positive to left.
    /// @note min -0.3573    max 0.3573
    /// @note freq 100    unit rad
    /// @deprecated rearWheelAngleOffset is no longer supported and exists only for binary layout compatibility. REL_23_06 .
    DW_DEPRECATED("rearWheelAngleOffset is no longer supported and exists only for binary layout compatibility. REL_23_06 .")
    float32_t rearWheelAngleOffset;

    /// @note ID VS-30201
    /// @note description Current rear axlesteering angle offset quality.
    /// @note freq 100    unit unitless
    /// @deprecated rearWheelAngleOffsetQuality is no longer supported and exists only for binary layout compatibility. REL_23_06 .
    DW_DEPRECATED("rearWheelAngleOffsetQuality is no longer supported and exists only for binary layout compatibility. REL_23_06 .")
    dwVioRearWheelAngleOffsetQuality rearWheelAngleOffsetQuality;

    /// @note ID VS-30206
    /// @note description Rear axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioRearWheelAngleTimestampQuality rearWheelAngleTimestampQuality;

    /// @note ID VS-30208
    /// @note description Maximum rear angle steering capability.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 0.3573
    /// @note freq 100    unit rad
    float32_t rearWheelAngleMaximum;

    /// @note ID VS-30210
    /// @note description Indicator of ESP/ABS intervention status.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioAbsIntervention absIntervention;

    /// @note ID VS-30220
    /// @note description State of mirror folding procedure (FOLD, MOVING, UNFOLD). mirrorFoldState[0] corresponds to the left mirror and mirrorFoldState[1] corresponds to the right one..
    /// @note freq 10    unit unitless
    dwVioMirrorFoldState mirrorFoldState[2];

    /// @note ID VS-30230
    /// @note description State of SVS cameras (front/rear) folding procedure (FOLD, MOVING, UNFOLD).
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioCameraFoldState cameraFoldState[2];

    /// @note ID VS-30310
    /// @note description Vehicle suspension level measurements (Order is FL, FR, RL, RR).
    /// @note freq 100    unit m
    float32_t suspensionLevel[4];

    /// @note ID VS-30320
    /// @note description Vehicle suspension level quality quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioSuspensionLevelQuality suspensionLevelQuality;

    /// @note ID VS-30330
    /// @note description Vehicle suspension level timestamp.
    /// @note freq 100    unit us
    dwTime_t suspensionLevelTimestamp;

    /// @note ID VS-30331
    /// @note description Vehicle suspension level timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioSuspensionLevelTimestampQuality suspensionLevelTimestampQuality;

    /// @note ID VS-30340
    /// @note description Vehicle suspension calibration status.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioSuspensionLevelCalibrationState suspensionLevelCalibrationState;

    /// @note ID VS-32210
    /// @note description Vehicle tire pressure (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit kPA
    float32_t tirePressure[4];

    /// @note ID VS-32211
    /// @note description Vehicle tire pressure quality (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioTirePressureQuality tirePressureQuality[4];

    /// @note ID VS-32220
    /// @note description Vehicle tire pressure status timestamp (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    dwTime_t tirePressureStateTimestamp[4];

    /// @note ID VS-32222
    /// @note description Tire Pressure Monitoring System Status.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioTirePressureMonitoringState tirePressureMonitoringState;

    /// @note ID VS-32230
    /// @note description Indicates if tires have been switched (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t tireSwitched[4];

    /// @note ID VS-40005
    /// @note description Total mass of trailer unit.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit kg
    float32_t trailerMass;

    /// @note ID VS-40010
    /// @note description Yaw articulation angle between truck and trailer measured at rear axle, Angle measured as described by ISO8855. For example, 0 when driving in line, positive when turning left.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t trailerArticulationAngle;

    /// @note ID VS-40015
    /// @note description  - .
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioTrailerConnected trailerConnected;

    /// @note ID VS-40020
    /// @note description Load on front axle.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit kg
    float32_t axleFrontLoad;

    /// @note ID VS-40025
    /// @note description Load on pusher axle.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit kg
    float32_t axlePusherLoad;

    /// @note ID VS-40030
    /// @note description Load on driver axle.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit kg
    float32_t axleDriverLoad;

    /// @note ID VS-40035
    /// @note description Load on all trailer axles.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit kg
    float32_t axleTrailerLoad;

    /// @note ID VS-80010
    /// @note description Indicator of the wiper status (setting).
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit Hz
    float32_t wiperStatusRear;

    /// @note ID VS-80020
    /// @note description Indicator of the windshield wiper status (setting) in case it is independend to primary.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit Hz
    float32_t wiperFrontSecondaryStatus;

    /// @note ID VS-80050
    /// @note description Indicator of the windshield wiper status (setting).
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit Hz
    float32_t wiperFrontStatus;

    /// @note ID VS-95010
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit rad/s
    float32_t wheelSpeedRedundant[4];

    /// @note ID VS-95011
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioWheelSpeedQualityRedundant wheelSpeedQualityRedundant[4];

    /// @note ID VS-95020
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    int16_t wheelTicksRedundant[4];

    /// @note ID VS-95021
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioWheelTicksDirectionRedundant wheelTicksDirectionRedundant[4];

    /// @note ID VS-95040
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit us
    dwTime_t wheelTicksTimestampRedundant[4];

    /// @note ID VS-95041
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioWheelTicksTimestampQualityRedundant wheelTicksTimestampQualityRedundant[4];

    /// @note ID VS-95050
    /// @note description Current front axle steering angle. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit rad
    float32_t frontSteeringAngleHigh;

    /// @note ID VS-95051
    /// @note description Current front axle angle status. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioFrontSteeringAngleControlQualityHigh frontSteeringAngleControlQualityHigh;

    /// @note ID VS-95070
    /// @note description Front axle steering angle timestamp. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit us
    dwTime_t frontSteeringTimestampHigh;

    /// @note ID VS-20150
    /// @note description Microphone Siren Duration.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 600000
    /// @note freq nan    unit nan
    uint64_t microSirenDuration;

    /// @note ID VS-20160
    /// @note description State Function Siren Detection.
    /// @note min 0    max 6
    /// @note freq nan    unit OFF = 0 , OPERATIONAL = 1 , INIT = 2 , NOT_OK = 3
    /// @deprecated stateFunctionSirenDetectionRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 stateFunctionSirenDetection should be used instead.
    DW_DEPRECATED("stateFunctionSirenDetectionRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 stateFunctionSirenDetection should be used instead.")
    uint8_t stateFunctionSirenDetectionRemoved;

    /// @note ID VS-20170
    /// @note description Micro Siren Type.
    /// @note min 0    max 127
    /// @note freq nan    unit DEFAULT = 0, TYPE1 = 1, TYPE2 = 2, TYPE3 = 3, TYPE4 = 4, TYPE5 = 5, TYPE6 = 6, TYPE7 = 7, TYPE8 = 8, TYPE9 = 9,
    /// @deprecated microSirenTypeRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of microSirenType should be used instead.
    DW_DEPRECATED("microSirenTypeRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of microSirenType should be used instead.")
    uint8_t microSirenTypeRemoved;

    /// @note ID VS-20180
    /// @note description Micro Siren Latency.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 60000
    /// @note freq nan    unit nan
    uint64_t microSirenLatency;

    /// @note ID VS-20190
    /// @note description Light sensor 'tunnel' detected.
    /// @note min 0    max 2
    /// @note freq nan    unit FALSE = 1 // Not in Tunnel, TRUE = 2 // In Tunnel
    /// @deprecated lightSensorTunnelRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of lightSensorTunnel should be used instead.
    DW_DEPRECATED("lightSensorTunnelRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of lightSensorTunnel should be used instead.")
    uint8_t lightSensorTunnelRemoved;

    /// @note ID VS-20200
    /// @note description Light sensor detects night mode.
    /// @note min 0    max 2
    /// @note freq nan    unit DAY = 0 //, NIGHT = 1
    /// @deprecated lightSensorNightModeRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of lightSensorNightMode should be used instead.
    DW_DEPRECATED("lightSensorNightModeRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of lightSensorNightMode should be used instead.")
    uint8_t lightSensorNightModeRemoved;

    /// @note ID VS-20210
    /// @note description Light sensor request - turn on low beam.
    /// @note min 0    max 2
    /// @note freq nan    unit IDLE = 0 , LOBM_ON = 1, LOBM_OFF = 2
    /// @deprecated lightSensorRequestLowBeamRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of lightSensorRequestLowBeam should be used instead.
    DW_DEPRECATED("lightSensorRequestLowBeamRemoved is no longer supported and exists only for binary layout compatibility. REL_23_02 the enum version of lightSensorRequestLowBeam should be used instead.")
    uint8_t lightSensorRequestLowBeamRemoved;

    /// @note ID VS-21110
    /// @note description NCD2229: SideRearCamera_Heating_Request Rear Right Activate SCR_R Heating.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t cameraHeatingRequestRearRight;

    /// @note ID VS-21120
    /// @note description NCD2229: SideRearCamera_Heating_Request Rear Left Activate SCR_R Heating.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t cameraHeatingRequestRearLeft;

    /// @note ID VS-17210
    /// @note description This arbitration activation status signal shows if the arbitration overrode any of the driving functions on a per function basis. Each bit indicates if the corresponding ndas signal is manipulated/overridden by the arbitration. For a bit, a value of 0 indicates that the signal is not changed through arbitration, a value of 1 indicates that the signal will be changed through arbitration..
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    /// @note bitmask field: the expected data is a bitmask of combined bits.
    /// @note *** valid bits**: {
    ///                DW_VIO_ABT_ACTIVATION_STATUS_ACTIVATION_CTRL (bit#0),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_GEAR_COMMAND_RQ (bit#1),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_INTERACTION_MODE (bit#2),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_PERFORMANCE_RQ (bit#3),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_PREFILL_RQ (bit#4),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_REDUNDANCY_CHECK_RQ (bit#5),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_REFERENCE_INPUT (bit#6),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_REMAINING_DISTANCE_RQ (bit#7),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_SECURE_STATE_RQ (bit#8),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_SAFETY_LIMIT (bit#9),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_ACCELERATION_RQ (bit#10),
    ///                DW_VIO_ABT_ACTIVATION_STATUS_MAXIMUM_SPEED_RQ (bit#11)
    ///        }
    uint64_t abtActivationStatus;

    /// @note ID VS-10270
    /// @note description Indicates whether the driver requested a turn signal through stalk or other system.
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioTurnSignalDriverRequest turnSignalDriverRequest;

    /// @note ID VS-20220
    /// @note description boolean value to indicate the rear fog lamp status.
    /// @note TODO: Backend not yet implemented
    /// @note min None    max None
    /// @note freq nan    unit nan
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t rearFogLampStatus;

    /// @note ID VS-30108
    /// @note description Vehicle Speed numerically equal to cluster display..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit kph
    float32_t displayVehicleSpeed;

    /// @note ID VS-20161
    /// @note description State Function Siren Detection.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 6
    /// @note freq nan    unit unitless
    dwVioStateFunctionSirenDetection stateFunctionSirenDetection;

    /// @note ID VS-20171
    /// @note description Micro Siren Type.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 127
    /// @note freq nan    unit unitless
    dwVioMicroSirenType microSirenType;

    /// @note ID VS-20191
    /// @note description Light sensor 'tunnel' detected.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 2
    /// @note freq nan    unit unitless
    dwVioLightSensorTunnel lightSensorTunnel;

    /// @note ID VS-20201
    /// @note description Light sensor detects night mode.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 2
    /// @note freq nan    unit unitless
    dwVioLightSensorNightMode lightSensorNightMode;

    /// @note ID VS-20211
    /// @note description Light sensor request - turn on low beam.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 2
    /// @note freq nan    unit unitless
    dwVioLightSensorRequestLowBeam lightSensorRequestLowBeam;

    /// @note ID VS-20340
    /// @note description Second portion of Local time as per OEM.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 59
    /// @note freq nan    unit second
    int32_t currentTimeSecond;

    /// @note ID VS-20341
    /// @note description Minute portion of Local time as per OEM.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 59
    /// @note freq nan    unit minute
    int32_t currentTimeMinute;

    /// @note ID VS-20342
    /// @note description Hour portion of Local time as per OEM.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 23
    /// @note freq nan    unit hour
    int32_t currentTimeHour;

    /// @note ID VS-20343
    /// @note description day of the week, starting with Monday as 0..
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 6
    /// @note freq nan    unit unitless
    int32_t currentDay;

    /// @note ID VS-20071
    /// @note description Rain Level as an enumeration.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 6
    /// @note freq nan    unit unitless
    dwVioRainLevel rainLevel;

    /// @note ID VS-20270
    /// @note description Provides information if the attached trailer is a particular type..
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioAttachedTrailerType attachedTrailerType;
} dwVehicleIONonSafetyState;

/// @brief Validity Info for signals in dwVehicleIONonSafetyCommand
///
/// Contains a validity info value for each signal in dwVehicleIONonSafetyCommand
/// with the same name as the signal in the base structure.
typedef struct dwVehicleIONonSafetyCommandValidityInfo
{
    /// ValidityInfo for size
    dwSignalValidity size;

    /// ValidityInfo for mirrorFoldRequest
    dwSignalValidity mirrorFoldRequest;

    /// ValidityInfo for hazardFlasherRequest
    dwSignalValidity hazardFlasherRequest;

    /// ValidityInfo for headlightRequest
    dwSignalValidity headlightRequest;

    /// ValidityInfo for turnSignalRequestRemovedPlaceholder
    dwSignalValidity turnSignalRequestRemovedPlaceholder;

    /// ValidityInfo for timestamp_us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity timestamp_us;

    /// ValidityInfo for cameraFoldRequest
    dwSignalValidity cameraFoldRequest[2];

    /// ValidityInfo for emLinearVelocity
    dwSignalValidity emLinearVelocity[3];

    /// ValidityInfo for emLinearVelocityStdev
    dwSignalValidity emLinearVelocityStdev[3];

    /// ValidityInfo for emLinearAccel
    dwSignalValidity emLinearAccel[3];

    /// ValidityInfo for emAngularVelocity
    dwSignalValidity emAngularVelocity[3];

    /// ValidityInfo for emAngularAccel
    dwSignalValidity emAngularAccel[3];

    /// ValidityInfo for emOrientation
    dwSignalValidity emOrientation[3];

    /// ValidityInfo for emOrientationStdev
    dwSignalValidity emOrientationStdev[3];

    /// ValidityInfo for emTranslation
    dwSignalValidity emTranslation[3];

    /// ValidityInfo for emTimestamp
    dwSignalValidity emTimestamp;

    /// ValidityInfo for emStatus
    dwSignalValidity emStatus;

    /// ValidityInfo for emSensorPosition
    dwSignalValidity emSensorPosition[3];

    /// ValidityInfo for emStandStillWheelBased
    dwSignalValidity emStandStillWheelBased;

    /// ValidityInfo for emIntegrationHalted
    dwSignalValidity emIntegrationHalted;

    /// ValidityInfo for wiperFrontSecondaryRequest
    dwSignalValidity wiperFrontSecondaryRequest;

    /// ValidityInfo for wiperFrontRequest
    dwSignalValidity wiperFrontRequest;

    /// ValidityInfo for latCtrlTrajectoryConfidence
    dwSignalValidity latCtrlTrajectoryConfidence;

    /// ValidityInfo for cameraFWCCalibratedTimestamp
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity cameraFWCCalibratedTimestamp;

    /// ValidityInfo for cameraFWCCalibratedOrientation
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity cameraFWCCalibratedOrientation[3];

    /// ValidityInfo for cameraFWCCalibratedTranslation
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity cameraFWCCalibratedTranslation[3];

    /// ValidityInfo for cameraFWCCalibratedProgress
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity cameraFWCCalibratedProgress;

    /// ValidityInfo for cameraFWCCalibratedStatus
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwSignalValidity cameraFWCCalibratedStatus;

    /// ValidityInfo for hornOnRequest
    dwSignalValidity hornOnRequest;

    /// reserved
    dwSignalValidity reserved[63];
} dwVehicleIONonSafetyCommandValidityInfo;

/// Non-safety critical RoV commands.
/// Expected to be received by VAL in CCPLEX from AV Stack
typedef struct dwVehicleIONonSafetyCommand
{
    /// validity info of VehicleIONonSafetyCommand fields
    dwVehicleIONonSafetyCommandValidityInfo validityInfo;

    /// @note ID VS-10000
    /// @note description User need to set size = sizeof(itself).
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit nan
    uint32_t size;

    /// @note ID VS-11280
    /// @note description Request to fold / unfold the outside mirrors.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioMirrorFoldRequest mirrorFoldRequest;

    /// @note ID VS-11290
    /// @note description Request of emergency/hazard lights.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t hazardFlasherRequest;

    /// @note ID VS-11300
    /// @note description Request of low beam/high beam.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioHeadlightRequest headlightRequest;

    /// @note ID VS-11312
    /// @note description The turnsignalRequest field has been removed and this is now a placeholder to ensure structure layout compatibility.
    /// @note freq 100    unit unitless
    uint32_t turnSignalRequestRemovedPlaceholder;

    /// @note ID VS-17550
    /// @note description NonSafetyCommand Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t timestamp_us;

    /// @note ID VS-30231
    /// @note description State of SVS cameras (front/rear) folding procedure (FOLD, MOVING, UNFOLD).
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit unitless
    dwVioCameraFoldRequest cameraFoldRequest[2];

    /// @note ID VS-31010
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t emLinearVelocity[3];

    /// @note ID VS-31011
    /// @note description Vehicle linear velocity standard deviation aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s
    float32_t emLinearVelocityStdev[3];

    /// @note ID VS-31020
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m/s²
    float32_t emLinearAccel[3];

    /// @note ID VS-31030
    /// @note description Vehicle angular velocity aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad/s
    float32_t emAngularVelocity[3];

    /// @note ID VS-31040
    /// @note description Vehicle angular acceleration aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad/s
    float32_t emAngularAccel[3];

    /// @note ID VS-31110
    /// @note description Vehicle orientation (integrated, as Euler angles, since t0). Differently from VS-90020 (which is a signal that can be provided by certain types of IMUs as part of their internal state estimation, and is not used by egomotion), this is an output signal from egomotion estimator. Egomotion outputs the orientation of the vehicle, as NDAS “rig” coordinate frame, relative to a local horizontal, local vertical coordinate frame.  Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases    A Kalman filter and integrator combine information from wheel odometry (incl. steering), suspension and IMU into a 6 degrees of freedom motion estimation, also known as dead reckoning. The orientation representation in VS-31110 uses the DriveWorks Euler angle convention, described as:    - One rotation is applied about each of the axes (use of a Tait-Bryan convention)  - The order of the rotations is either of (both are equivalent):  -- z-y’-x’’: (1) yaw about original fixed z axis, (2) pitch about interim rotated y axis, (3) roll about interim rotated x axis  -- x-y-z: (1) roll about fixed x axis, (2) pitch about fixed y axis, (3) yaw about fixed z axis  All coordinate frames are right-handed.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t emOrientation[3];

    /// @note ID VS-31111
    /// @note description Vehicle orientation standard deviation (for each Euler angle) (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit rad
    float32_t emOrientationStdev[3];

    /// @note ID VS-31120
    /// @note description Vehicle translation (integrated, since t0). The translation representation in VS-31120 is the position of the vehicle in the local horizontal, local vertical coordinate frame defined at t=0. As egomotion is a dead reckoning solution, the position values should only be used and compared in a local sense; the motion of the vehicle between two points nearby in time (order: a couple seconds, tens of seconds, depending on the application and accuracy requirements). Egomotion will drift and interpreting the position signal as an absolute signal in a fixed coordinate frame will lead to incorrect use. Egomotion is not localization. Localization will provide an absolute position in a global coordinate system (e.g. WGS-84). Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m
    float64_t emTranslation[3];

    /// @note ID VS-31130
    /// @note description Timestamp of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit us
    dwTime_t emTimestamp;

    /// @note ID VS-31140
    /// @note description Validity of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioEmStatus emStatus;

    /// @note ID VS-31141
    /// @note description Egomotion Position of "virtual" sensor.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit m
    float32_t emSensorPosition[3];

    /// @note ID VS-31142
    /// @note description Egomotion standstill detected based on wheel ticks.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit unitless
    dwVioEmStandStillWheelBased emStandStillWheelBased;

    /// @note ID VS-31143
    /// @note description Egomotion Integration of Dead Reckoning halted  Integration is active while vehicle motion is detected (based on consensus from odometry signals). Integration is halted at standstill to avoid unwanted drifts..
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    /// @deprecated emIntegrationHalted is no longer supported and exists only for binary layout compatibility. REL_23_02
    DW_DEPRECATED("emIntegrationHalted is no longer supported and exists only for binary layout compatibility. REL_23_02")
    uint8_t emIntegrationHalted;

    /// @note ID VS-80120
    /// @note description request of the second windshield wiper, in case it is independend to primary.
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit Hz
    float32_t wiperFrontSecondaryRequest;

    /// @note ID VS-80130
    /// @note description request of the windshield wiper .
    /// @note TODO: Backend not yet implemented
    /// @note freq 10    unit Hz
    float32_t wiperFrontRequest;

    /// @note ID VS-17170
    /// @note description Planner / NDAS confidence about planned trajectory.
    /// @note TODO: Backend not yet implemented
    /// @note freq 100    unit Percent
    float32_t latCtrlTrajectoryConfidence;

    /// @note ID VS-20230
    /// @note description Timstamp belonging to the data message for the front wide camera calibration.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max none
    /// @note freq nan    unit ns
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwTime_t cameraFWCCalibratedTimestamp;

    /// @note ID VS-20231
    /// @note description Current orientation values from sensor calibration, in dw rig coordinate system [Roll, Pitch, Yaw].
    /// @note TODO: Backend not yet implemented
    /// @note min -180    max 180
    /// @note freq nan    unit deg
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    float32_t cameraFWCCalibratedOrientation[3];

    /// @note ID VS-20232
    /// @note description Current translation values from sensor calibration, in dw rig coordinate system.  x and y come are from nominals, z is calibrated height. [X, Y, Z].
    /// @note TODO: Backend not yet implemented
    /// @note min -21000000    max 21000000
    /// @note freq nan    unit m
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    float32_t cameraFWCCalibratedTranslation[3];

    /// @note ID VS-20233
    /// @note description Current front wide camera calibration progress, result is a valid accepted result when progress reaches 100..
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 100
    /// @note freq nan    unit Percent
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    float32_t cameraFWCCalibratedProgress;

    /// @note ID VS-20234
    /// @note description Current status of front wide camera calibration..
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
    dwVioCalibratedStatus cameraFWCCalibratedStatus;

    /// @note ID VS-20240
    /// @note description Horn shall be requested by ADH(L3), if warning of OTPs is necessary. (1 FALSE; 2 TRUE).
    /// @note TODO: Backend not yet implemented
    /// @note freq nan    unit unitless
    dwVioHornOnRequest hornOnRequest;
} dwVehicleIONonSafetyCommand;

#ifdef __cplusplus
}
#endif

/** @}
 */

#endif // DW_CONTROL_VEHICLEIO_VEHICLEIOVALSTRUCTURES_H_
