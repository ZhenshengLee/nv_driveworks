////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2015-2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_EGOMOTION_GLOBAL_GLOBALEGOMOTIONTYPES_H_
#define DW_EGOMOTION_GLOBAL_GLOBALEGOMOTIONTYPES_H_
// Generated by dwProto from global_egomotion_types.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Types.h>

#include <dw/core/base/GeoPoints.h>

#ifdef __cplusplus
extern "C" {
#endif

/// Max length allow for the identifier describing dwEgomotionResult, dwEgomotionPose and dwGlobalEgomotionResult
#define DW_EGOMOTIONRESULT_IDENTIFIER_MAX_LEN 16

/**
 * @brief Holds global egomotion state estimate.
 */
typedef struct dwGlobalEgomotionResult
{
    dwGeoPointWGS84 position;  //!< Position in WGS-84 reference system.
    dwQuaternionf orientation; //!< Rotation from rig coordinate system to ENU coordinate system.
    bool validPosition;        //!< Indicates validity of `position` estimate.
    bool validOrientation;     //!< Indicates validity of `orientation` estimate.
    dwTime_t timestamp;        //!< Estimate timestamp.
} dwGlobalEgomotionResult;

/**
 * @brief Holds global egomotion uncertainty estimate.
 */
typedef struct dwGlobalEgomotionUncertainty
{
    dwConfidence3f position;    //!< Position uncertainty (easting [m], northing [m], altitude [m]).
    dwConfidence3f orientation; //!< Orientation uncertainty (roll [rad], pitch [rad], yaw [rad]).
    bool validPosition;         //!< Indicates validity of `position` uncertainty estimate.
    bool validOrientation;      //!< Indicates validity of `orientation` uncertainty estimate.
    dwTime_t timestamp;         //!< Estimate timestamp.
} dwGlobalEgomotionUncertainty;

#ifdef __cplusplus
}
#endif

#endif // DW_EGOMOTION_GLOBAL_GLOBALEGOMOTIONTYPES_H_
