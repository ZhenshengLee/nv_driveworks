////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2022-2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_EGOMOTION_BASE_EGOMOTIONEXTRA_H_
#define DW_EGOMOTION_BASE_EGOMOTIONEXTRA_H_
// Generated by dwProto from egomotion_extra.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

//WARNING!!!
// Please don't use any type definition in this file.
// All of data types in this file are going to be modified and will not
// follow Nvidia deprecation policy.

/**
 * @file
 * <b>NVIDIA DriveWorks API: Additional Egomotion Methods</b>
 *
 * @b Description: This file defines additional APIs of egomotion module
 */

/**
 * @defgroup egomotion_extra_group API
 *
 * @brief Defines additional related API
 *
 * @{
 *
 * @ingroup egomotion_group
 */

#include <dw/core/base/Types.h>

#include <dw/egomotion/base/EgomotionTypes.h>
#include <dw/core/base/TypesExtra.h>
#include <dw/rig/Vehicle.h>

#ifdef __cplusplus
extern "C" {
#endif

/// Represents a collection of calibration maneuvers
#define DW_EGOMOTION_MANEUVER_MAX_ARRAY_SIZE 3

/// @brief  Defines the direction types of vehicle rolling / moving direction
typedef enum dwEgomotionDirectionTypes {
    DW_EGOMOTION_DIRECTION_UNKNOWN  = 0,
    DW_EGOMOTION_DIRECTION_FORWARD  = 1,
    DW_EGOMOTION_DIRECTION_BACKWARD = 2,
    DW_EGOMOTION_DIRECTION_STOP     = 3,
} dwEgomotionDirectionTypes;

/// @brief Defines the current state of an individual calibration
typedef enum dwEgomotionCalibrationState {
    /// The routine hasn't accepted an estimate
    DW_EGOMOTION_CALIBRATION_STATE_NOT_ACCEPTED = 0,

    /// The routine has accepted an estimate and calibration continues
    DW_EGOMOTION_CALIBRATION_STATE_ACCEPTED = 1,

    /// The routine has failed calibration
    DW_EGOMOTION_CALIBRATION_STATE_FAILED = 2,

    /// The calibration state is invalid (e.g. when a door with a sensor is open or a mirror is moving)
    DW_EGOMOTION_CALIBRATION_STATE_INVALID = 3,
} dwEgomotionCalibrationState;

/// @brief Enumeration of different motion types of an egomotion calibration maneuver
typedef enum dwEgomotionManeuverMotionType {
    DW_EGOMOTION_MANEUVER_MOTIONTYPE_UNSPECIFIED        = 0,
    DW_EGOMOTION_MANEUVER_MOTIONTYPE_FORWARD            = 1,
    DW_EGOMOTION_MANEUVER_MOTIONTYPE_ANY_TURN           = 2,
    DW_EGOMOTION_MANEUVER_MOTIONTYPE_STOP               = 3,
    DW_EGOMOTION_MANEUVER_MOTIONTYPE_FORWARD_AFTER_STOP = 4,
    DW_EGOMOTION_MANEUVER_MOTIONTYPE_FORCE32            = 0x7fffffff,
} dwEgomotionManeuverMotionType;

// This amounts to max(EgomotionManeuverMotionType) + 1, i.e. the required size of
// an array if these enum values are interpreted as array offsets.
#define DW_EGOMOTION_MANEUVER_MOTIONTYPE_COUNT 5

/// @brief Enumeration of different variant types of a calibration property
typedef enum dwEgomotionCalibrationPropertiesVariantType {
    DW_EGOMOTION_CALIBRATION_PROPERTY_VARIANT_UNKNOWN         = 0,
    DW_EGOMOTION_CALIBRATION_PROPERTY_VARIANT_REGULAR         = 1, //!< no special self-calibration condition applies
    DW_EGOMOTION_CALIBRATION_PROPERTY_VARIANT_FAST_ACCEPTANCE = 2, //!< self-calibration was initialized with previously-accepted value and is running in "fast-acceptance" mode
    DW_EGOMOTION_CALIBRATION_PROPERTY_VARIANT_BOOTSTRAPPED    = 3, //!< calibration values are initialized with previously-accepted value, but self-calibration is *not* running
    DW_EGOMOTION_CALIBRATION_PROPERTY_VARIANT_FORCE32         = 0x7fffffff,
} dwEgomotionCalibrationPropertiesVariantType;

/// @brief Enumeration of different initialization types of a calibration property
typedef enum dwEgomotionCalibrationPropertiesInitializationType {
    DW_EGOMOTION_CALIBRATION_PROPERTY_INITIALIZATION_UNKNOWN             = 0,
    DW_EGOMOTION_CALIBRATION_PROPERTY_INITIALIZATION_PREVIOUSLY_ACCEPTED = 1, //!< calibration was initialized with previously-accepted values
    DW_EGOMOTION_CALIBRATION_PROPERTY_INITIALIZATION_FORCE32             = 0x7fffffff,
} dwEgomotionCalibrationPropertiesInitializationType;

typedef struct dwEgomotionVehicleIOState
{
    float32_t wheelSpeed[DW_VEHICLE_NUM_WHEELS];
} dwEgomotionVehicleIOState;

/// @brief Holds values required for reconstruction of Egomotion history.
typedef struct dwEgomotionPose
{
    dwEgomotionResult pose;
    dwEgomotionUncertainty uncertainty;
    dwVector3d positionLocalFrame;
    dwQuaternionf rotationLocalFrame;
    dwEgomotionVehicleIOState ioState;
    dwTransformation3f rigToChassis;
    dwTransformation3f rigToRoadPlane;
    dwTransformation3f rigToTrailer;
    int64_t extraFlags;
    dwVector3f rawLinearVelocity;
    dwVector3f gyroscopeBias;
    dwEgomotionDirectionTypes vehicleRollingDirection;
    dwVector3f accelerometerBias;
} dwEgomotionPose;

/// @brief Defines the current status of an individual calibration
typedef struct dwEgomotionCalibrationStatus
{
    /// Flag indicating whether a calibration routine is running
    bool started;

    /// The current state of a calibration routine
    dwEgomotionCalibrationState state;

    /// The current calibration percentage complete status. Valid percentages are in the range [0,1]
    float32_t percentageComplete;
} dwEgomotionCalibrationStatus;

/// @brief Definition of a single maneuver's expected motion and optional motion properties
typedef struct dwEgomotionManeuverMotion
{
    dwEgomotionManeuverMotionType type;               //!< represents the expected motion type of the maneuver
    dwOptionalf targetDurationSec;                    //!< if valid, represents the expected maneuver duration (in seconds)
    dwOptionalf targetSpeedMeterPerSec;               //!< if valid, represents the expected motion speed (meters per second)
    dwOptionalf targetAccelerationMeterPerSecSquared; //!< if valid, represents the expected motion acceleration (meters per second^2)
} dwEgomotionManeuverMotion;

/// @brief  Struct to collect all status information associated with a maneuver
typedef struct dwEgomotionManeuverStatus
{
    bool fulfilled; //!< if false, the associated maneuver's motion is still required for a routine to complete its estimation
} dwEgomotionManeuverStatus;

/// @brief Definition of static calibration properties
typedef struct dwEgomotionCalibrationProperties
{
    dwEgomotionCalibrationPropertiesVariantType variant;
    dwEgomotionCalibrationPropertiesInitializationType initialization;
} dwEgomotionCalibrationProperties;

/// @brief Aggregation struct of a calibration maneuver motion description together with its current runtime status properties inferred from a calibration routine
typedef struct dwEgomotionManeuver
{
    dwEgomotionManeuverMotion motion; //!< the motion of the maneuver
    dwEgomotionManeuverStatus status; //!< the status of the maneuver
} dwEgomotionManeuver;

/// @brief Struct to represent a collection of calibration maneuvers
typedef struct dwEgomotionCalibrationManeuverArray
{
    dwEgomotionManeuver maneuvers[DW_EGOMOTION_MANEUVER_MAX_ARRAY_SIZE]; //!< the different maneuvers of the collection
    size_t size;
} dwEgomotionCalibrationManeuverArray;

/// @brief Struct representing wheel radius calibration.
typedef struct dwEgomotionCalibratedWheelRadii
{
    //! Current calibrated wheel radii values.
    float32_t currentWheelRadius[DW_VEHICLE_NUM_WHEELS];

    //! Calibration procedure state.
    dwEgomotionCalibrationState calibrationState;

    //! Timestamp of the latest input data contributing to the calibration result.
    dwTime_t timestamp;

    //! Validity of the message.
    dwValidityStatus validity;
} dwEgomotionCalibratedWheelRadii;

#ifdef __cplusplus
}
#endif

/** @}
 */

#endif // DW_EGOMOTION_BASE_EGOMOTIONEXTRA_H_
