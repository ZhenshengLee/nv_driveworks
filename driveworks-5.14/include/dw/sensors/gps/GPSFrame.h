////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2016-2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_SENSORS_GPS_GPSFRAME_H_
#define DW_SENSORS_GPS_GPSFRAME_H_
// Generated by dwProto from gps_frame.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Exports.h>
#include <dw/core/base/Types.h>

#include <dw/core/signal/SignalStatus.h>

#ifdef __cplusplus
extern "C" {
#endif

/// @brief Each flag shows if that value is valid in this GPS frame.
typedef enum dwGPSFlags {
    /// @deprecated Use dwGPSFrame.validityInfo.latitude instead
    DW_GPS_LAT DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.latitude instead") = 1 << 0, //!< Value of dwGPSFrame.latitude is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.longitude instead
    DW_GPS_LON DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.longitude instead") = 1 << 1, //!< Value of dwGPSFrame.longitude is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.altitude instead
    DW_GPS_ALT DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.altitude instead") = 1 << 2, //!< Value of dwGPSFrame.altitude is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.course instead
    DW_GPS_COURSE DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.course instead") = 1 << 3, //!< Value of dwGPSFrame.course is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.speed instead
    DW_GPS_SPEED DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.speed instead") = 1 << 4, //!< Value of dwGPSFrame.speed is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.climb instead
    DW_GPS_CLIMB DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.climb instead") = 1 << 5, //!< Value of dwGPSFrame.climb is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.hdop instead
    DW_GPS_HDOP DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.hdop instead") = 1 << 6, //!< Value of dwGPSFrame.hdop is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.vdop instead
    DW_GPS_VDOP DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.vdop instead") = 1 << 7, //!< Value of dwGPSFrame.vdop is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.hacc instead
    DW_GPS_HACC DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.hacc instead") = 1 << 8, //!< Value of dwGPSFrame.hacc is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.vacc instead
    DW_GPS_VACC DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.vacc instead") = 1 << 9, //!< Value of dwGPSFrame.vacc is valid.

    /// @deprecated Use dwGPSFrame.validityInfo.mode instead
    DW_GPS_MODE DW_DEPRECATED_ENUM("Use dwGPSFrame.validityInfo.mode instead") = 1 << 10, //!< Value of dwGPSFrame.gpsMode is valid.
    DW_GPS_FLAGS_FORCE32                                                       = 0x7fffffff,
} dwGPSFlags;

/// @brief The GPS mode gives the status of the GNSS data. Note that modes 1-7 are
/// increasing in accuracy. Modes 8 and 9 are not quite as good as 6 and 7, respectively.
typedef enum dwGPSMode {
    /// GPS mode unknown. The device cannot or has not reported the mode.
    DW_GPS_MODE_UNKNOWN = 0,

    /// GPS mode invalid. This GPS data cannot be used.
    DW_GPS_MODE_INVALID_GPS = 1,

    /// GPS mode dead reckoning. Device relying on IMU alone for updates.
    DW_GPS_MODE_DEAD_RECKONING = 2,

    /// GPS mode stand alone. No RTK or PPP correction.
    DW_GPS_MODE_STAND_ALONE = 3,

    /// GPS mode precise point. No RTK or PPP correction.
    DW_GPS_MODE_PRECISE_POINT = 4,

    /// GPS mode code differential. No RTK or PPP correction.
    DW_GPS_MODE_CODE_DIFFERENTIAL = 5,

    /// GPS mode RTK float
    DW_GPS_MODE_RTK_FLOAT = 6,

    /// GPS mode RTK fixed. This is the highest accuracy mode.
    DW_GPS_MODE_RTK_FIXED = 7,

    /// GPS mode PPP converging. Using PPP, but solution has not finished converging, so the data is not yet as accurate as it can be.
    DW_GPS_MODE_PPP_CONVERGING = 8,

    /// GPS mode PPP converged. Most accurate mode for using PPP.
    DW_GPS_MODE_PPP_CONVERGED = 9,
    DW_GPS_MODE_FORCE32       = 0x7fffffff,
} dwGPSMode;

/// @brief GPS satellite fix status.
typedef enum dwGPSFixStatus {
    /// No fix
    DW_GPS_FIX_STATUS_NO_FIX = 0,

    /// 2D fix
    DW_GPS_FIX_STATUS_2D_FIX = 1,

    /// 3D fix
    DW_GPS_FIX_STATUS_3D_FIX  = 2,
    DW_GPS_FIX_STATUS_FORCE32 = 0x7fffffff,
} dwGPSFixStatus;

/// @brief GPS timestamp quality.
typedef enum dwGPSTimestampQuality {
    /// Not Initialized. still initializing
    DW_GPS_TIMESTAMP_QUALITY_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_GPS_TIMESTAMP_QUALITY_OK = 1,

    /// Synchronization lost.
    DW_GPS_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_GPS_TIMESTAMP_QUALITY_FORCE32   = 0x7fffffff,
} dwGPSTimestampQuality;

/// @brief This structure contains validity of each signal provided by GPS sensors.
/// Access fields in this structure with APIs provided by SignalStatus.h
typedef struct dwGPSSignalValidityInfo
{
    /// Validity of timestamp signal
    dwSignalValidity timestamp_us;

    /// Validity of latitude signal
    dwSignalValidity latitude;

    /// Validity of longitude signal
    dwSignalValidity longitude;

    /// Validity of altitude signal
    dwSignalValidity altitude;

    /// Validity of course signal
    dwSignalValidity course;

    /// Validity of speed signal
    dwSignalValidity speed;

    /// Validity of climb signal
    dwSignalValidity climb;

    /// Validity of horizontal dilusion of precision signal
    dwSignalValidity hdop;

    /// Validity of vertical dilusion of precision signal
    dwSignalValidity vdop;

    /// Validity of positional dilusion of precision signal
    dwSignalValidity pdop;

    /// Validity of horizontal accuracy of solution signal
    dwSignalValidity hacc;

    /// Validity of vertical accuracy of solution signal
    dwSignalValidity vacc;

    /// Validity of UTC time signal
    dwSignalValidity utcTimeUs;

    /// Validity of satellite count signal
    dwSignalValidity satelliteCount;

    /// Validity of 2D or 3D fix status signal
    dwSignalValidity fixStatus;

    /// Validity of timestamp quality signal
    dwSignalValidity timestampQuality;

    /// Validity of GPS mode signal
    dwSignalValidity mode;

    /// Reserved space
    dwSignalValidity reserved[63];
} dwGPSSignalValidityInfo;

/// @brief A GPS packet containing localization information.
/// Flags are used to define information available in this frame.
typedef struct dwGPSFrame
{

    /// Signal validity information
    dwGPSSignalValidityInfo validityInfo;

    /// @note ID VS-91010
    /// @note description Timestamp of the message when first received.
    /// @note min nan    max nan
    /// @note freq 4    unit us
    dwTime_t timestamp_us;

    /// @note ID VS-91020
    /// @note description Latitude in WGS-84.
    /// @note min nan    max nan
    /// @note freq 4    unit deg
    float64_t latitude;

    /// @note ID VS-91030
    /// @note description Longitude in WGS-84.
    /// @note min nan    max nan
    /// @note freq 4    unit deg
    float64_t longitude;

    /// @note ID VS-91040
    /// @note description Altitude over WGS-84 ellipsoid.
    /// @note min nan    max nan
    /// @note freq 4    unit m
    float64_t altitude;

    /// @note ID VS-91050
    /// @note description Course relative to true north.
    /// @note min nan    max nan
    /// @note freq 4    unit deg
    float64_t course;

    /// @note ID VS-91060
    /// @note description Horizontal speed.
    /// @note min nan    max nan
    /// @note freq 4    unit m/s
    float64_t speed;

    /// @note ID VS-91070
    /// @note description Vertical speed.
    /// @note min nan    max nan
    /// @note freq 4    unit m/s
    float64_t climb;

    /// @note ID VS-91080
    /// @note description Horizontal Dilution of Precision.
    /// @note min nan    max nan
    /// @note freq 4    unit unitless
    float64_t hdop;

    /// @note ID VS-91090
    /// @note description Vertical Dilution of Precision.
    /// @note min nan    max nan
    /// @note freq 4    unit unitless
    float64_t vdop;

    /// @note ID VS-91100
    /// @note description Position Dilution of Precision.
    /// @note min nan    max nan
    /// @note freq 4    unit unitless
    float64_t pdop;

    /// @note ID VS-91110
    /// @note description Horizontal Accuracy of Solution.
    /// @note min nan    max nan
    /// @note freq 4    unit m
    float64_t hacc;

    /// @note ID VS-91120
    /// @note description Vertical Accuracy of Solution.
    /// @note min nan    max nan
    /// @note freq 4    unit m
    float64_t vacc;

    /// @note ID VS-91130
    /// @note description UTC time.
    /// @note min nan    max nan
    /// @note freq 4    unit us
    dwTime_t utcTimeUs;

    /// @note ID VS-91140
    /// @note description Number of satellites in view.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 4    unit unitless
    uint8_t satelliteCount;

    /// @note ID VS-91150
    /// @note description 2D or 3D fix.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 4    unit unitless
    /// @note *** valid values**: {
    ///                DW_GPS_FIX_STATUS_NO_FIX,
    ///                DW_GPS_FIX_STATUS_2D_FIX,
    ///                DW_GPS_FIX_STATUS_3D_FIX
    ///        }
    dwGPSFixStatus fixStatus;

    /// @note ID VS-91170
    /// @note description GNSS Timestamp Quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 4    unit unitless
    /// @note *** valid values**: {
    ///                DW_GPS_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_GPS_TIMESTAMP_QUALITY_OK,
    ///                DW_GPS_TIMESTAMP_QUALITY_SYNC_LOST,
    ///        }
    dwGPSTimestampQuality timestampQuality;

    /// @note ID VS-91175
    /// @note description GPS mode.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 4    unit unitless
    /// @note *** valid values**: {
    ///                DW_GPS_MODE_UNKNOWN,
    ///                DW_GPS_MODE_INVALID_GPS,
    ///                DW_GPS_MODE_DEAD_RECKONING,
    ///                DW_GPS_MODE_STAND_ALONE,
    ///                DW_GPS_MODE_PRECISE_POINT,
    ///                DW_GPS_MODE_CODE_DIFFERENTIAL,
    ///                DW_GPS_MODE_RTK_FLOAT,
    ///                DW_GPS_MODE_RTK_FIXED,
    ///                DW_GPS_MODE_PPP_CONVERGING,
    ///                DW_GPS_MODE_PPP_CONVERGED
    ///        }
    dwGPSMode mode;

    /// UTC time as provided in the GPS package [hhmmss.sss] (null terminated).
    /// @deprecated utcTime is deprecated and will be removed soon. Please use utcTime instead
    DW_DEPRECATED("utcTime is deprecated and will be removed soon. Please use utcTime instead")
    char8_t utcTime[16];

    /// UTC date as provided in the GPS package [ddmmyy] (null terminated).
    /// @deprecated utcDate is deprecated and will be removed soon. Please use utcTime instead
    DW_DEPRECATED("utcDate is deprecated and will be removed soon. Please use utcTime instead")
    char8_t utcDate[16];

    /// The flags to show which values are valid in this GPS frame.
    /// @deprecated flags is deprecated and will be removed soon. Please use struct validityInfo and APIs introduced in GPSGetterSetter.h instead
    DW_DEPRECATED("flags is deprecated and will be removed soon. Please use struct validityInfo and APIs introduced in GPSGetterSetter.h instead")
    uint32_t flags;

    /// GPS mode
    /// @deprecated gpsMode is deprecated and will be removed soon. Please use mode instead
    DW_DEPRECATED("gpsMode is deprecated and will be removed soon. Please use mode instead")
    dwGPSMode gpsMode;

    /// Reserved space
    uint8_t reserved[468];
} dwGPSFrame;

#ifdef __cplusplus
}
#endif

#endif // DW_SENSORS_GPS_GPSFRAME_H_
