/////////////////////////////////////////////////////////////////////////////////////////
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS" NVIDIA MAKES
// NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
//
// NVIDIA CORPORATION & AFFILIATES assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA CORPORATION & AFFILIATES. No third party distribution is allowed unless
// expressly authorized by NVIDIA. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA CORPORATION & AFFILIATES products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA CORPORATION & AFFILIATES.
//
// SPDX-FileCopyrightText: Copyright (c) 2016-2021 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: LicenseRef-NvidiaProprietary
//
// NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
// property and proprietary rights in and to this material, related
// documentation and any modifications thereto. Any use, reproduction,
// disclosure or distribution of this material and related documentation
// without an express license agreement from NVIDIA CORPORATION or
// its affiliates is strictly prohibited.
//
// Parser Version: 0.7.5
// SSM Version:    0.9.1
//
/////////////////////////////////////////////////////////////////////////////////////////

/**
* The following file has been generated by SSM's parser.
* Please do not manually modify the files
*/

#include <sm6/SSM.hpp>

namespace SystemStateManager
{

namespace SM6
{

void SSM::initialize()
{
    SSM_LOG("Initializing SM6");
    isStateMachineActive = true;
    initStateMachine();
    ENTER();
}

bool SSM::executeLockedCommand(SystemStateManager::SM6::LockSteppedCommands command)
{
    return executeLockSteppedCommand((int)command);
}

bool SSM::registerLockedCommand(SystemStateManager::SM6::LockSteppedCommands command, SSMFunctionHandler ptr)
{
    return registerLockSteppedFunction((int)command, ptr);
}

void SSM::executeStateMachine()
{
    runnableHist.startTimer();
    if (mySMPtr->getCurrentState() == ENTER_STATE)
    {
        bool isStateChangeValid = false;
        if (executeResetHandlerFlag)
        {
            if (resetFunctionHandlerPtr)
            {
                resetFunctionHandlerPtr(this);
            }
            executeResetHandlerFlag = false;
        }
        ENTER();
        isStateChangeValid = mySMPtr->changeStateByString(mySMPtr->getStartState());
        if (!isStateChangeValid)
        {
            runnableHist.endTimer(SSM_LATENCY_THRESHOLD);
            SSM_ERROR("Invalid state transition requested: " + mySMPtr->getCurrentState() + " -> " + mySMPtr->getStartState());
            return;
        }
        broadCastStateChange(name, mySMPtr->getStartState());
        activateChildren(mySMPtr);
    }

    if (mySMPtr->getCurrentState() == EXIT_STATE)
    {
        EXIT();
    }

    if (mySMPtr->getCurrentState() == PRE_INIT_STATE)
    {
        PRE_INIT();
    }

    if (mySMPtr->getCurrentState() == INIT_STATE)
    {
        INIT();
    }

    if (mySMPtr->getCurrentState() == POST_INIT_STATE)
    {
        POST_INIT();
    }

    if (mySMPtr->getCurrentState() == PRE_READY_STATE)
    {
        PRE_READY();
    }

    if (mySMPtr->getCurrentState() == READY_STATE)
    {
        READY();
    }

    if (mySMPtr->getCurrentState() == SSM_SSM_Degrade_str)
    {
        Degrade();
    }
    else if (mySMPtr->getCurrentState() == SSM_SSM_NormalOperation_str)
    {
        NormalOperation();
    }
    else if (mySMPtr->getCurrentState() == SSM_SSM_Standby_str)
    {
        Standby();
    }
    else if (mySMPtr->getCurrentState() == SSM_SSM_UrgentOperation_str)
    {
        UrgentOperation();
    }
    std::string currState = mySMPtr->getCurrentState();
    bool printLatency     = true;
    if (currState == "PRE_INIT_STATE" ||
        currState == "INIT_STATE" ||
        currState == "POST_INIT_STATE" ||
        currState == "PRE_READY_STATE" ||
        currState == "READY_STATE")
    {
        printLatency = false;
    }
    runnableHist.endTimer(SSM_LATENCY_THRESHOLD, printLatency);
}

bool SSM::setupTreeHierarchy(StateMachineVector& smv, StateMachinePtr& hPtr)
{
    return setupHierarchy(smv, hPtr);
}

void SSM::printClientHistogram()
{
    runnableHist.printHistogram("executeStateMachine");
}

void SSM::initLockSteppedCommands()
{
    for (int index = 0; index < (int)SystemStateManager::SM6::LockSteppedCommands::MAX_CMD; index++)
    {
        addLockSteppedCommand(index);
    }
}

bool SSM::changeState(SSMStates e)
{
    return changeStateByString(enumToStr(e));
}

int SSM::sendDataByID(SSMStates e, void *data, int datalen, std::string dataStructID)
{
    return sendData(enumToStr(e), data, datalen, dataStructID);
}

const char* SSM::enumToStr(SSMStates e)
{
    switch(e)
    {
        case SSMStates::Degrade: return SSM_SSM_Degrade_str;
        case SSMStates::NormalOperation: return SSM_SSM_NormalOperation_str;
        case SSMStates::Standby: return SSM_SSM_Standby_str;
        case SSMStates::UrgentOperation: return SSM_SSM_UrgentOperation_str;
    }
    return "";
}

SSMStates SSM::strToEnum(std::string state)
{
    static FixedMap<std::string, SSMStates> stringToState
    {
        {SSM_SSM_Degrade_str, SSMStates::Degrade},
        {SSM_SSM_NormalOperation_str, SSMStates::NormalOperation},
        {SSM_SSM_Standby_str, SSMStates::Standby},
        {SSM_SSM_UrgentOperation_str, SSMStates::UrgentOperation},
    };

    auto it = stringToState.find(state);
    if(it != stringToState.end())
    {
        return it->second;
    }
    else
    {
        return SSMStates::NULL_STATE;
    }
}


SSMStates SSM::getState()
{
    return strToEnum(mySMPtr->getCurrentState());
}

}
}
