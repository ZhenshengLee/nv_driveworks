/////////////////////////////////////////////////////////////////////////////////////////
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS" NVIDIA MAKES
// NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
//
// NVIDIA CORPORATION & AFFILIATES assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA CORPORATION & AFFILIATES. No third party distribution is allowed unless
// expressly authorized by NVIDIA. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA CORPORATION & AFFILIATES products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA CORPORATION & AFFILIATES.
//
// SPDX-FileCopyrightText: Copyright (c) 2016-2021 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: LicenseRef-NvidiaProprietary
//
// NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
// property and proprietary rights in and to this material, related
// documentation and any modifications thereto. Any use, reproduction,
// disclosure or distribution of this material and related documentation
// without an express license agreement from NVIDIA CORPORATION or
// its affiliates is strictly prohibited.
//
// Parser Version: 0.7.5
// SSM Version:    0.9.1
//
/////////////////////////////////////////////////////////////////////////////////////////

/**
* The following file has been generated by SSM's parser.
* Please do not manually modify the files
*/


#pragma once

#include <sm1/SSMNames.hpp>
#include <ssm/SMBaseClass.hpp>
#include <ssm/SSMHistogram.hpp>

namespace SystemStateManager
{

namespace SM1
{

class SSMClone : public SMBaseClass
{
public:
    ~SSMClone(){};
    SSMClone(std::string myname)
    {
        name = myname;
        runnableHist.setName(name);
        initLockSteppedCommands();
    }
    virtual void initStateMachine(){};
    void executeStateMachine() override;
    bool registerFunctionHandler(std::string name, SSMFunctionHandler ptr);
    void runInitPhase(int micros);
    void printClientHistogram() override;
    void setRunnableId(const char* runnableId)
    {
        m_runnableId = runnableId;
    }
    const std::string& getRunnableId()
    {
        return m_runnableId;
    }
    // API to register LockedStepCommands
    bool registerLockedCommand(SystemStateManager::SM1::LockSteppedCommands command, SSMFunctionHandler ptr);


private:
    SSMHistogram runnableHist{};
    int totalFuncs{0};
    std::string m_runnableId;
    SSMFunctionHandlerVector funcVector;
    SSMFunctionHandler enterHandlerPtr{};
    SSMFunctionHandler exitHandlerPtr{};
    SSMFunctionHandler pre_initHandlerPtr{};
    SSMFunctionHandler initHandlerPtr{};
    SSMFunctionHandler postHandlerPtr{};
    SSMFunctionHandler preReadyHandlerPtr{};
    SSMFunctionHandler readyHandlerPtr{};
    SSMFunctionHandler preSwitchHandlerPtr{};
    SSMFunctionHandler postSwitchHandlerPtr{};
    bool setupTreeHierarchy(StateMachineVector& smv, StateMachinePtr& hPtr) override;
    void initLockSteppedCommands();
    void generateLockedSteppedFunctions();
};
}
}
