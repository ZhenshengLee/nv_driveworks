/////////////////////////////////////////////////////////////////////////////////////////
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS" NVIDIA MAKES
// NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
//
// NVIDIA CORPORATION & AFFILIATES assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA CORPORATION & AFFILIATES. No third party distribution is allowed unless
// expressly authorized by NVIDIA. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA CORPORATION & AFFILIATES products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA CORPORATION & AFFILIATES.
//
// SPDX-FileCopyrightText: Copyright (c) 2016-2021 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: LicenseRef-NvidiaProprietary
//
// NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
// property and proprietary rights in and to this material, related
// documentation and any modifications thereto. Any use, reproduction,
// disclosure or distribution of this material and related documentation
// without an express license agreement from NVIDIA CORPORATION or
// its affiliates is strictly prohibited.
//
// Parser Version: 0.7.5
// SSM Version:    0.9.1
//
/////////////////////////////////////////////////////////////////////////////////////////

/**
* The following file has been generated by SSM's parser.
* Please do not manually modify the files
*/

#include <sm1/SSMClone.hpp>

namespace SystemStateManager
{

namespace SM1
{

extern bool setupHierarchy(StateMachineVector& smv, StateMachinePtr& hPtr);

void SSMClone::executeStateMachine()
{
    runnableHist.startTimer();
    if (mySMPtr->getCurrentState() == ENTER_STATE)
    {
        bool isStateChangeValid = false;
        if (executeResetHandlerFlag)
        {
            if (resetFunctionHandlerPtr)
            {
                resetFunctionHandlerPtr(this);
            }
            executeResetHandlerFlag = false;
        }
        if (enterHandlerPtr)
        {
            enterHandlerPtr(this);
        }
        isStateChangeValid = mySMPtr->changeStateByString(mySMPtr->getStartState());
        if (!isStateChangeValid)
        {
            runnableHist.endTimer(SSM_LATENCY_THRESHOLD);
            SSM_ERROR("Invalid state transition requested: " + mySMPtr->getCurrentState() + " -> " + mySMPtr->getStartState());
            return;
        }
        broadCastStateChange(name, mySMPtr->getStartState());
        activateChildren(mySMPtr);
    }

    if (mySMPtr->getCurrentState() == EXIT_STATE && exitHandlerPtr)
    {
        exitHandlerPtr(this);
    }

    if (mySMPtr->getCurrentState() == PRE_INIT_STATE && pre_initHandlerPtr)
    {
        pre_initHandlerPtr(this);
    }

    if (mySMPtr->getCurrentState() == INIT_STATE && initHandlerPtr)
    {
        initHandlerPtr(this);
    }

    if (mySMPtr->getCurrentState() == POST_INIT_STATE && postHandlerPtr)
    {
        postHandlerPtr(this);
    }

    if (mySMPtr->getCurrentState() == PRE_READY_STATE && preReadyHandlerPtr)
    {
        preReadyHandlerPtr(this);
    }

    if (mySMPtr->getCurrentState() == READY_STATE && readyHandlerPtr)
    {
        readyHandlerPtr(this);
    }

    if (mySMPtr->getCurrentState() == INIT_CLONE_STATE)
    {
        changeStateByString(headPtr->getCurrentState());
    }

    std::string cs = mySMPtr->getCurrentState();
    for (int index = 0; index < totalFuncs; index++)
    {
        if (funcVector.getObject(index).stateName == cs)
        {
            funcVector.getObject(index).handler(this);
            break;
        }
    }
    std::string currState = mySMPtr->getCurrentState();
    bool printLatency     = true;
    if (currState == "PRE_INIT_STATE" ||
        currState == "INIT_STATE" ||
        currState == "POST_INIT_STATE" ||
        currState == "PRE_READY_STATE" ||
        currState == "READY_STATE")
    {
        printLatency = false;
    }
    runnableHist.endTimer(SSM_LATENCY_THRESHOLD, printLatency);
}

bool SSMClone::registerFunctionHandler(std::string name, SSMFunctionHandler ptr)
{
    isFunctionHandlerUpdated = true;
    if (registerStdFunctionHandler(name, ptr))
    {
        return true;
    }
    if (name == ENTER_STATE)
    {
        enterHandlerPtr = ptr;
    }
    else if (name == EXIT_STATE)
    {
        exitHandlerPtr = ptr;
    }
    else if (name == PRE_INIT_STATE)
    {
        pre_initHandlerPtr = ptr;
    }
    else if (name == INIT_STATE)
    {
        initHandlerPtr = ptr;
    }
    else if (name == SHUTDOWN_STATE)
    {
        shutdownHandlerPtr = ptr;
    }
    else if (name == PRE_SHUTDOWN_STATE)
    {
        preShutdownHandlerPtr = ptr;
    }
    else if (name == POST_INIT_STATE)
    {
        postHandlerPtr = ptr;
    }
    else if (name == PRE_READY_STATE)
    {
        preReadyHandlerPtr = ptr;
    }
    else if (name == READY_STATE)
    {
        readyHandlerPtr = ptr;
    }
    else
    {
        for (int index = 0; index < totalFuncs; index++)
        {
            if (funcVector.getObject(index).stateName == name)
            {
                return false;
            }
        }
        SSMFunctionHandlerStruct st;
        st.stateName = name;
        st.handler   = ptr;
        funcVector.push_back(st);
        totalFuncs++;
    }
    return true;
}

void SSMClone::runInitPhase(int micros)
{
    initHierarchy();
    while (!isStartStateMachineMsgReceived())
    {
        sleep(1);
    }
    initClientComm();
    while (!isSMReadyForScheduler())
    {
        runStateMachine();
        usleep(micros);
    }
}

bool SSMClone::setupTreeHierarchy(StateMachineVector& smv, StateMachinePtr& hPtr)
{
    return setupHierarchy(smv, hPtr);
}

void SSMClone::printClientHistogram()
{
    runnableHist.printHistogram("executeStateMachine");
}

void SSMClone::initLockSteppedCommands()
{
    for (int index = 0; index < (int)SystemStateManager::SM1::LockSteppedCommands::MAX_CMD; index++)
    {
        addLockSteppedCommand(index);
    }
}
bool SSMClone::registerLockedCommand(SystemStateManager::SM1::LockSteppedCommands command, SSMFunctionHandler ptr)
{
    return registerLockSteppedFunction((int)command, ptr);
}
}
}