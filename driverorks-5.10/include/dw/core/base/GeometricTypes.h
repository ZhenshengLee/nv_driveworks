////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2022 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef GEOMETRICTYPES_H_
#define GEOMETRICTYPES_H_
// Generated by dwProto from geometric_types.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

// RFD - MISRAC 2012 Rule 1.4: Using emergent head file (stdalign.h)
// coverity[misra_c_2012_rule_1_4_violation]
#include <stdalign.h>

#include "MatrixTypes.h"
#include "BasicTypes.h"

#ifdef __cplusplus
extern "C" {
#endif

/// @brief A generic side enum definition to improve consistency of objects with a 'side' concept
/// Usage: define enum entity e.g. DW_MAPS_SIDE_RIGHT = DW_SIDE_RIGHT
typedef enum dwSide {
    DW_SIDE_LEFT   = 0,
    DW_SIDE_RIGHT  = 1,
    DW_SIDE_CENTER = 2,
} dwSide;

/// @brief Defines a rectangle.
typedef struct dwRect
{
    //<! x coordinate.
    alignas(8) int32_t x;

    //<! y coordinate.
    int32_t y;

    //<! Rectangle width.
    int32_t width;

    //<! Rectangle height.
    int32_t height;
} dwRect;

/// @brief Defines a rectangle with floating point numbers.
//# sergen(generate)
typedef struct dwRectf
{
    //<! Specifies the x coordinate.
    alignas(8) float32_t x;

    //<! Specifies the y coordinate.
    float32_t y;

    //<! Rectangle width.
    float32_t width;

    //<! Rectangle height.
    float32_t height;
} dwRectf;

/// @brief Defines an AABB bounding box 3D.
/// An AABB bounding box as known as axis-aligned bounding box is simply a rectangular parallelepiped
/// whose faces are each perpendicular to one of the basis vectors.
/// Use 2 opposite vertices(AA and BB) to define the AABB bounding box since it's axis-aligned.
typedef struct dwBbox3Df
{
    dwVector3f aa; //!< Point AA, one of vertices of a AABB bounding box.
    dwVector3f bb; //!< Point BB, opposite vertex of AA.
} dwBbox3Df;

/// @brief Defines an AABB bounding box 2D.
/// An AABB bounding box as known as axis-aligned bounding box is simply a rectangle
/// whose lines are each perpendicular to one of the basis vectors.
/// Use 2 opposite vertices(AA and BB) to define the AABB bounding box since it's axis-aligned.
typedef struct dwBbox2Df
{
    dwVector2f aa; //!< Point AA, one of vertices of a AABB bounding box.
    dwVector2f bb; //!< Point BB, opposite vertex of AA.
} dwBbox2Df;

/// @brief Defines a single-precision line segment.
typedef struct dwLine3f
{
    //<! p[0] start, p[1] end
    dwVector3f p[2];
    uint32_t pCount; //!< Stores the occupied/valid length of p
} dwLine3f;

/// @brief Defines a double-precision line segment.
typedef struct dwLine3d
{
    //<! p[0] start, p[1] end
    dwVector3d p[2];
    uint32_t pCount; //!< Stores the occupied/valid length of p
} dwLine3d;

/// @brief Defines a single-precision quaternion.
//# sergen(generate)
typedef struct dwQuaternionf
{
    alignas(16) float32_t x;
    float32_t y;
    float32_t z;
    float32_t w;
} dwQuaternionf;

/// @brief Defines a double-precision quaternion.
//# sergen(generate)
typedef struct dwQuaterniond
{
    alignas(16) float64_t x;
    float64_t y;
    float64_t z;
    float64_t w;
} dwQuaterniond;

/// @brief Data structure representing an oriented bounding box in the local object coordinate frame
/// The box is defined using the center 3D point, the XYZ half axis lengths and a rotation matrix
typedef struct dwOrientedBoundingBox3f
{
    /// Coordinate of the position of the center of the bounding box in the local frame
    dwVector3f center;

    /// Half of the width, height and depth of the box in the local frame
    dwVector3f halfAxisXYZ;

    /// Rotation matrix defining the orientation in the local frame
    dwMatrix3f rotation;
} dwOrientedBoundingBox3f;

/// @brief Data structure representing an oriented bounding box in the local object coordinate frame
/// The box is defined using the center 2D point, the XY half axis lengths and a rotation matrix
typedef struct dwOrientedBoundingBox2f
{
    /// Coordinate of the position of the center of the bounding box in the local frame
    dwVector2f center;

    /// Half of the width, and height of the box in the local frame
    dwVector2f halfAxisXY;

    /// Rotation matrix defining the orientation in the local frame
    dwMatrix2f rotation;
} dwOrientedBoundingBox2f;

#ifdef __cplusplus
}
#endif

#endif // GEOMETRICTYPES_H_
