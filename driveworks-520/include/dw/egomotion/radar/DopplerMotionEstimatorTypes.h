////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2022-2024 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_EGOMOTION_RADAR_DOPPLERMOTIONESTIMATORTYPES_H_
#define DW_EGOMOTION_RADAR_DOPPLERMOTIONESTIMATORTYPES_H_
// Generated by dwProto from doppler_motion_estimator_types.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Types.h>

#include <dw/sensors/radar/RadarTypes.h>
#include <dw/rig/Vehicle.h>

#ifdef __cplusplus
extern "C" {
#endif

/// @brief Defines implementation type (cpu or gpu).
typedef enum dwRadarDopplerMotionImplType {
    /// CPU implementation.
    DW_RADAR_DOPPLER_MOTION_IMPL_TYPE_CPU = 1,

    /// GPU implementation.
    DW_RADAR_DOPPLER_MOTION_IMPL_TYPE_GPU = 2,
} dwRadarDopplerMotionImplType;

/// @brief Defines the radar motion.
typedef struct dwRadarDopplerMotion
{
    /// Radar speed (the magnitude of radar sensor velocity) in sensor space (m/s).
    float32_t speed;

    /// Radar heading direction (the direction of radar sensor velocity) in sensor space (radian).
    float32_t heading;

    /// Estimation error covariance for (heading, radial speed).
    dwMatrix2f covariance;

    /// Confidence for radial speed estimate (range: [0, 1)).
    float32_t confidenceSpeed;

    /// Confidence for heading estimate.
    float32_t confidenceHeading;

    /// Sensor timestamp of the radar scan data used for computing radar motion (us).
    /// @note unit us
    dwTime_t sensorTimestamp_us;

    /// Host timestamp of the radar scan data used for computing radar motion (us).
    dwTime_t hostTimestamp_us;

    /// Radar range type.
    dwRadarRange radarRange;
} dwRadarDopplerMotion;

/// @brief Defines the parameters used in ransac procedure for radar motion estimation.
typedef struct dwRadarDopplerMotionRansacParams
{
    /// Number of RANSAC iterations to perform.
    uint32_t nIterations;

    /// (Tukey) Robustifer threshold for the cost function,
    /// the value is measured in meters, depending on the accuracy of ego-motion.
    float64_t robustiferThreshold;
} dwRadarDopplerMotionRansacParams;

/// @brief Parameters that control the initialization of RadarDopplerMotion module.
typedef struct dwRadarDopplerMotionParams
{
    /// Ransac parameters.
    dwRadarDopplerMotionRansacParams ransacParams;

    /// Implementation type.
    dwRadarDopplerMotionImplType radarMotionImplType;

    /// Minimum number of radar returns required for a radar scan to be processed.
    uint32_t minNumReturns;

    /// Radar properties.
    dwRadarProperties radarProperties;

    /// bitfield selecting radar ranges used for doppler motion estimation.
    /// @see `dwRadarRange`
    /// enum value corresponds to bit position in bitfield, corresponding range will be used if bit is set
    /// example usage:
    ///     rangeSelection = (1 << DW_RADAR_RANGE_SHORT) | (1 << DW_RADAR_RANGE_LONG);  // use short and long range detections
    ///     rangeSelection = 1 << DW_RADAR_RANGE_SHORT;                                 // use short range detections
    uint8_t rangeSelection;

    /// Vehicle parameters.
    dwGenericVehicle vehicle;

    /// Radar extrinsics, transformation from Radar coordinate frame to vehicle rig coordinate frame.
    dwTransformation3f radarExtrinsics;
} dwRadarDopplerMotionParams;

#ifdef __cplusplus
}
#endif

#endif // DW_EGOMOTION_RADAR_DOPPLERMOTIONESTIMATORTYPES_H_
