////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2023-2024 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_CALIBRATION_ENGINE_COMMON_SELFCALIBRATIONIMUDIAGNOSTICS_H_
#define DW_CALIBRATION_ENGINE_COMMON_SELFCALIBRATIONIMUDIAGNOSTICS_H_
// Generated by dwProto from self_calibration_imu_diagnostics.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Types.h>

#include <dw/calibration/engine/common/CalibrationBaseTypes.h>
#include <dw/rig/Rig.h>

#ifdef __cplusplus
extern "C" {
#endif

/// self-calibration IMU diagnostic data for input monitoring:
///  - includes low-level and debounced error counters for all input monitors of IMU data
///  - is a part of 'SelfCalibrationImuDiagnostics'
///  - is used for in-depth debug analysis in DDB with roadcast logs
typedef struct dwSelfCalibrationImuInputMonitorDiagnostics
{
    /// number of errors in the imu frame range and rate monitor
    uint32_t imuRangeAndRateErrors;

    /// number of reported SEH-errors due to imu frame signal failures
    uint32_t debouncedImuRangeAndRateErrors;

    /// number of errors in the imu signal integrity monitor
    uint32_t imuSignalIntegrityErrors;

    /// number of reported SEH-errors due to imu frame signal integrity failures
    uint32_t debouncedImuSignalIntegrityErrors;

    /// number of errors in the vehicleIO speed range and rate monitor
    uint32_t vehicleIOSpeedRangeAndRateErrors;

    /// number of reported SEH-errors due to vehicleIO speed range and rate monitor failures
    uint32_t debouncedVehicleIOSpeedRangeAndRateErrors;

    /// number of errors in the imu signal integrity monitor
    uint32_t vehicleIOSpeedSignalIntegrityErrors;

    /// number of reported SEH-errors due to vehicleIO speed signal integrity failures
    uint32_t debouncedVehicleIOSpeedSignalIntegrityErrors;
} dwSelfCalibrationImuInputMonitorDiagnostics;

/// self-calibration IMU diagnostic data for output monitoring:
typedef struct dwSelfCalibrationImuOutputMonitorDiagnostics
{
    /// number of routine failure monitor errors
    uint32_t routineFailureErrors;

    /// number of routine timeout monitor errors
    uint32_t routineTimeoutErrors;

    /// number of the routine deadjusted monitor errors
    uint32_t sensorDeadjustedErrors;

    /// number of reported SEH-errors due to calibration failures (timeout, deadjusted or algorithmic failures)
    uint64_t totalRoutineErrors;

    /// number of routine not-accepted (inprep mode) monitor errors
    uint32_t routineNotAcceptedErrors;
} dwSelfCalibrationImuOutputMonitorDiagnostics;

/// IMU estimator parameters for an individual signal
typedef struct dwSelfCalibrationImuParameterEstimatorDiagnostics
{
    /// maximal number of votes in a single bin of a long-term histogram, zero if this parameter is not applicable
    float32_t longHistMaxVotes;

    /// total number of votes in all bins of a long-term histogram, zero if this parameter is not applicable
    float32_t longHistTotalNumVotes;

    /// number of outliers for a long-term histogram, zero if this parameter is not applicable
    uint32_t longHistNumberOfOutliers;
} dwSelfCalibrationImuParameterEstimatorDiagnostics;

/// self-calibration imu diagnostic data
///  - contains low-level debug information from an IMU calibration routine
///  - is created by the self-calibration IMU routine
///  - is logged to roadcast for debugging purposes
///  - is used in DDB to indicate high-level and low-level IMU calibration states
typedef struct dwSelfCalibrationImuDiagnostics
{
    /// sensor name
    char8_t sensorName[DW_MAX_RIG_SENSOR_NAME_SIZE];

    /// sensor pose timestamp (should match exactly to the calibrationSensorToRig timestamp)
    dwTime_t sensorTimestamp;

    /// nominal sensor XYZ [meters]
    dwVector3f nominalPositionM;

    /// nominal sensor RPY [deg]
    dwVector3f nominalRPYDeg;

    /// input monitor diagnostics
    dwSelfCalibrationImuInputMonitorDiagnostics inputs;

    /// output monitor diagnostics
    dwSelfCalibrationImuOutputMonitorDiagnostics outputs;

    /// supported calibration signal states
    dwCalibrationSignalStateArray signalStates;

    /// corrections sensor XYZ [meters]
    dwVector3f correctionsPosition;

    /// corrections sensor RPY [deg]
    dwVector3f correctionsRPY;

    /// calibration cycle index
    uint64_t cycleCount;

    /// up inclination estimation diagnostics
    dwSelfCalibrationImuParameterEstimatorDiagnostics upInclinationDiagnostics;

    /// up azimuth estimation diagnostics
    dwSelfCalibrationImuParameterEstimatorDiagnostics upAzimuthDiagnostics;

    /// forward inclination estimation diagnostics
    dwSelfCalibrationImuParameterEstimatorDiagnostics forwardInclinationDiagnostics;

    /// forward azimuth estimation diagnostics
    dwSelfCalibrationImuParameterEstimatorDiagnostics forwardAzimuthDiagnostics;
} dwSelfCalibrationImuDiagnostics;

#ifdef __cplusplus
}
#endif

#endif // DW_CALIBRATION_ENGINE_COMMON_SELFCALIBRATIONIMUDIAGNOSTICS_H_
