////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2023-2024 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef SELFCALIBRATIONCAMERADIAGNOSTICS_H_
#define SELFCALIBRATIONCAMERADIAGNOSTICS_H_
// Generated by dwProto from self_calibration_camera_diagnostics.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Types.h>

#include <dw/calibration/engine/common/CalibrationBaseTypes.h>
#include <dw/rig/Rig.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct dwSelfCalibrationCameraInputMonitorDiagnostics
{
    /// number of errors in the egomotion signal integrity monitor
    uint32_t egomotionSignalIntegrityErrors;

    /// number of errors in the feature signal integrity monitor
    uint32_t featureSignalIntegrityErrors;

    /// number of errors in the feature track property monitor
    uint32_t featureTrackPropertyErrors;

    /// number of reported SEH-errors due to egomotion signal failures
    uint32_t debouncedTotalEgomotionErrors;

    /// number of reported SEH-errors due to feature track signal failures
    uint32_t debouncedTotalFeatureErrors;
} dwSelfCalibrationCameraInputMonitorDiagnostics;

typedef struct dwSelfCalibrationCameraOutputMonitorDiagnostics
{
    /// number of routine failure monitor errors
    uint32_t routineFailureErrors;

    /// number of routine timeout monitor errors
    uint32_t routineTimeoutErrors;

    /// number of the routine deadjusted monitor errors
    uint32_t sensorDeadjustedErrors;

    /// number of reported SEH-errors due to calibration failures (timeout, deadjusted or algorithmic failures)
    uint64_t totalRoutineErrors;

    /// number of routine not-accepted (inprep mode) monitor errors
    uint32_t routineNotAcceptedErrors;
} dwSelfCalibrationCameraOutputMonitorDiagnostics;

typedef struct dwSelfCalibrationCameraParameterEstimatorDiagnostics
{
    /// maximal number of votes in a single bin of a long-term histogram, zero if this parameter is not applicable
    float32_t longHistMaxVotes;

    /// total number of votes in all bins of a long-term histogram, zero if this parameter is not applicable
    float32_t longHistTotalNumVotes;

    /// number of outliers for a long-term histogram, zero if this parameter is not applicable
    uint32_t longHistNumberOfOutliers;
} dwSelfCalibrationCameraParameterEstimatorDiagnostics;

typedef struct dwSelfCalibrationCameraDiagnostics
{
    char8_t sensorName[DW_MAX_RIG_SENSOR_NAME_SIZE];

    /// sensor pose timestamp (should match exactly to the calibrationSensorToRig timestamp)
    uint64_t sensorTimestamp;

    /// supported calibration signal states
    dwCalibrationSignalStateArray signalStates;

    /// nominal sensor XYZ [meters]
    dwVector3f nominalPosition;

    /// nominal sensor RPY [deg]
    dwVector3f nominalRPY;

    /// corrections sensor XYZ [meters]
    dwVector3f correctionsPosition;

    /// corrections sensor RPY [deg]
    dwVector3f correctionsRPY;

    /// number of features
    uint32_t numberOfFeatures;

    /// features bounding box
    dwVector2f featuresMinPoint;
    dwVector2f featuresMaxPoint;

    /// relative coverage score (see src/dw/calibration/errorhandling/FeatureTrackPropertyMonitorThresholds.h:76)
    float32_t coverageScore;

    /// two-view pose estimation: inlier count
    uint32_t inlierCount;

    /// two-view pose estimation: inlier count
    float32_t inlierRatio;

    /// two-view pose estimation: iteration count
    uint32_t iterationCount;

    /// calibration cycle index
    uint64_t cycleCount;

    /// previous frame timestamp
    uint64_t prevImageTimestamp;

    /// current frame timestamp
    uint64_t currentImageTimestamp;

    /// two-view image based yaw rate [deg/sec]
    float32_t twoViewYawRate;

    /// egomotion yaw rate [deg/sec]
    float32_t egomotionYawRate;

    /// input monitor diagnostics
    dwSelfCalibrationCameraInputMonitorDiagnostics inputs;

    /// output monitor diagnostics
    dwSelfCalibrationCameraOutputMonitorDiagnostics outputs;

    /// yaw angle estimation diagnostics
    dwSelfCalibrationCameraParameterEstimatorDiagnostics yawDiagnostics;

    /// pitch angle estimation diagnostics
    dwSelfCalibrationCameraParameterEstimatorDiagnostics pitchDiagnostics;

    /// roll angle estimation diagnostics
    dwSelfCalibrationCameraParameterEstimatorDiagnostics rollDiagnostics;

    /// height angle estimation diagnostics
    dwSelfCalibrationCameraParameterEstimatorDiagnostics heightDiagnostics;

    /// counter of rotation conflicts
    uint64_t rotationConflictCount;
} dwSelfCalibrationCameraDiagnostics;

#ifdef __cplusplus
}
#endif

#endif // SELFCALIBRATIONCAMERADIAGNOSTICS_H_
