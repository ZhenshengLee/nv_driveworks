////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2023-2024 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef SELFCALIBRATIONRADARDIAGNOSTICS_H_
#define SELFCALIBRATIONRADARDIAGNOSTICS_H_
// Generated by dwProto from self_calibration_radar_diagnostics.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

//WARNING!!!
// This warning does not apply to NDAS developers and NVIDIA partners.
// Please don't use any type definition in this file.
// All of data types in this file are going to be modified and will not
// follow Nvidia deprecation policy.

#include <dw/core/base/Types.h>

#include <dw/calibration/engine/common/CalibrationBaseTypes.h>
#include <dw/rig/Rig.h>
#include <dw/sensors/radar/RadarSSI.h>

#ifdef __cplusplus
extern "C" {
#endif

/// self-calibration radar diagnostic data for input monitoring:
///  - includes low-level and debounced error counters for all input monitors of radar data
///  - is a part of 'SelfCalibrationRadarDiagnostics'
///  - is used for in-depth debug analysis in DDB with roadcast logs
typedef struct dwSelfCalibrationRadarInputMonitorDiagnostics
{
    /// number of errors in the egomotion signal integrity monitor
    uint32_t signalIntegrityErrors;

    /// number of errors in the vehicleIO wheel speed range and rate monitor
    uint32_t vehicleIOWheelSpeedErrors;

    /// number of errors in the radar doppler motion monitor
    uint32_t radarDopplerMotionErrors;

    /// number of errors in the radar scan monitor
    uint32_t radarScanErrors;

    /// number of errors in the vehicleIO steering monitor
    uint32_t vehicleIOSteeringErrors;

    /// number of errors in the vehicleIO vehicle speed monitor
    uint32_t vehicleIOVehicleSpeedErrors;

    /// number of reported SEH-errors due to signal integrity failures
    uint32_t debouncedTotalSignalIntegrityErrors;

    /// number of reported SEH-errors due to vehicleIO wheel speed signal failures
    uint32_t debouncedTotalVehicleIOWheelSpeedErrors;

    /// number of reported SEH-errors due to radar doppler motion signal failures
    uint32_t debouncedTotalRadarDopplerMotionErrors;

    /// number of reported SEH-errors due to radar scan signal failures
    uint32_t debouncedTotalRadarScanErrors;

    /// number of reported SEH-errors due to vehicleIO steering signal failures
    uint32_t debouncedTotalVehicleIOSteeringErrors;

    /// number of reported SEH-errors due to vehicle speed signal failures
    uint32_t debouncedTotalVehicleIOVehicleSpeedErrors;
} dwSelfCalibrationRadarInputMonitorDiagnostics;

/// self-calibration radar diagnostic data for output monitoring:
///  - includes error counters for all output monitors inside the radar calibration routine
///  - is a part of 'SelfCalibrationRadarDiagnostics'
///  - is used for in-depth debug analysis in DDB with roadcast logs
typedef struct dwSelfCalibrationRadarOutputMonitorDiagnostics
{
    /// number of reported SEH-errors due to calibration failures (timeout, deadjusted or algorithmic failures)
    uint64_t totalRoutineErrors;

    /// number of routine failure monitor errors
    uint32_t routineFailureErrors;

    /// number of routine timeout monitor errors
    uint32_t routineTimeoutErrors;

    /// number of the routine deadjusted monitor errors
    uint32_t sensorDeadjustedErrors;

    /// number of the wheel radii calibration monitor errors
    uint32_t wheelRadiiErrors;

    /// number of routine not-accepted (inprep mode) monitor errors
    uint32_t routineNotAcceptedErrors;
} dwSelfCalibrationRadarOutputMonitorDiagnostics;

/// self-calibration estimator debug data for individual signals
///  - includes major histogram statistics
///  - is a part of 'SelfCalibrationRadarDiagnostics'
///  - is used for in-depth debug analysis in DDB with roadcast logs
typedef struct dwSelfCalibrationRadarEstimatorDiagnostics
{
    /// maximal number of votes in a single bin of a long-term histogram
    float32_t longHistMaxVotes;

    /// total number of votes in all bins of a long-term histogram
    float32_t longHistTotalNumVotes;

    /// number of outliers for a long-term histogram
    uint32_t longHistNumberOfOutliers;
} dwSelfCalibrationRadarEstimatorDiagnostics;

/// self-calibration diagnostics for radar supplier calibration
///  - is a part of 'SelfCalibrationRadarDiagnostics'
///  - is used for in-depth debug analysis in DDB with roadcast logs
typedef struct dwSelfCalibrationRadarSSI
{
    /// Availability flag
    bool availability;

    /// timestamp, us
    dwTime_t timestampUs;

    /// Azimuth
    /// @note unit deg
    float32_t azimuthDeg;

    /// Pitch
    /// @note unit deg
    float32_t pitchDeg;

    /// Azimuth correction
    /// @note unit deg
    float32_t azimuthCorrectionDeg;

    /// Pitch correction
    /// @note unit deg
    float32_t pitchCorrectionDeg;

    /// Service Drive Calibration (SDC) progress, %
    uint8_t progressPercent;

    /// Calibration func stat
    dwRadarCalibrationFuncStat calibrationFuncStat;

    /// Calibration SOC (Sustained Online Calibration) stat
    dwRadarCalibrationSOCStat calibrationSocStat;
} dwSelfCalibrationRadarSSI;

/// self-calibration radar diagnostic data
///  - contains low-level debug information from a radar calibration routine
///  - is created by the self-calibration radar routine
///  - is logged to roadcast for debugging purposes
///  - is used in DDB to indicate high-level and low-level radar calibration states
typedef struct dwSelfCalibrationRadarDiagnostics
{
    /// sensor name
    char8_t sensorName[DW_MAX_RIG_SENSOR_NAME_SIZE];

    /// sensor pose timestamp (should match exactly to the calibrationSensorToRig timestamp)
    dwTime_t sensorTimestamp;

    /// nominal sensor XYZ [meters]
    dwVector3f nominalPositionM;

    /// nominal sensor RPY [deg]
    dwVector3f nominalRPYDeg;

    /// input monitor diagnostics
    dwSelfCalibrationRadarInputMonitorDiagnostics inputs;

    /// output monitor diagnostics
    dwSelfCalibrationRadarOutputMonitorDiagnostics outputs;

    /// supported calibration signal states
    dwCalibrationSignalStateArray signalStates;

    /// corrections sensor XYZ [meters]
    dwVector3f correctionsPosition;

    /// corrections sensor RPY [deg]
    dwVector3f correctionsRPY;

    /// calibration cycle index
    uint64_t cycleCount;

    /// yaw angle estimation diagnostics
    dwSelfCalibrationRadarEstimatorDiagnostics yawDiagnostics;

    /// pitch angle estimation diagnostics
    dwSelfCalibrationRadarEstimatorDiagnostics pitchDiagnostics;

    /// number of returns in the last received radar scan, -1 if this parameter is not applicable
    int32_t numberOfReturnsInLastRadarScan;

    /// confidence for radial speed estimate in last received doppler motion data, -1 if this parameter is not applicable
    float32_t confidenceSpeedInLastDopplerMotion;

    /// confidence for heading estimate in last received doppler motion data, -1 if this parameter is not applicable
    float32_t confidenceHeadingInLastDopplerMotion;

    /// Radar speed (the magnitude of radar sensor velocity) in sensor space (m/s).
    float32_t speedInLastDopplerMotion;

    /// Radar heading direction (the direction of radar sensor velocity) in sensor space (radian).
    float32_t headingInLastDopplerMotion;

    /// Supplier calibration (SSI) diagnostics
    dwSelfCalibrationRadarSSI ssi;
} dwSelfCalibrationRadarDiagnostics;

#ifdef __cplusplus
}
#endif

#endif // SELFCALIBRATIONRADARDIAGNOSTICS_H_
