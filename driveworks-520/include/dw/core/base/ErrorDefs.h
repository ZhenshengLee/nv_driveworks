////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2022-2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_CORE_BASE_ERRORDEFS_H_
#define DW_CORE_BASE_ERRORDEFS_H_
// Generated by dwProto from error_defs.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <stdbool.h>
#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

/// @brief Status definition.
typedef enum dwStatus {
    DW_SUCCESS                  = 0,  //!< No error
    DW_INVALID_VERSION          = 1,  //!< Invalid version between headers and runtime library
    DW_INVALID_ARGUMENT         = 2,  //!< One of the given arguments cannot be processed by the function
    DW_BAD_ALLOC                = 3,  //!< Cannot allocate required memory
    DW_BAD_ALIGNMENT            = 4,  //!< Incorrect alignment for a pointer
    DW_BAD_CAST                 = 5,  //!< Cannot cast given handle to an expected type
    DW_NOT_IMPLEMENTED          = 6,  //!< Requested feature/method is not yet implemented
    DW_END_OF_STREAM            = 7,  //!< End of stream reached
    DW_INVALID_HANDLE           = 8,  //!< Given handle is invalid, i.e., not a valid handle.
    DW_CALL_NOT_ALLOWED         = 9,  //!< The call to a method is not allowed at this state
    DW_NOT_AVAILABLE            = 10, //!< Requested method or object instance is not yet available
    DW_NOT_RELEASED             = 11, //!< Given handle has not been released yet
    DW_NOT_SUPPORTED            = 12, //!< Desired set of parameters or functionality is not suported
    DW_NOT_INITIALIZED          = 13, //!< The object requires initialization first
    DW_INTERNAL_ERROR           = 14, //!< Internal error indicating a non recoverable situation
    DW_FILE_NOT_FOUND           = 15, //!< Requested file was not found
    DW_FILE_INVALID             = 16, //!< File content is invalid.
    DW_CANNOT_CREATE_OBJECT     = 17, //!< Failed to create a DW Object
    DW_BUFFER_FULL              = 18, //!< An internal buffer has reached its capacity.
    DW_NOT_READY                = 19, //!< The processing is not finished or ready
    DW_TIME_OUT                 = 20, //!< The request has timed out
    DW_BUSY_WAITING             = 21, //!< No response since too busy, not an error but please retry
    DW_LOG_CANNOT_WRITE         = 22, //!< Logger is unable to write output
    DW_LOG_CANNOT_FLUSH         = 23, //!< Logger is unable to flush output
    DW_SAL_CANNOT_INITIALIZE    = 24, //!< A sensor cannot be initialized, e.g., sensor might not be responding.
    DW_SAL_CANNOT_CREATE_SENSOR = 25, //!< A sensor cannot be created, e.g. possible issues are wrong parameters
    DW_SAL_NO_DRIVER_FOUND      = 26, //!< Requested sensor driver cannot be found
    DW_SAL_SENSOR_UNSUPPORTED   = 27, //!< Requested sensor is unsupported
    DW_SAL_SENSOR_ERROR         = 28, //!< Internal non-recoverable sensor error
    DW_CUDA_ERROR               = 29, //!< There was an error from the CUDA API
    DW_GL_ERROR                 = 30, //!< Last call to OpenGL API resulted in an error
    DW_NVMEDIA_ERROR            = 31, //!< NvMedia API resulted in an error
    DW_DNN_INVALID_MODEL        = 32, //!< Given network model is not valid
    DW_FAILURE                  = 33, //!< Unknown, non-recoverable error
    DW_DNN_INVALID_TYPE         = 34, //!< DNN model type is invalid
    DW_HAL_CANNOT_OPEN_CHANNEL  = 35, //!< HAL cannot open a channel.
    DW_OUT_OF_BOUNDS            = 36, //!< Out of bounds exception (e.g. in array access).
    DW_UNEXPECTED_IPC_EVENT     = 37, //!< Unexpected/Invalid Event received for IPC.
    DW_UNEXPECTED_EVENT         = 38, //!< Unexpected/Invalid Event received from a block.
    DW_CUDA_CONTEXT_ERROR       = 39, //!< The CUDA context is either not present or cannot be initialized.
    DW_CUDA_DEVICE_ERROR        = 40, //!< The CUDA device currently selected is either incompatible with the operation or has failed.
    DW_CANNOT_SYNCHRONIZE       = 41, //!< The synchronization call has failed.
    DW_EMPTY_QUEUE              = 42, //!< No more events/data available to process.
    DW_NUM_ERROR_CODES          = 43, //!< Total number of DW error codes.
} dwStatus;

#ifdef __cplusplus
}
#endif

#endif // DW_CORE_BASE_ERRORDEFS_H_
