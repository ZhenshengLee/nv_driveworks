////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2016-2024 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_CORE_HEALTH_HEALTHSIGNALS_H_
#define DW_CORE_HEALTH_HEALTHSIGNALS_H_
// Generated by dwProto from health_signals.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

/**
 * @file
 * <b>NVIDIA DriveWorks API: Health Signal Methods</b>
 *
 * @b Description: This file defines the health signal methods of the SDK.
 */

/**
 * @defgroup core_group Core Interface
 *
 * @brief Defines the health signals methods of the SDK.
 *
 * Unless explicitly specified, all errors returned by DriveWorks APIs are non recoverable and the user application should transition to fail safe mode.
 * In addition, any error code not described in this documentation should be consider as fatal and the user application should also transition to fail safe mode.
 */

/**
 * @defgroup core_health_signal_group Health Signal
 * @ingroup core_group
 * Defines the core Health Signal methods of the SDK.
 *
 * @{
 */

#include <dw/core/base/BasicTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

#define DW_MAX_ERROR_SIGNAL_ERRORS_COUNT 32U
#define DW_MAX_ERROR_TYPES_PER_MODULE 208U
/// The size of the data field in @a dwHealthSignal
#define DW_MAX_HEALTH_BYTEARRAY_SIZE 862U
/// The maximum number of individual @a dwHealthSignal that can be stored in a @a dwHealthSignalArray
#define DW_MAX_HEALTH_SIGNAL_ARRAY_SIZE 64

/**
 * @brief Basic error signal that gets reported only when there is an error
 */
typedef struct dwErrorSignal
{
    /// timestamp at which the error occured, filled by module
    dwTime_t timestamp;

    /// module id, automatically filled
    uint16_t sourceID;

    /// the number of errors in @a errorIds
    size_t count;

    /// module defined error
    uint32_t errorIDs[DW_MAX_ERROR_SIGNAL_ERRORS_COUNT];
} dwErrorSignal;

/**
 * @brief Basic health signal that describes the health status of a particular software element
 * @note each health signal is defined to be 1024 bytes
 */
typedef struct dwHealthSignal
{
    /// timestamp at which the health status was last updated, filled by module
    dwTime_t timestamp;

    /// module id, automatically filled
    uint16_t sourceID;

    /// the number of errors in @a errorIds
    size_t count;

    /// module defined error
    uint32_t errorIDs[DW_MAX_ERROR_SIGNAL_ERRORS_COUNT];

    /// bytes used in the optional byte array
    size_t dataSize;

    /// optional byte array for additional information
    uint8_t data[DW_MAX_HEALTH_BYTEARRAY_SIZE];
} dwHealthSignal;

/**
 * @brief Represents an array of health signals
 */
typedef struct dwHealthSignalArray
{
    /// The individual signals
    dwHealthSignal healthSignals[DW_MAX_HEALTH_SIGNAL_ARRAY_SIZE];
    uint32_t count; //!< Stores the occupied/valid length of healthSignals
} dwHealthSignalArray;

#ifdef __cplusplus
}
#endif

/** @}
 */

#endif // DW_CORE_HEALTH_HEALTHSIGNALS_H_
