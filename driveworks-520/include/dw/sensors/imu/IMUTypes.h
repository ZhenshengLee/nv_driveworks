////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2018-2023 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_SENSORS_IMU_IMUTYPES_H_
#define DW_SENSORS_IMU_IMUTYPES_H_
// Generated by dwProto from imu_types.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Exports.h>
#include <dw/core/base/Types.h>

#include <dw/core/signal/SignalStatus.h>

#ifdef __cplusplus
extern "C" {
#endif

/// @brief Each flag shows if that value is valid in this IMU frame
/// @deprecated dwIMUFlags is deprecated and will be removed in the future, use dwIMUFrame.validityInfo and APIs from IMUGetterSetter.h instead
typedef enum dwIMUFlags {
    /// @deprecated Use dwIMUFrame.validityInfo.heading instead
    DW_IMU_HEADING DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.heading instead") = 1 << 1, //!< Value of dwIMUFrame.heading is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.orientation[0] instead
    DW_IMU_ROLL DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.orientation[0] instead") = 1 << 2, //!< Value of dwIMUFrame.orientation[0] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.orientation[1] instead
    DW_IMU_PITCH DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.orientation[1] instead") = 1 << 3, //!< Value of dwIMUFrame.orientation[1] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.orientation[2] instead
    DW_IMU_YAW DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.orientation[2] instead") = 1 << 4, //!< Value of dwIMUFrame.orientation[2] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.orientationQuaternion instead
    DW_IMU_QUATERNION_X DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.orientationQuaternion instead") = 1 << 5, //!< Value of dwIMUFrame.orientationQuaternion.x is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.orientationQuaternion instead
    DW_IMU_QUATERNION_Y DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.orientationQuaternion instead") = 1 << 6, //!< Value of dwIMUFrame.orientationQuaternion.y is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.orientationQuaternion instead
    DW_IMU_QUATERNION_Z DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.orientationQuaternion instead") = 1 << 7, //!< Value of dwIMUFrame.orientationQuaternion.z is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.orientationQuaternion instead
    DW_IMU_QUATERNION_W DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.orientationQuaternion instead") = 1 << 8, //!< Value of dwIMUFrame.orientationQuaternion.w is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.turnrate[0] instead
    DW_IMU_ROLL_RATE DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.turnrate[0] instead") = 1 << 9, //!< Value of dwIMUFrame.turnrate[0] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.turnrate[1] instead
    DW_IMU_PITCH_RATE DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.turnrate[1] instead") = 1 << 10, //!< Value of dwIMUFrame.turnrate[1] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.turnrate[2] instead
    DW_IMU_YAW_RATE DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.turnrate[2] instead") = 1 << 11, //!< Value of dwIMUFrame.turnrate[2] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.acceleration[0] instead
    DW_IMU_ACCELERATION_X DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.acceleration[0] instead") = 1 << 12, //!< Value of dwIMUFrame.acceleration[0] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.acceleration[1] instead
    DW_IMU_ACCELERATION_Y DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.acceleration[1] instead") = 1 << 13, //!< Value of dwIMUFrame.acceleration[1] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.acceleration[2] instead
    DW_IMU_ACCELERATION_Z DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.acceleration[2] instead") = 1 << 14, //!< Value of dwIMUFrame.acceleration[2] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.magnetometer[0] instead
    DW_IMU_MAGNETOMETER_X DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.magnetometer[0] instead") = 1 << 15, //!< Value of dwIMUFrame.magnetometer[0] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.magnetometer[1] instead
    DW_IMU_MAGNETOMETER_Y DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.magnetometer[1] instead") = 1 << 16, //!< Value of dwIMUFrame.magnetometer[1] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.magnetometer[2] instead
    DW_IMU_MAGNETOMETER_Z DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.magnetometer[2] instead") = 1 << 17, //!< Value of dwIMUFrame.magnetometer[2] is valid.

    /// @deprecated Use dwIMUFrame.validityInfo.alignmentStatus instead
    DW_IMU_ALIGNMENTSTATUS DW_DEPRECATED_ENUM("Use dwIMUFrame.validityInfo.alignmentStatus instead") = 1 << 18, //!< Value of dwIMUFrame.alignmentStatus is valid.
} dwIMUFlags DW_DEPRECATED("dwIMUFlags is deprecated and will be removed in the future, use dwIMUFrame.validityInfo and APIs from IMUGetterSetter.h instead");

/// @brief Types of the heading degree
/// @deprecated dwIMUHeadingType is deprecated and will be removed in the future
typedef enum dwIMUHeadingType {
    /// True heading
    /// @deprecated dwIMUHeadingType will be removed
    DW_IMU_HEADING_TRUE DW_DEPRECATED_ENUM("dwIMUHeadingType will be removed") = 0, //!< 'dwIMUFrame.heading' points towards true north.

    /// Magnetic heading
    /// @deprecated dwIMUHeadingType will be removed
    DW_IMU_HEADING_MAGNETIC DW_DEPRECATED_ENUM("dwIMUHeadingType will be removed") = 1, //!< 'dwIMUFrame.heading' points towards magnetic north.
    DW_IMU_HEADING_FORCE32                                                         = 0x7fffffff,
} dwIMUHeadingType DW_DEPRECATED("dwIMUHeadingType is deprecated and will be removed in the future");

/// @brief High rate data output from GNSS-IMU device requires fusion of GNSS and IMU. The data
/// can only be accurate if the GNSS/IMU device has gone through an internal alignment
/// initialization, which allows the device to know the orientation of the IMU. This status
/// indicates the quality of IMU alignment.
typedef enum dwIMUAlignmentStatus {
    /// Unknown status means the device does not or has not yet provided this information.
    DW_IMU_ALIGNMENT_STATUS_UNKNOWN = 0,

    /// Invalid means the IMU alignment is not yet valid, and the output data is not accurate.
    DW_IMU_ALIGNMENT_STATUS_INVALID = 1,

    /// Coarse means the IMU is roughly aligned, so the data is useful, but not of the highest quality.
    DW_IMU_ALIGNMENT_STATUS_COARSE = 2,

    /// Fine means the IMU alignment is complete, and the device can output high quality data.
    DW_IMU_ALIGNMENT_STATUS_FINE    = 3,
    DW_IMU_ALIGNMENT_STATUS_FORCE32 = 0x7fffffff,
} dwIMUAlignmentStatus;

typedef enum dwIMUImuTempQuality {
    /// Signal initializing
    DW_IMU_IMU_TEMP_QUALITY_INIT = 0,

    /// Sensor uncalibrated
    DW_IMU_IMU_TEMP_QUALITY_UNCALIB = 1,

    /// Signal in specification
    DW_IMU_IMU_TEMP_QUALITY_OK = 2,

    /// Signal temporary failure
    DW_IMU_IMU_TEMP_QUALITY_TMP_FAIL = 3,

    /// Signal permanent failure
    DW_IMU_IMU_TEMP_QUALITY_PRMNT_FAIL = 4,

    /// Sensor not installed
    DW_IMU_IMU_TEMP_QUALITY_SENS_NOT_INST = 5,
    DW_IMU_IMU_TEMP_QUALITY_FORCE32       = 0x7fffffff,
} dwIMUImuTempQuality;

typedef enum dwIMUImuAccelerationQuality {
    /// Signal Unknown
    DW_IMU_IMU_ACCELERATION_QUALITY_UNKNOWN = 0,

    /// Signal initializing
    DW_IMU_IMU_ACCELERATION_QUALITY_INIT = 1,

    /// Sensor uncalibrated
    DW_IMU_IMU_ACCELERATION_QUALITY_UNCALIB = 2,

    /// Signal in specification
    DW_IMU_IMU_ACCELERATION_QUALITY_OK = 3,

    /// Signal temporary failure
    DW_IMU_IMU_ACCELERATION_QUALITY_TMP_FAIL = 4,

    /// Signal permanent failure
    DW_IMU_IMU_ACCELERATION_QUALITY_PRMNT_FAIL = 5,

    /// Sensor not installed
    DW_IMU_IMU_ACCELERATION_QUALITY_SENS_NOT_INST = 6,

    /// Sensor overloaded
    DW_IMU_IMU_ACCELERATION_QUALITY_OVERLOAD = 7,

    /// Sensor out of operating temperature
    DW_IMU_IMU_ACCELERATION_QUALITY_TEMPERATURE = 8,
    DW_IMU_IMU_ACCELERATION_QUALITY_FORCE32     = 0x7fffffff,
} dwIMUImuAccelerationQuality;

typedef enum dwIMUImuTurnrateQuality {
    /// Signal Unknown
    DW_IMU_IMU_TURNRATE_QUALITY_UNKNOWN = 0,

    /// Signal initializing
    DW_IMU_IMU_TURNRATE_QUALITY_INIT = 1,

    /// Sensor uncalibrated
    DW_IMU_IMU_TURNRATE_QUALITY_UNCALIB = 2,

    /// Signal in specification
    DW_IMU_IMU_TURNRATE_QUALITY_OK = 3,

    /// Signal temporary failure
    DW_IMU_IMU_TURNRATE_QUALITY_TMP_FAIL = 4,

    /// Signal permanent failure
    DW_IMU_IMU_TURNRATE_QUALITY_PRMNT_FAIL = 5,

    /// Sensor not installed
    DW_IMU_IMU_TURNRATE_QUALITY_SENS_NOT_INST = 6,

    /// Sensor overloaded
    DW_IMU_IMU_TURNRATE_QUALITY_OVERLOAD = 7,

    /// Sensor out of operating temperature
    DW_IMU_IMU_TURNRATE_QUALITY_TEMPERATURE = 8,
    DW_IMU_IMU_TURNRATE_QUALITY_FORCE32     = 0x7fffffff,
} dwIMUImuTurnrateQuality;

typedef enum dwIMUImuTurnrateAccelQuality {
    /// Signal Unknown
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_UNKNOWN = 0,

    /// Signal initializing
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_INIT = 1,

    /// Sensor uncalibrated
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_UNCALIB = 2,

    /// Signal in specification
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_OK = 3,

    /// Signal temporary failure
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_TMP_FAIL = 4,

    /// Signal permanent failure
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_PRMNT_FAIL = 5,

    /// Sensor not installed
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_SENS_NOT_INST = 6,

    /// Sensor overloaded
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_OVERLOAD = 7,

    /// Sensor out of operating temperature
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_TEMPERATURE = 8,
    DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_FORCE32     = 0x7fffffff,
} dwIMUImuTurnrateAccelQuality;

typedef enum dwIMUImuTimestampQuality {
    /// Not Initialized. still initializing
    DW_IMU_IMU_TIMESTAMP_QUALITY_NOT_INIT = 0,

    /// Normal Operation. Functional and Electrical Checks Passed
    DW_IMU_IMU_TIMESTAMP_QUALITY_OK = 2,

    /// Synchronization lost.
    DW_IMU_IMU_TIMESTAMP_QUALITY_SYNC_LOST = 3,
    DW_IMU_IMU_TIMESTAMP_QUALITY_FORCE32   = 0x7fffffff,
} dwIMUImuTimestampQuality;

typedef enum dwIMUImuStatus {
    /// Signal Unknown
    DW_IMU_IMU_STATUS_UNKNOWN = 0,

    /// Signal initializing
    DW_IMU_IMU_STATUS_INIT = 1,

    /// Sensor uncalibrated
    DW_IMU_IMU_STATUS_UNCALIB = 2,

    /// Signal in specification
    DW_IMU_IMU_STATUS_OK = 3,

    /// Signal temporary failure
    DW_IMU_IMU_STATUS_TMP_FAIL = 4,

    /// Signal permanent failure
    DW_IMU_IMU_STATUS_PRMNT_FAIL = 5,

    /// Sensor not installed
    DW_IMU_IMU_STATUS_SENS_NOT_INST = 6,
    DW_IMU_IMU_STATUS_FORCE32       = 0x7fffffff,
} dwIMUImuStatus;

/// @brief This structure contains validity of each signal provided by IMU sensors.
/// Access fields in this structure with APIs provided by SignalStatus.h
typedef struct dwIMUSignalValidityInfo
{
    /// Validity of timestamp signal
    /// @deprecated timestamp_us  is deprecated and will not be used in the next major release. Please use hostTimestamp or sensorTimestamp instead.
    DW_DEPRECATED("timestamp_us  is deprecated and will not be used in the next major release. Please use hostTimestamp or sensorTimestamp instead.")
    dwSignalValidity timestamp_us;

    /// Validity of measurements of orientations in roll, pitch and yaw angles
    dwSignalValidity orientation[3];

    /// Validity of orientation values represented in quaternions
    dwSignalValidity orientationQuaternion;

    /// Validity of gyroscope in roll, pitch and yaw angles
    dwSignalValidity turnrate[3];

    /// Validity of acceleration signals in X, Y and Z axis
    dwSignalValidity acceleration[3];

    /// Validity of measurement of magnetometer signals in X, Y and Z axis
    dwSignalValidity magnetometer[3];

    /// Validity of heading signal
    dwSignalValidity heading;

    /// Validity of measured temperature
    dwSignalValidity temperature;

    /// Validity of measured acceleration offsets in X, Y and Z axis
    dwSignalValidity accelerationOffset[3];

    /// Validity of gyroscope offsets in roll, pitch and yaw angles
    dwSignalValidity turnrateOffset[3];

    /// Validity of gyroscope accelerations in roll, pitch and yaw angles
    dwSignalValidity turnrateAccel[3];

    /// Validity of quality of measured temperature
    dwSignalValidity imuTempQuality;

    /// Validity of status of acceleration values for X, Y and Z axis
    dwSignalValidity imuAccelerationQuality[3];

    /// Validity of status of gyroscope values for roll, pitch and yaw angles
    dwSignalValidity imuTurnrateQuality[3];

    /// Validity of status of gyroscope offsets for roll, pitch and yaw angles
    dwSignalValidity imuTurnrateOffsetQuality[3];

    /// Validity of status of gyroscope accelerations for roll, pitch and yaw angles
    dwSignalValidity imuTurnrateAccelQuality[3];

    /// Validity of status of sensor timestamp signal
    dwSignalValidity imuTimestampQuality;

    /// Validity of overall IMU status signal
    dwSignalValidity imuStatus;

    /// Validity of alignment status signal
    dwSignalValidity alignmentStatus;

    /// Validity of IMU frame sequence counter value
    dwSignalValidity sequenceCounter;

    /// Validity of status of IMU gyroscope offset quality values for roll, pitch and yaw angles
    dwSignalValidity imuTurnrateOffsetQualityStatus[3];

    /// Validity of status of sensor time sync
    dwSignalValidity timeSyncStatus;

    /// Validity of hostTimestamp
    dwSignalValidity hostTimestamp;

    /// Validity of sensorTimestamp
    dwSignalValidity sensorTimestamp;

    /// Detected errors. It should be always invalid for now.
    dwSignalValidity errors;

    /// Reserved space
    dwSignalValidity reserved[55];
} dwIMUSignalValidityInfo;

/// @brief This structure contains one frame of data from a IMU sensor.
typedef struct dwIMUFrame
{
    /// Signal validity info
    dwIMUSignalValidityInfo validityInfo;

    /// @note ID VS-90010
    /// @note description Timestamp for the current message. Indicates when it's first received.
    /// @note min nan    max nan
    /// @note freq 100    unit us
    /// @deprecated timestamp_us  is deprecated and will not be used in the next major release. Please use hostTimestamp or sensorTimestamp instead.
    DW_DEPRECATED("timestamp_us  is deprecated and will not be used in the next major release. Please use hostTimestamp or sensorTimestamp instead.")
    dwTime_t timestamp_us;

    /// @note ID VS-90020
    /// @note description Roll, pitch, and yaw angle of the orientation returned by the IMU. This is a signal that can be provided by certain types of IMUs as part of their internal state estimation. It is not used by egomotion.
    /// @note min nan    max nan
    /// @note freq 100    unit deg
    float64_t orientation[3];

    /// @note ID VS-90030
    /// @note description Quaternion representation (x, y, z, w) of the orientation returned by the IMU. This is a signal that can be provided by certain types of IMUs as part of their internal state estimation. It is not used by egomotion.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    dwQuaterniond orientationQuaternion;

    /// @note ID VS-90040
    /// @note description Roll, pitch, and yaw turn rate (i.e., gyroscope). Angular velocities measured by the IMU sensor, they are given in the coordinate system of the sensor.
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float64_t turnrate[3];

    /// @note ID VS-90050
    /// @note description Acceleration in X, Y, and Z directions. Linear acceleration measured by the IMU sensor, it does include the gravity component as the sensor measures the reaction due to gravity. This is sometimes referred to as “proper acceleration”. This is an IMU sensor signal, as such it reflects all the motions of the sensor itself, including suspension flexing, gravity, vehicle turning, rolling and pitching. Coordinate system is that of the sensor itself, refer to manufacturer datasheet.
    /// @note min nan    max nan
    /// @note freq 100    unit m/s²
    float64_t acceleration[3];

    /// @note ID VS-90060
    /// @note description Measurement of the magnetometer unit in X, Y, and Z directions.
    /// @note min nan    max nan
    /// @note freq 100    unit utesla
    float64_t magnetometer[3];

    /// @note ID VS-90070
    /// @note description Heading of the IMU measured in respect to the ENU system, i.e., compass. This is a signal that can be provided by certain IMU+GNSS sensor solutions as part of the state estimation. It is not used by egomotion. Heading is defined with respect to ENU coordinate system, whereas yaw is in an arbitrary local coordinate system.
    /// @note min nan    max nan
    /// @note freq 100    unit deg
    float64_t heading;

    /// @note ID VS-90090
    /// @note description IMU temperature.
    /// @note min nan    max nan
    /// @note freq 100    unit Celsius
    float32_t temperature;

    /// @note ID VS-90100
    /// @note description IMU acceleration offset values.
    /// @note min nan    max nan
    /// @note freq 100    unit m/s²
    float64_t accelerationOffset[3];

    /// @note ID VS-90110
    /// @note description IMU gyroscope offset values.
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float64_t turnrateOffset[3];

    /// @note ID VS-90120
    /// @note description IMU gyroscope acceleration values.
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s²
    float64_t turnrateAccel[3];

    /// @note ID VS-90140
    /// @note description Vehicle IMU temperature status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TEMP_QUALITY_INIT,
    ///                DW_IMU_IMU_TEMP_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_TEMP_QUALITY_OK,
    ///                DW_IMU_IMU_TEMP_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_TEMP_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_TEMP_QUALITY_SENS_NOT_INST
    ///        }
    dwIMUImuTempQuality imuTempQuality;

    /// @note ID VS-90150
    /// @note description Vehicle IMU acceleration values status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_UNKNOWN
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_INIT,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_OK,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_SENS_NOT_INST,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_OVERLOAD,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_TEMPERATURE
    ///        }
    dwIMUImuAccelerationQuality imuAccelerationQuality[3];

    /// @note ID VS-90160
    /// @note description Vehicle IMU gyroscope values quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TURNRATE_QUALITY_UNKNOWN
    ///                DW_IMU_IMU_TURNRATE_QUALITY_INIT,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_OK,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_SENS_NOT_INST,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_OVERLOAD,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_TEMPERATURE
    ///        }
    dwIMUImuTurnrateQuality imuTurnrateQuality[3];

    /// @note ID VS-90170
    /// @note description Vehicle IMU gyroscope offset values quality on a scale of 0...62.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    uint8_t imuTurnrateOffsetQuality[3];

    /// @note ID VS-90180
    /// @note description Vehicle IMU gyroscope acceleration values quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_UNKNOWN
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_INIT,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_OK,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_SENS_NOT_INST,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_OVERLOAD,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_TEMPERATURE
    ///        }
    dwIMUImuTurnrateAccelQuality imuTurnrateAccelQuality[3];

    /// @note ID VS-90190
    /// @note description Vehicle IMU sensor timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_IMU_IMU_TIMESTAMP_QUALITY_OK,
    ///                DW_IMU_IMU_TIMESTAMP_QUALITY_SYNC_LOST,
    ///        }
    dwIMUImuTimestampQuality imuTimestampQuality;

    /// @note ID VS-90200
    /// @note description Vehicle IMU overall status.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_STATUS_UNKNOWN
    ///                DW_IMU_IMU_STATUS_INIT,
    ///                DW_IMU_IMU_STATUS_UNCALIB,
    ///                DW_IMU_IMU_STATUS_OK,
    ///                DW_IMU_IMU_STATUS_TMP_FAIL,
    ///                DW_IMU_IMU_STATUS_PRMNT_FAIL,
    ///                DW_IMU_IMU_STATUS_SENS_NOT_INST
    ///        }
    dwIMUImuStatus imuStatus;

    /// @note description Alignment status
    dwIMUAlignmentStatus alignmentStatus;

    /// @note description Sequence counter
    /// @note TODO: Backend not yet implemented
    uint8_t sequenceCounter;

    /// @note ID VS-90171
    /// @note description Vehicle IMU gyroscope offset values quality is free of errors.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    uint8_t imuTurnrateOffsetQualityStatus[3];

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    /// Type of the heading information.
    /// @deprecated headingType is deprecated and will be removed in the next major release. Please don't use this field.
    DW_DEPRECATED("headingType is deprecated and will be removed in the next major release. Please don't use this field.")
    dwIMUHeadingType headingType;
#pragma GCC diagnostic pop

    /// The flags to show which values are valid in this IMU frame. Definition of each bit is in enum @b dwIMUFlags
    /// @deprecated flags is deprecated and will be removed in next major release. Please use APIs provided in IMUGetterSetter.h to access and check validity of signals
    DW_DEPRECATED("flags is deprecated and will be removed in next major release. Please use APIs provided in IMUGetterSetter.h to access and check validity of signals")
    uint32_t flags;

    /// @note description time sync status
    uint8_t timeSyncStatus;

    /// @note description timestamp provided by SAL when the frame received
    /// this timestamp is always available and the behavior may change based
    /// on the output-timestamp option:
    /// output-timestamp=raw, then hostTimestamp will be overridden by sensorTimestamp
    /// output-timestamp=smoothed, then hostTimestamp will be smoothed
    /// @note unit us
    dwTime_t hostTimestamp;

    /// @note description timestamp provided when physical sensor generate the frame
    /// if sensor can support timestamp, this timestamp can be used to indicate
    /// what's time spent when the frame arrive SAL from sensor by diff(hostTimestamp-sensorTimestamp),
    /// For SAL user, you can specify output-timestamp=raw if you think sensorTimestamp is more reliable
    /// @note unit us
    dwTime_t sensorTimestamp;

    /// IMU error IDs. It's internally used by SAL sensors. VAL and partners are not intended to use this field.
    uint64_t errors;

    /// Reserved
    uint8_t reserved[471];
} dwIMUFrame;

/// @brief This structure contains one frame of data from a IMU sensor.
/// @deprecated dwIMUFrameNew is deprecated and will be removed soon. Please use dwIMUFrame instead.
typedef struct dwIMUFrameNew
{
    /// Signal validity information
    dwIMUSignalValidityInfo validityInfo;

    /// @note ID VS-90010
    /// @note description Timestamp for the current message. Indicates when it's first received.
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t timestamp_us;

    /// @note ID VS-90020
    /// @note description Roll, pitch, and yaw angle of the orientation returned by the IMU. This is a signal that can be provided by certain types of IMUs as part of their internal state estimation. It is not used by egomotion.
    /// @note min nan    max nan
    /// @note freq 100    unit deg
    float64_t orientation[3];

    /// @note ID VS-90030
    /// @note description Quaternion representation (x, y, z, w) of the orientation returned by the IMU. This is a signal that can be provided by certain types of IMUs as part of their internal state estimation. It is not used by egomotion.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    dwQuaterniond orientationQuaternion;

    /// @note ID VS-90040
    /// @note description Roll, pitch, and yaw turn rate (i.e., gyroscope). Angular velocities measured by the IMU sensor, they are given in the coordinate system of the sensor.
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float64_t turnrate[3];

    /// @note ID VS-90050
    /// @note description Acceleration in X, Y, and Z directions. Linear acceleration measured by the IMU sensor, it does include the gravity component as the sensor measures the reaction due to gravity. This is sometimes referred to as “proper acceleration”. This is an IMU sensor signal, as such it reflects all the motions of the sensor itself, including suspension flexing, gravity, vehicle turning, rolling and pitching. Coordinate system is that of the sensor itself, refer to manufacturer datasheet.
    /// @note min nan    max nan
    /// @note freq 100    unit m/s²
    float64_t acceleration[3];

    /// @note ID VS-90060
    /// @note description Measurement of the magnetometer unit in X, Y, and Z directions.
    /// @note min nan    max nan
    /// @note freq 100    unit utesla
    float64_t magnetometer[3];

    /// @note ID VS-90070
    /// @note description Heading of the IMU measured in respect to the ENU system, i.e., compass. This is a signal that can be provided by certain IMU+GNSS sensor solutions as part of the state estimation. It is not used by egomotion. Heading is defined with respect to ENU coordinate system, whereas yaw is in an arbitrary local coordinate system.
    /// @note min nan    max nan
    /// @note freq 100    unit deg
    float64_t heading;

    /// @note ID VS-90090
    /// @note description IMU temperature.
    /// @note min nan    max nan
    /// @note freq 100    unit Celsius
    float32_t temperature;

    /// @note ID VS-90100
    /// @note description IMU acceleration offset values.
    /// @note min nan    max nan
    /// @note freq 100    unit m/s²
    float64_t accelerationOffset[3];

    /// @note ID VS-90110
    /// @note description IMU gyroscope offset values.
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float64_t turnrateOffset[3];

    /// @note ID VS-90120
    /// @note description IMU gyroscope acceleration values.
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s²
    float64_t turnrateAccel[3];

    /// @note ID VS-90140
    /// @note description Vehicle IMU temperature status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TEMP_QUALITY_INIT,
    ///                DW_IMU_IMU_TEMP_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_TEMP_QUALITY_OK,
    ///                DW_IMU_IMU_TEMP_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_TEMP_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_TEMP_QUALITY_SENS_NOT_INST
    ///        }
    dwIMUImuTempQuality imuTempQuality;

    /// @note ID VS-90150
    /// @note description Vehicle IMU acceleration values status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_UNKNOWN
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_INIT,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_OK,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_SENS_NOT_INST,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_OVERLOAD,
    ///                DW_IMU_IMU_ACCELERATION_QUALITY_TEMPERATURE
    ///        }
    dwIMUImuAccelerationQuality imuAccelerationQuality[3];

    /// @note ID VS-90160
    /// @note description Vehicle IMU gyroscope values quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TURNRATE_QUALITY_UNKNOWN
    ///                DW_IMU_IMU_TURNRATE_QUALITY_INIT,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_OK,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_SENS_NOT_INST,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_OVERLOAD,
    ///                DW_IMU_IMU_TURNRATE_QUALITY_TEMPERATURE
    ///        }
    dwIMUImuTurnrateQuality imuTurnrateQuality[3];

    /// @note ID VS-90170
    /// @note description Vehicle IMU gyroscope offset values quality on a scale of 0...62.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    uint8_t imuTurnrateOffsetQuality[3];

    /// @note ID VS-90180
    /// @note description Vehicle IMU gyroscope acceleration values quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_UNKNOWN
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_INIT,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_UNCALIB,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_OK,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_TMP_FAIL,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_PRMNT_FAIL,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_SENS_NOT_INST,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_OVERLOAD,
    ///                DW_IMU_IMU_TURNRATE_ACCEL_QUALITY_TEMPERATURE
    ///        }
    dwIMUImuTurnrateAccelQuality imuTurnrateAccelQuality[3];

    /// @note ID VS-90190
    /// @note description Vehicle IMU timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_IMU_IMU_TIMESTAMP_QUALITY_OK,
    ///                DW_IMU_IMU_TIMESTAMP_QUALITY_SYNC_LOST,
    ///        }
    dwIMUImuTimestampQuality imuTimestampQuality;

    /// @note ID VS-90200
    /// @note description Vehicle IMU overall status.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note *** valid values**: {
    ///                DW_IMU_IMU_STATUS_UNKNOWN
    ///                DW_IMU_IMU_STATUS_INIT,
    ///                DW_IMU_IMU_STATUS_UNCALIB,
    ///                DW_IMU_IMU_STATUS_OK,
    ///                DW_IMU_IMU_STATUS_TMP_FAIL,
    ///                DW_IMU_IMU_STATUS_PRMNT_FAIL,
    ///                DW_IMU_IMU_STATUS_SENS_NOT_INST
    ///        }
    dwIMUImuStatus imuStatus;

    /// Alignment status
    dwIMUAlignmentStatus alignmentStatus;

    /// @note description Sequence counter
    /// @note TODO: Backend not yet implemented
    uint8_t sequenceCounter;

    /// @note ID VS-90171
    /// @note description Vehicle IMU gyroscope offset values quality is free of errors.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    uint8_t imuTurnrateOffsetQualityStatus[3];

    /// Reserved
    uint8_t reserved[504];
} dwIMUFrameNew DW_DEPRECATED("dwIMUFrameNew is deprecated and will be removed soon. Please use dwIMUFrame instead.");

#ifdef __cplusplus
}
#endif

#endif // DW_SENSORS_IMU_IMUTYPES_H_
