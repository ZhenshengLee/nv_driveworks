////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2023-2024 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_SENSORS_COMMON_SENSORSTATS_H_
#define DW_SENSORS_COMMON_SENSORSTATS_H_
// Generated by dwProto from sensor_stats.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Types.h>

#ifdef __cplusplus
extern "C" {
#endif

/// Enum used for time delta statistics
typedef enum dwSensorStatTimeDifference {
    /// Difference between two consecutive host timestamp
    DW_SENSOR_STATE_DELTA_HOST_AND_HOST_TIME = 0,

    /// Difference between two consecutive sensor timestamp
    DW_SENSOR_STATE_DELTA_SENSOR_AND_SENSOR_TIME = 1,

    /// Difference between host timestamp and sensor timestamp
    DW_SENSOR_STATE_DELTA_HOST_AND_SENSOR_TIME = 2,

    /// Difference between current time and the last host timestamp when sensor data was received
    DW_SENSOR_STATE_DELTA_CURRENT_AND_HOST_TIME = 3,

    /// Difference between readFrame and returnFrame time
    DW_SENSOR_STATE_DELTA_READ_AND_RETURN_FRAME_TIME = 4,

    /// Count which the type value is less than
    DW_SENSOR_STATE_SENSOR_STAT_COUNT = 5,
} dwSensorStatTimeDifference;

// Hold the sensor ID and it's statistics
typedef struct dwSensorStats
{
    /// Sensor ID
    uint64_t sensorId;

    /// Number of normal events (excluding errors and drops).
    uint64_t events;

    /// Number of encountered errors.
    uint64_t errors;

    /// Number of events dropped.
    uint64_t drops;

    /// Current host timestamp difference between two consecutive packets.
    /// This will be deprecated soon, use currentDelta array [us]
    dwTime_t timeDeltaCur;

    /// Minimum observed host timestamp difference between two consecutive packets.
    /// This will be deprecated soon, use minDelta array [us]
    dwTime_t timeDeltaMin;

    /// Maximum observed host timestamp difference between two consecutive packets.
    /// This will be deprecated soon, use maxDelta array [us]
    dwTime_t timeDeltaMax;

    /// Variance of all the deltas between consecutive host timestamps.
    /// This will be deprecated soon, use standardDeviationDelta array
    float64_t timeDeltaStandardDeviation;

    /// Mean of all the deltas between consecutive host timestamps.
    /// This will be deprecated soon, use meanDelta array
    float64_t timeDeltaMean;

    /// Array of Current time difference between two consecutive packets
    /// as per the dwSensorStatTimeDifference [us]
    dwTime_t currentDelta[DW_SENSOR_STATE_SENSOR_STAT_COUNT];

    /// Array of Minimum observed time difference between two consecutive packets
    /// as per the dwSensorStatTimeDifference [us]
    dwTime_t minDelta[DW_SENSOR_STATE_SENSOR_STAT_COUNT];

    /// Array of Maximum observed time difference between two consecutive packets
    /// as per the dwSensorStatTimeDifference [us]
    dwTime_t maxDelta[DW_SENSOR_STATE_SENSOR_STAT_COUNT];

    /// Array of Variance of all the deltas between consecutive timestamps
    /// as per the dwSensorStatTimeDifference
    float64_t standardDeviationDelta[DW_SENSOR_STATE_SENSOR_STAT_COUNT];

    /// Array of Mean of all the deltas between consecutive timestamps
    /// as per the dwSensorStatTimeDifference
    float64_t meanDelta[DW_SENSOR_STATE_SENSOR_STAT_COUNT];

    /// Number of CRC errors.
    uint64_t crcErrors;

    /// Number of non-monotonic timestamp events.
    uint64_t nonMonotonicErrors;
} dwSensorStats;

#ifdef __cplusplus
}
#endif

#endif // DW_SENSORS_COMMON_SENSORSTATS_H_
