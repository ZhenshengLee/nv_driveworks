////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
// NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY,
// OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY
// IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of
// such information or for any infringement of patents or other rights of third
// parties that may result from its use. No license is granted by implication or
// otherwise under any patent or patent rights of NVIDIA Corporation. No third
// party distribution is allowed unless expressly authorized by NVIDIA.  Details
// are subject to change without notice. This code supersedes and replaces all
// information previously supplied. NVIDIA Corporation products are not
// authorized for use as critical components in life support devices or systems
// without express written approval of NVIDIA Corporation.
//
// Copyright (c) 2022-2024 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and any
// modifications thereto. Any use, reproduction, disclosure or distribution of
// this software and related documentation without an express license agreement
// from NVIDIA Corporation is strictly prohibited.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef DW_SENSORS_COMMON_SENSOREXTRAS_H_
#define DW_SENSORS_COMMON_SENSOREXTRAS_H_
// Generated by dwProto from sensor_extras.proto DO NOT EDIT BY HAND!
// See //3rdparty/shared/dwproto/README.md for more information

#include <dw/core/base/Types.h>

#ifdef __cplusplus
extern "C" {
#endif

/// Source of the message
typedef enum dwSensorTsAndIDSource {
    /// Unspecified source
    DW_SENSOR_TS_AND_ID_SOURCE_UNSPECIFIED = 0,

    /// Regular sensor
    DW_SENSOR_TS_AND_ID_SOURCE_SENSOR = 1,

    /// SVS node
    DW_SENSOR_TS_AND_ID_SOURCE_SVS = 2,

    /// Sensor services nodes
    DW_SENSOR_TS_AND_ID_SOURCE_SENSORSERVICE = 3, // More defines to add...
} dwSensorTsAndIDSource;

// This amounts to max(SensorTsAndIDSource) + 1, i.e. the required size of
// an array if these enum values are interpreted as array offsets.
#define DW_SENSOR_TS_AND_ID_SOURCE_COUNT 4

/// Hold the timestamp, ID, publishedTimestamp, seqNum and isDropped info of a frame.
typedef struct dwSensorTsAndID
{
    /// Source of the message
    dwSensorTsAndIDSource source;

    /// Sensor id
    uint64_t sensorId;

    /// Timestamp of the sensor
    dwTime_t timestamp;

    /// Timestamp when the processed sensor data has been published by the sensor node in [us]
    dwTime_t publishedTimestamp;

    /// Sensor/SAL sequence number for published message
    uint64_t seqNum;

    /// Was the frame corresponding to the timestamp dropped?
    bool isDropped;

    /// The node iteration counter at data consumption
    uint32_t iterationCount;

    /// RTC timestamp at data consumption
    dwTime_t rtcTime;

    /// TSC timestamp at data consumption
    dwTime_t tscTime;
} dwSensorTsAndID;

#ifdef __cplusplus
}
#endif

#endif // DW_SENSORS_COMMON_SENSOREXTRAS_H_
