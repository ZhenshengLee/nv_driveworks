#!/usr/bin/env python3

################################################################################
#
# Notice
# ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS"
# NVIDIA MAKES NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR
# OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY IMPLIED
# WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR
# PURPOSE.
#
# NVIDIA CORPORATION & AFFILIATES assumes no responsibility for the consequences
# of use of such information or for any infringement of patents or other rights
# of third parties that may result from its use. No license is granted by
# implication or otherwise under any patent or patent rights of NVIDIA
# CORPORATION & AFFILIATES. No third party distribution is allowed unless
# expressly authorized by NVIDIA. Details are subject to change without notice.
# This code supersedes and replaces all information previously supplied. NVIDIA
# CORPORATION & AFFILIATES products are not authorized for use as critical
# components in life support devices or systems without express written approval
# of NVIDIA CORPORATION & AFFILIATES.
#
# SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: LicenseRef-NvidiaProprietary
#
# NVIDIA CORPORATION, its affiliates and licensors retain all intellectual
# property and proprietary rights in and to this material, related documentation
# and any modifications thereto. Any use, reproduction, disclosure or
# distribution of this material and related documentation without an express
# license agreement from NVIDIA CORPORATION or its affiliates is strictly
# prohibited.
#
################################################################################

import json
import sys
import os
import os.path
import glob

def colon2underscore(inputRig, fname):
    if not fname: return
    rigBase = os.path.dirname(inputRig) or "."
    oldName = rigBase + "/" + fname
    if not os.access(oldName, os.F_OK): return
    newName = rigBase + "/" + fname.replace(':', '_')
    os.rename(oldName, newName)

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Convert Rig with colons in data files to underscores\n\n"
              "Usage: " + sys.argv[0] + " <rig-in.json> <rig-out.json>")
        exit(1)

    inputRig = sys.argv[1]
    outputRig = sys.argv[2]

    if not os.path.basename(inputRig).endswith('.json'):
        print("Error: expect a json file input")
        exit(1)

    with open(inputRig, 'r') as inf:
        rig = json.load(inf)

    for sensor in rig["rig"]["sensors"]:
        param = sensor["parameter"]
        files = [item.split("=")[1] for item in param.split(",")
                    if item.startswith("file=") or
                       item.startswith("video=") or
                       item.startswith("timestamp=")]
        for f in files: colon2underscore(inputRig, f)
        sensor["parameter"] = param.replace(':', '_')

    rig["rig"]["sensors"] = sorted(rig["rig"]["sensors"], key=lambda k: k["name"])

    with open(outputRig, 'w') as outf:
        json.dump(rig, outf, indent=4, sort_keys = True)
