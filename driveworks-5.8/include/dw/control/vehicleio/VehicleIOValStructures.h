/////////////////////////////////////////////////////////////////////////////////////////
// This code contains NVIDIA Confidential Information and is disclosed
// under the Mutual Non-Disclosure Agreement.
//
// Notice
// ALL NVIDIA DESIGN SPECIFICATIONS AND CODE ("MATERIALS") ARE PROVIDED "AS IS" NVIDIA MAKES
// NO REPRESENTATIONS, WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
//
// NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. No third party distribution is allowed unless
// expressly authorized by NVIDIA.  Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2021-2022 NVIDIA Corporation. All rights reserved.
//
// NVIDIA Corporation and its licensors retain all intellectual property and proprietary
// rights in and to this software and related documentation and any modifications thereto.
// Any use, reproduction, disclosure or distribution of this software and related
// documentation without an express license agreement from NVIDIA Corporation is
// strictly prohibited.
//
/////////////////////////////////////////////////////////////////////////////////////////

/**
 * @file
 * <b>NVIDIA DriveWorks API: VehicleIO VAL interface structures</b>
 *
 * @b Description: These structures are used to communicate VIO state and commands between VAL and NDAS.
 */

/**
 * @defgroup VehicleIO_actuators_group VehicleIO Actuators Interface
 *
 * @brief Defines structures to communicate VIO state and commands between VAL and NDAS
 *
 * @{
 */

// This is an autogenerated file from VAL_IF_VehicleState spreadsheet.
// The autogeneration script is checked in at src/dw/control/vehicleio/VIOHeaderGenScript.py
// The source spreadsheet is currently located at https://docs.google.com/spreadsheets/d/1AxgV1slOZu-io9OZus1Ov5zJ7we4UpYD-Tz-s13IQQk/edit#gid=0

#ifndef DW_VEHICLEIO_VAL_STRUCTURES_H_
#define DW_VEHICLEIO_VAL_STRUCTURES_H_

#include <dw/core/base/Types.h>
#include <stdint.h>

#include <dw/core/signal/SignalStatus.h>
#ifdef __cplusplus
extern "C" {
#endif

typedef uint32_t bitmask;
//# sergen(generate)
typedef enum dwVioLockState {
    /// unknown
    DW_VIO_LOCK_STATE_UNKNOWN = 0,
    /// closed fully
    DW_VIO_LOCK_STATE_SECURE_CLOSED = 1,
    /// closed but not secure (two stage lock)
    DW_VIO_LOCK_STATE_UNKNOWN_CLOSED = 2,
    /// open
    DW_VIO_LOCK_STATE_OPEN     = 3,
    DW_VIO_LOCK_STATE_FORCE_32 = 0x7FFFFFFF,
} dwVioLockState;

//# sergen(generate)
typedef enum dwVioSteeringWheelAngleQuality {
    /// Steering wheel angle sensor fault and not initialized
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR_INI = 0,
    /// Steering wheel angle sensor not initialized
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_INI = 1,
    /// Steering wheel angle sensor fault
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR = 2,
    /// Steering wheel angle sensor ok
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_OK      = 3,
    DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioSteeringWheelAngleQuality;

//# sergen(generate)
typedef enum dwVioHoldStatus {
    /// Unknown
    DW_VIO_HOLD_STATUS_UNKNOWN = 0,
    /// No Hold
    DW_VIO_HOLD_STATUS_NOHOLD = 1,
    /// Hold
    DW_VIO_HOLD_STATUS_HOLD = 2,
    /// Transition
    DW_VIO_HOLD_STATUS_TRANSITION = 3,
    DW_VIO_HOLD_STATUS_FORCE32    = 0x7FFFFFFF
} dwVioHoldStatus;

//# sergen(generate)
typedef enum dwVioGearStatus {
    /// Actual gear "N"
    DW_VIO_GEAR_STATUS_N = 0,
    /// Actual gear "1"
    DW_VIO_GEAR_STATUS_D1 = 1,
    /// Actual gear "2"
    DW_VIO_GEAR_STATUS_D2 = 2,
    /// Actual gear "3"
    DW_VIO_GEAR_STATUS_D3 = 3,
    /// Actual gear "4"
    DW_VIO_GEAR_STATUS_D4 = 4,
    /// Actual gear "5"
    DW_VIO_GEAR_STATUS_D5 = 5,
    /// Actual gear "6"
    DW_VIO_GEAR_STATUS_D6 = 6,
    /// Actual gear "7"
    DW_VIO_GEAR_STATUS_D7 = 7,
    /// Actual gear "8"
    DW_VIO_GEAR_STATUS_D8 = 8,
    /// Actual gear "9"
    DW_VIO_GEAR_STATUS_D9 = 9,
    /// Actual gear "R"
    DW_VIO_GEAR_STATUS_R = 10,
    /// Actual gear "R2"
    DW_VIO_GEAR_STATUS_R2 = 11,
    /// Actual gear "P"
    DW_VIO_GEAR_STATUS_P = 12,
    /// Power free
    DW_VIO_GEAR_STATUS_PWRFREE = 13,
    DW_VIO_GEAR_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioGearStatus;

//# sergen(generate)
typedef enum dwVioGearTarget {
    /// Actual gear "N"
    DW_VIO_GEAR_TARGET_N = 0,
    /// Actual gear "1"
    DW_VIO_GEAR_TARGET_D1 = 1,
    /// Actual gear "2"
    DW_VIO_GEAR_TARGET_D2 = 2,
    /// Actual gear "3"
    DW_VIO_GEAR_TARGET_D3 = 3,
    /// Actual gear "4"
    DW_VIO_GEAR_TARGET_D4 = 4,
    /// Actual gear "5"
    DW_VIO_GEAR_TARGET_D5 = 5,
    /// Actual gear "6"
    DW_VIO_GEAR_TARGET_D6 = 6,
    /// Actual gear "7"
    DW_VIO_GEAR_TARGET_D7 = 7,
    /// Actual gear "8"
    DW_VIO_GEAR_TARGET_D8 = 8,
    /// Actual gear "9"
    DW_VIO_GEAR_TARGET_D9 = 9,
    /// Actual gear "R"
    DW_VIO_GEAR_TARGET_R = 11,
    /// Actual gear "R2"
    DW_VIO_GEAR_TARGET_R2 = 12,
    /// Actual gear "P"
    DW_VIO_GEAR_TARGET_P = 13,
    /// Power free
    DW_VIO_GEAR_TARGET_PWRFREE = 14,
    DW_VIO_GEAR_TARGET_FORCE32 = 0x7FFFFFFF
} dwVioGearTarget;

//# sergen(generate)
typedef enum dwVioDrivePositionStatus {
    /// D
    DW_VIO_DRIVE_POSITION_STATUS_D = 0,
    /// N
    DW_VIO_DRIVE_POSITION_STATUS_N = 1,
    /// R
    DW_VIO_DRIVE_POSITION_STATUS_R = 2,
    /// P
    DW_VIO_DRIVE_POSITION_STATUS_P       = 3,
    DW_VIO_DRIVE_POSITION_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioDrivePositionStatus;

//# sergen(generate)
typedef enum dwVioDrivePositionTarget {
    /// D
    DW_VIO_DRIVE_POSITION_TARGET_D = 0,
    /// N
    DW_VIO_DRIVE_POSITION_TARGET_N = 1,
    /// R
    DW_VIO_DRIVE_POSITION_TARGET_R = 2,
    /// P
    DW_VIO_DRIVE_POSITION_TARGET_P       = 3,
    DW_VIO_DRIVE_POSITION_TARGET_FORCE32 = 0x7FFFFFFF
} dwVioDrivePositionTarget;

//# sergen(generate)
typedef enum dwVioHazardFlasherStatus {
    DW_VIO_HAZARD_FLASHER_STATUS_OFF     = 0,
    DW_VIO_HAZARD_FLASHER_STATUS_ON      = 1,
    DW_VIO_HAZARD_FLASHER_STATUS_UNKNOWN = 2,
    DW_VIO_HAZARD_FLASHER_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioHazardFlasherStatus;

//# sergen(generate)
typedef enum dwVioDriverOverrideThrottle {
    /// Driver doesn't override assistance with accelarator pedal
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_IDLE = 0,
    /// not defined
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_NDEF1 = 1,
    /// Driver overrides assistance system with accelerator pedal
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_DRV_OVERRIDE = 2,
    DW_VIO_DRIVER_OVERRIDE_THROTTLE_FORCE32      = 0x7FFFFFFF
} dwVioDriverOverrideThrottle;

//# sergen(generate)
typedef enum dwVioTurnSignalStatus {
    DW_VIO_TURN_SIGNAL_STATUS_UNKNOWN   = 0,
    DW_VIO_TURN_SIGNAL_STATUS_OFF       = 1,
    DW_VIO_TURN_SIGNAL_STATUS_LEFT      = 2,
    DW_VIO_TURN_SIGNAL_STATUS_RIGHT     = 3,
    DW_VIO_TURN_SIGNAL_STATUS_EMERGENCY = 4,
    DW_VIO_TURN_SIGNAL_STATUS_FORCE32   = 0x7FFFFFFF
} dwVioTurnSignalStatus;

//# sergen(generate)
typedef enum dwVioLongCtrlHapticWarningTargetType {
    /// no warning
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_NONE = 0,
    /// soft
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_SOFT_TARGET = 1,
    /// hard
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_HARD_TARGET = 2,
    DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_FORCE32     = 0x7FFFFFFF
} dwVioLongCtrlHapticWarningTargetType;

//# sergen(generate)
typedef enum dwVioLatCtrlReferenceInputSelect {
    DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_CURVATURE     = 0,
    DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_STEERINGANGLE = 1,
    DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_FORCE32       = 0x7FFFFFFF
} dwVioLatCtrlReferenceInputSelect;

//# sergen(generate)
typedef enum dwVioLatCtrlASILStatus {
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_QM      = 0,
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_A  = 1,
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_B  = 2,
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_C  = 3,
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_D  = 4,
    DW_VIO_LAT_CTRL_A_S_I_L_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioLatCtrlASILStatus;

//# sergen(generate)
typedef enum dwVioLatCtrlInterventionDirectionLKA {
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_INVALID = 0,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_FRONT   = 1,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_LEFT    = 2,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_RIGHT   = 3,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_REAR    = 4,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_FORCE32                 = 0x7FFFFFFF
} dwVioLatCtrlInterventionDirectionLKA;

//# sergen(generate)
typedef enum dwVioLatCtrlInterventionDirectionELK {
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_INVALID = 0,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_FRONT   = 1,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_LEFT    = 2,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_RIGHT   = 3,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_REAR    = 4,
    DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_FORCE32                 = 0x7FFFFFFF
} dwVioLatCtrlInterventionDirectionELK;

//# sergen(generate)
typedef enum dwVioLatCtrlEPSLimitStatus {
    /// no limitation
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_NO_LIM = 0,
    /// angle limited
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_ANGLE = 1,
    /// Force limited
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_FORCE = 2,
    /// angle and force limited
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_ANGLE_FORCE = 3,
    DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_FORCE32         = 0x7FFFFFFF
} dwVioLatCtrlEPSLimitStatus;

//# sergen(generate)
typedef enum dwVioLatCtrlLoopStatus {
    /// Unknown
    DW_VIO_LAT_CTRL_LOOP_STATUS_UNKNOWN = 0,
    /// Open_Loop
    DW_VIO_LAT_CTRL_LOOP_STATUS_OPEN = 1,
    /// Blending
    DW_VIO_LAT_CTRL_LOOP_STATUS_BLENDING = 2,
    /// Closed_Loop
    DW_VIO_LAT_CTRL_LOOP_STATUS_CLOSED  = 3,
    DW_VIO_LAT_CTRL_LOOP_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioLatCtrlLoopStatus;

//# sergen(generate)
typedef enum dwVioLongCtrGearCommand {
    /// default
    DW_VIO_LONG_CTR_GEAR_COMMAND_IDLE    = 0,
    DW_VIO_LONG_CTR_GEAR_COMMAND_D       = 1,
    DW_VIO_LONG_CTR_GEAR_COMMAND_R       = 2,
    DW_VIO_LONG_CTR_GEAR_COMMAND_P       = 3,
    DW_VIO_LONG_CTR_GEAR_COMMAND_FORCE32 = 0x7FFFFFFF
} dwVioLongCtrGearCommand;

//# sergen(generate)
typedef enum dwVioLongCtrlRedundCheckStatus {
    /// Not availabke
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_NOT_AVBL = 0,
    /// Park redundancy available
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_PARK_REDUNDANCY_AVL = 1,
    /// Driver redundancy available
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_DRIVER_REDUNDANCY_AVL = 2,
    DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_FORCE32               = 0x7FFFFFFF
} dwVioLongCtrlRedundCheckStatus;

//# sergen(generate)
typedef enum dwVioLongCtrlReferenceInputRequest {
    /// Idle
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_IDLE = 0,
    /// Acceleration input
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_ACCEL_INPUT = 1,
    /// Speed input
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_SPEED_INPUT = 2,
    /// Distance input
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_DIST_INPUT = 3,
    DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_FORCE32    = 0x7FFFFFFF
} dwVioLongCtrlReferenceInputRequest;

//# sergen(generate)
typedef enum dwVioLongCtrlFrictionRangeEstimation {
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_UNKNOWN       = 0,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_LOW_FRICTION  = 1,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_MID_FRICTION  = 2,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_HIGH_FRICTION = 3,
    DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_FORCE32       = 0x7FFFFFFF
} dwVioLongCtrlFrictionRangeEstimation;

//# sergen(generate)
typedef enum dwVioMirrorFoldRequest {
    /// No actuation
    DW_VIO_MIRROR_FOLD_REQUEST_REQ_NONE = 0,
    /// Mirror should fold in
    DW_VIO_MIRROR_FOLD_REQUEST_FOLD_IN = 1,
    /// Mirror should out
    DW_VIO_MIRROR_FOLD_REQUEST_FOLD_OUT = 2,
    DW_VIO_MIRROR_FOLD_REQUEST_FORCE32  = 0x7FFFFFFF
} dwVioMirrorFoldRequest;

//# sergen(generate)
typedef enum dwVioHeadlightRequest {
    /// no request
    DW_VIO_HEADLIGHT_REQUEST_NONE = 0,
    /// daylight running lights
    DW_VIO_HEADLIGHT_REQUEST_DRL = 1,
    /// lowbeam
    DW_VIO_HEADLIGHT_REQUEST_LOWBEAM = 2,
    /// highbeam
    DW_VIO_HEADLIGHT_REQUEST_HIGHBEAM = 3,
    /// leave to car setting
    DW_VIO_HEADLIGHT_REQUEST_AUTO    = 4,
    DW_VIO_HEADLIGHT_REQUEST_FORCE32 = 0x7FFFFFFF
} dwVioHeadlightRequest;

//# sergen(generate)
typedef enum dwVioTurnSignalRequest {
    /// no request
    DW_VIO_TURN_SIGNAL_REQUEST_IDLE      = 0,
    DW_VIO_TURN_SIGNAL_REQUEST_OFF       = 1,
    DW_VIO_TURN_SIGNAL_REQUEST_LEFT      = 2,
    DW_VIO_TURN_SIGNAL_REQUEST_RIGHT     = 3,
    DW_VIO_TURN_SIGNAL_REQUEST_EMERGENCY = 4,
    DW_VIO_TURN_SIGNAL_REQUEST_FORCE32   = 0x7FFFFFFF
} dwVioTurnSignalRequest;

//# sergen(generate)
typedef enum dwVioLatCtrlCurvReqAdditionalStatus {
    /// Init
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_INIT = 0,
    /// Idle
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_IDLE = 1,
    /// Active
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_ACTIVE = 2,
    /// ERROR
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_ERROR   = 3,
    DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioLatCtrlCurvReqAdditionalStatus;

//# sergen(generate)
typedef enum dwVioLongCtrlStatus {
    DW_VIO_LONG_CTRL_STATUS_UNKNOWN    = 0,
    DW_VIO_LONG_CTRL_STATUS_INIT       = 1,
    DW_VIO_LONG_CTRL_STATUS_RUN        = 2,
    DW_VIO_LONG_CTRL_STATUS_TERM       = 3,
    DW_VIO_LONG_CTRL_STATUS_TERMINATED = 4,
    DW_VIO_LONG_CTRL_STATUS_IDLE       = 5,
    DW_VIO_LONG_CTRL_STATUS_ERROR      = 6,
    DW_VIO_LONG_CTRL_STATUS_FORCE32    = 0x7FFFFFFF
} dwVioLongCtrlStatus;

//# sergen(generate)
typedef enum dwVioLongCtrlInteractionModeRequest {
    /// Idle
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_IDLE = 0,
    /// Regeneration made
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_REGENERATION_MODE = 1,
    /// Minimu mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_MIN_MODE = 2,
    /// Maximum mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_MAX_MODE = 3,
    /// Direct mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_DIRECT_MODE = 4,
    /// Decoupling mode
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_DECOUPLING_MODE = 5,
    DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_FORCE32         = 0x7FFFFFFF
} dwVioLongCtrlInteractionModeRequest;

//# sergen(generate)
typedef enum dwVioLongCtrlHoldRequest {
    DW_VIO_LONG_CTRL_HOLD_REQUEST_NOMON_FLWUP          = 0,
    DW_VIO_LONG_CTRL_HOLD_REQUEST_SSCMON_STNDSTILL_SEC = 1,
    DW_VIO_LONG_CTRL_HOLD_REQUEST_SSC_SEC_RQ           = 2,
    DW_VIO_LONG_CTRL_HOLD_REQUEST_FORCE32              = 0x7FFFFFFF
} dwVioLongCtrlHoldRequest;

//# sergen(generate)
typedef enum dwVioLongCtrlFaultStatus {
    DW_VIO_LONG_CTRL_FAULT_STATUS_NONE                           = 0,
    DW_VIO_LONG_CTRL_FAULT_STATUS_INIT                           = 1U << 0,
    DW_VIO_LONG_CTRL_FAULT_STATUS_HYDRAULIC_CONTROL_UNIT_FLT     = 1U << 1,
    DW_VIO_LONG_CTRL_FAULT_STATUS_EPB_FLT                        = 1U << 2,
    DW_VIO_LONG_CTRL_FAULT_STATUS_LTI_FLT                        = 1U << 3,
    DW_VIO_LONG_CTRL_FAULT_STATUS_COM_FLT                        = 1U << 4,
    DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_CHECK_FAILED        = 1U << 5,
    DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_OVERHEATED               = 1U << 6,
    DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_DEGRADATION              = 1U << 7,
    DW_VIO_LONG_CTRL_FAULT_STATUS_SAFETY_LIMITS_VIOLATED         = 1U << 8,
    DW_VIO_LONG_CTRL_FAULT_STATUS_ASU_SGNL_INPUT_PLAUSI_CHCK_FLT = 1U << 9,
    DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_UNIT_FLT            = 1U << 10,
    DW_VIO_LONG_CTRL_FAULT_STATUS_DRIVER_ABSENT                  = 1U << 11,
    DW_VIO_LONG_CTRL_FAULT_STATUS_SSC_FLT                        = 1U << 12,
    DW_VIO_LONG_CTRL_FAULT_STATUS_ESP_OR_ASR_CTRL_ACTV           = 1U << 13,
    DW_VIO_LONG_CTRL_FAULT_STATUS_FORCE32                        = 0x7FFFFFFF
} dwVioLongCtrlFaultStatus;

//# sergen(generate)
typedef enum dwVioLongCtrlBrakeTorqueAvailable {
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_NO_BRKTRQ_AVL = 0,
    /// reduced availability
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_RED_BRKTRQ_AVL = 1,
    /// reduced powertrain availability
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_RED_BRKTRQ_PT_AVL = 2,
    /// full availability
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_FULL_BRKTRQ_AVL = 3,
    DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_FORCE32         = 0x7FFFFFFF
} dwVioLongCtrlBrakeTorqueAvailable;

//# sergen(generate)
typedef enum dwVioLongCtrlAccelPerfRequest {
    /// none
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_NONE = 0,
    /// comfort
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_COMFORT = 1,
    /// dynamic
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_DYNAMIC = 2,
    /// High accuracy
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_HIGH_ACCURACY = 3,
    /// emergency
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_EMERGENCY = 4,
    DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_FORCE32   = 0x7FFFFFFF
} dwVioLongCtrlAccelPerfRequest;

//# sergen(generate)
typedef enum dwVioLongCtrlActiveSystem {
    /// default
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_NONE              = 0,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_MANEUVER_CTRL = 1,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_PARK_CTRL     = 2,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_REMOTE_CTRL   = 3,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_DBS           = 4,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CA            = 5,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CA_PLUS       = 6,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CRUISE_CTRL   = 7,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_L3            = 8,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LCS               = 9,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LIMITER           = 10,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ADSE_LOW          = 11,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ADSE_HIGH         = 12,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LIMITER_FIXED     = 13,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LIMITER_VAR       = 14,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_CMS_REAR          = 15,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_PSIR              = 16,
    DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_FORCE32           = 0x7FFFFFFF
} dwVioLongCtrlActiveSystem;

//# sergen(generate)
typedef enum dwVioBrakePedalStatus {
    /// Pedal upstopped
    DW_VIO_BRAKE_PEDAL_STATUS_UPSTOP = 0,
    /// Pedal pressed
    DW_VIO_BRAKE_PEDAL_STATUS_PSD = 1,
    /// not defined
    DW_VIO_BRAKE_PEDAL_STATUS_NDEF2   = 2,
    DW_VIO_BRAKE_PEDAL_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioBrakePedalStatus;

//# sergen(generate)
typedef enum dwVioLongCtrlEcoAssistStatus {
    /// eco assist unknown
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_UNKNOWN = 0,
    /// eco assist inactive
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_INACTIVE = 1,
    /// eco assist active
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ACTIVE = 2,
    /// eco assist engaged
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ENGAGED = 3,
    DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioLongCtrlEcoAssistStatus;

//# sergen(generate)
typedef enum dwVioLongCtrlComAvailable {
    DW_VIO_LONG_CTRL_COM_AVAILABLE_NO_PATH_VALID       = 0,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_VALID          = 1,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_SAT_VALID           = 2,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_SAT_VALID      = 3,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_BMRM_VALID          = 4,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_BMRM_VALID     = 5,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_SAT_BMRM_VALID      = 6,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_SAT_BMRM_VALID = 7,
    DW_VIO_LONG_CTRL_COM_AVAILABLE_FORCE32             = 0x7FFFFFFF
} dwVioLongCtrlComAvailable;

//# sergen(generate)
typedef enum dwVioLatCtrlStatus {
    DW_VIO_LAT_CTRL_STATUS_INIT       = 0,
    DW_VIO_LAT_CTRL_STATUS_IDLE       = 1,
    DW_VIO_LAT_CTRL_STATUS_CTRL       = 2,
    DW_VIO_LAT_CTRL_STATUS_TERMINATED = 3,
    DW_VIO_LAT_CTRL_STATUS_ERROR      = 4,
    DW_VIO_LAT_CTRL_STATUS_FORCE32    = 0x7FFFFFFF
} dwVioLatCtrlStatus;

//# sergen(generate)
typedef enum dwVioLatCtrlModeRequest {
    DW_VIO_LAT_CTRL_MODE_REQUEST_IDLE        = 0,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2          = 1,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2_PLUS     = 2,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2_HFE      = 3,
    DW_VIO_LAT_CTRL_MODE_REQUEST_AES         = 4,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L3          = 5,
    DW_VIO_LAT_CTRL_MODE_REQUEST_L3_EMG      = 6,
    DW_VIO_LAT_CTRL_MODE_REQUEST_LSS         = 7,
    DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_L2     = 8,
    DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_L3     = 9,
    DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_RECORD = 10,
    DW_VIO_LAT_CTRL_MODE_REQUEST_ESS         = 11,
    DW_VIO_LAT_CTRL_MODE_REQUEST_ARP         = 12,
    /// L2++
    DW_VIO_LAT_CTRL_MODE_REQUEST_L2_PLUS_PLUS = 13,
    DW_VIO_LAT_CTRL_MODE_REQUEST_FORCE32      = 0x7FFFFFFF
} dwVioLatCtrlModeRequest;

//# sergen(generate)
typedef enum dwVioLonCtrlSafetyLimRequest {
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_NONE                     = 0,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_MANEUVERING              = 1,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_PARKING_CONTROL          = 2,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_REMOTE_OR_L4_PARKING     = 3,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_DRIVER_BRAKE_SUPPORT     = 4,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_COLLISION_AVOIDANCE      = 5,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_COLLISION_AVOIDANCE_PLUS = 6,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_CRUISE_CONTROL           = 7,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_L3_DRIVING               = 8,
    DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_FORCE32                  = 0x7FFFFFFF
} dwVioLonCtrlSafetyLimRequest;

//# sergen(generate)
typedef enum dwVioLatCtrlModeStatus {
    DW_VIO_LAT_CTRL_MODE_STATUS_IDLE         = 0,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2           = 1,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2_PLUS      = 2,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2_HFE       = 3,
    DW_VIO_LAT_CTRL_MODE_STATUS_AES          = 4,
    DW_VIO_LAT_CTRL_MODE_STATUS_L3           = 5,
    DW_VIO_LAT_CTRL_MODE_STATUS_L3_EMG       = 6,
    DW_VIO_LAT_CTRL_MODE_STATUS_LSS          = 7,
    DW_VIO_LAT_CTRL_MODE_STATUS_PARK_L2      = 8,
    DW_VIO_LAT_CTRL_MODE_STATUS_PARK_L3      = 9,
    DW_VIO_LAT_CTRL_MODE_STATUS_PARK_RECORD  = 10,
    DW_VIO_LAT_CTRL_MODE_STATUS_ESS          = 11,
    DW_VIO_LAT_CTRL_MODE_STATUS_ARP          = 12,
    DW_VIO_LAT_CTRL_MODE_STATUS_L2_PLUS_PLUS = 13,
    DW_VIO_LAT_CTRL_MODE_STATUS_FORCE32      = 0x7FFFFFFF
} dwVioLatCtrlModeStatus;

//# sergen(generate)
typedef enum dwVioLatCtrlModeAvail {
    DW_VIO_LAT_CTRL_MODE_AVAIL_NONE        = 0,
    DW_VIO_LAT_CTRL_MODE_AVAIL_DFLT        = 1U << 0,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L2          = 1U << 1,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L2_PLUS     = 1U << 2,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L2_HFE      = 1U << 3,
    DW_VIO_LAT_CTRL_MODE_AVAIL_AES         = 1U << 4,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L3          = 1U << 5,
    DW_VIO_LAT_CTRL_MODE_AVAIL_L3_EMG      = 1U << 6,
    DW_VIO_LAT_CTRL_MODE_AVAIL_LSS         = 1U << 7,
    DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L2     = 1U << 8,
    DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L3     = 1U << 9,
    DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_RECORD = 1U << 10,
    DW_VIO_LAT_CTRL_MODE_AVAIL_ESS         = 1U << 11,
    DW_VIO_LAT_CTRL_MODE_AVAIL_ARP         = 1U << 12,
    DW_VIO_LAT_CTRL_MODE_AVAIL_FORCE32     = 0x7FFFFFFF
} dwVioLatCtrlModeAvail;

//# sergen(generate)
typedef enum dwVioLatCtrlDriverInterventionStatus {
    /// no detection
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_NOHOWDETECTION = 0,
    /// Driver in the loop/HandsOn
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP = 1,
    /// Driver in the loop: TOUCH
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_TOUCH = 2,
    /// Driver in the loop: GRASP
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_GRASP = 3,
    /// driver in the loop: DOUBLE_GRABBED
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_DOUBLEGRABBED = 4,
    /// Driver in the loop: Park interruption detected
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVPARKINTERRUPT = 5,
    /// Driver in the loop: L3 interruption detected
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVL3INTERRUPT = 6,
    /// Error in driver intervention detection
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINERRHOSWD = 7,
    /// Driver in loop/HandsOn (no HOSWD)
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_DEGRADEDHOSWD = 8,
    /// No driver in the loop detected (no HOSWD)
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_NOHOWDETECTION_DEGRADEDHOSWD = 9,
    DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_FORCE32                      = 0x7FFFFFFF
} dwVioLatCtrlDriverInterventionStatus;

//# sergen(generate)
typedef enum dwVioLatCtrlErrorStatus {
    DW_VIO_LAT_CTRL_ERROR_STATUS_NONE                               = 0,
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_ENGMNT_RQ_SPD            = 1U << 0,
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_MAX_SPD_LIM_MODE_MAX_SPD = 1U << 1,
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_PT_OFF                  = 1U << 2,
    DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_MISC                    = 1U << 3,
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_REV_GR                 = 1U << 4,
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_TMP_OFF_SSA            = 1U << 5,
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_OTHER                      = 1U << 6,
    DW_VIO_LAT_CTRL_ERROR_STATUS_PLAUSIERROR                        = 1U << 7,
    DW_VIO_LAT_CTRL_ERROR_STATUS_COMMERROR                          = 1U << 8,
    DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_1                         = 1U << 9,
    DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_2                         = 1U << 10,
    DW_VIO_LAT_CTRL_ERROR_STATUS_TIMEOUTDTCTD                       = 1U << 11,
    /// “Engagement prevention suppresses activation of MM”
    DW_VIO_LAT_CTRL_ERROR_STATUS_ENGAGEMENTPREVENTIONCOND = 1U << 12,
    /// "Safety Driver Conditions Fault"
    DW_VIO_LAT_CTRL_ERROR_STATUS_SAFETYDRIVERCNDTNSFLT   = 1U << 13,
    DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_DERATING      = 1U << 14,
    DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_MD_MAN_CANCEL = 1U << 15,
    /// "ABSM Interface is permanently closed, new Ignition Cycle necessary"
    DW_VIO_LAT_CTRL_ERROR_STATUS_ABSM_ERROR_IFCPERMCLOSED = 1U << 16,
    /// "interface request rejected by priorization in RoV"
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_TMP_OFF_REJECT = 1U << 17,
    /// "interface request rejected by derating of EPS"
    DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_DERATE = 1U << 18,
    DW_VIO_LAT_CTRL_ERROR_STATUS_FORCE32            = 0x7FFFFFFF
} dwVioLatCtrlErrorStatus;

//# sergen(generate)
typedef enum dwVioESCOperationalState {
    /// Normal operation
    DW_VIO__E_S_C_OPERATIONAL_STATE_NORM = 0,
    /// Initialization
    DW_VIO__E_S_C_OPERATIONAL_STATE_INIT = 1,
    /// Diagnostics
    DW_VIO__E_S_C_OPERATIONAL_STATE_DIAG = 2,
    /// Exhaust emission test
    DW_VIO__E_S_C_OPERATIONAL_STATE_EMT = 3,
    /// Test bench cruise control mode
    DW_VIO__E_S_C_OPERATIONAL_STATE_TBCC = 4,
    /// Temporary or continously system error
    DW_VIO__E_S_C_OPERATIONAL_STATE_FLT = 5,
    /// ESP or ASR control active
    DW_VIO__E_S_C_OPERATIONAL_STATE_ESP_ASR_CTRL_ACTV = 6,
    /// Sport Version
    DW_VIO__E_S_C_OPERATIONAL_STATE_SPORT_OFF = 7,
    /// ESP off mode or Sport plus
    DW_VIO__E_S_C_OPERATIONAL_STATE_OFF_SPORT_PLUS = 8,
    /// ABS control active
    DW_VIO__E_S_C_OPERATIONAL_STATE_ABS_CTRL_ACTV = 9,
    DW_VIO__E_S_C_OPERATIONAL_STATE_FORCE32       = 0x7FFFFFFF
} dwVioESCOperationalState;

//# sergen(generate)
typedef enum dwVioHeadlightState {
    DW_VIO_HEADLIGHT_STATE_UNKNOWN   = 0,
    DW_VIO_HEADLIGHT_STATE_OFF       = 1,
    DW_VIO_HEADLIGHT_STATE_LOW_BEAM  = 2,
    DW_VIO_HEADLIGHT_STATE_HIGH_BEAM = 3,
    /// DAYTIME RUNNING LIGHTS
    DW_VIO_HEADLIGHT_STATE_DRL     = 4,
    DW_VIO_HEADLIGHT_STATE_FORCE32 = 0x7FFFFFFF
} dwVioHeadlightState;

//# sergen(generate)
typedef enum dwVioOutsideTemperatureQuality {
    /// undefined
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_SIG_DEF = 3,
    DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioOutsideTemperatureQuality;

//# sergen(generate)
typedef enum dwVioRainSensorFault {
    /// no info
    DW_VIO_RAIN_SENSOR_FAULT_UNKNOWN = 0,
    /// False
    DW_VIO_RAIN_SENSOR_FAULT_FALSE = 1,
    /// True
    DW_VIO_RAIN_SENSOR_FAULT_TRUE    = 2,
    DW_VIO_RAIN_SENSOR_FAULT_FORCE32 = 0x7FFFFFFF
} dwVioRainSensorFault;

//# sergen(generate)
typedef enum dwVioLightSensorFault {
    /// no info
    DW_VIO_LIGHT_SENSOR_FAULT_UNKNOWN = 0,
    /// False
    DW_VIO_LIGHT_SENSOR_FAULT_FALSE = 1,
    /// True
    DW_VIO_LIGHT_SENSOR_FAULT_TRUE    = 2,
    DW_VIO_LIGHT_SENSOR_FAULT_FORCE32 = 0x7FFFFFFF
} dwVioLightSensorFault;

//# sergen(generate)
typedef enum dwVioMicroSirenDetected {
    /// no info
    DW_VIO_MICRO_SIREN_DETECTED_UNKNOWN = 0,
    /// False
    DW_VIO_MICRO_SIREN_DETECTED_FALSE = 1,
    /// True
    DW_VIO_MICRO_SIREN_DETECTED_TRUE    = 2,
    DW_VIO_MICRO_SIREN_DETECTED_FORCE32 = 0x7FFFFFFF
} dwVioMicroSirenDetected;

//# sergen(generate)
typedef enum dwVioMicroSirenAvailable {
    /// no info
    DW_VIO_MICRO_SIREN_AVAILABLE_UNKNOWN = 0,
    /// False
    DW_VIO_MICRO_SIREN_AVAILABLE_FALSE = 1,
    /// True
    DW_VIO_MICRO_SIREN_AVAILABLE_TRUE    = 2,
    DW_VIO_MICRO_SIREN_AVAILABLE_FORCE32 = 0x7FFFFFFF
} dwVioMicroSirenAvailable;

//# sergen(generate)
typedef enum dwVioBuckleStateDriver {
    /// buckle closed
    DW_VIO_BUCKLE_STATE_DRIVER_CLOSED = 0,
    /// buckle opened
    DW_VIO_BUCKLE_STATE_DRIVER_OPEN = 1,
    /// state not known
    DW_VIO_BUCKLE_STATE_DRIVER_UNKNOWN = 2,
    DW_VIO_BUCKLE_STATE_DRIVER_FORCE32 = 0x7FFFFFFF
} dwVioBuckleStateDriver;

//# sergen(generate)
typedef enum dwVioBuckleStateFrontPassenger {
    /// buckle closed
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_CLOSED = 0,
    /// buckle opened
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_OPEN = 1,
    /// state not known
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_UNKNOWN = 2,
    DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_FORCE32 = 0x7FFFFFFF
} dwVioBuckleStateFrontPassenger;

//# sergen(generate)
typedef enum dwVioTrailerHitchStatus {
    /// unknown status
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_UNKNOWN = 0,
    /// error
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_ERROR = 1,
    /// not fitted / installed
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_NOT_FITTED = 2,
    /// Retracted position
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_RETRACTED = 3,
    /// Working position with nothing plugged in
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED = 4,
    /// Working position with device plugged in
    DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED_ATTACHED = 5,
    DW_VIO_TRAILER_HITCH_STATUS_FORCE32                 = 0x7FFFFFFF
} dwVioTrailerHitchStatus;

//# sergen(generate)
typedef enum dwVioIgnitionStatus {
    /// Ignition lock (0)
    DW_VIO_IGNITION_STATUS_IGN_LOCK = 0,
    /// Ignition off (15c)
    DW_VIO_IGNITION_STATUS_IGN_OFF = 1,
    /// Ignition accessory (15r)
    DW_VIO_IGNITION_STATUS_IGN_ACC = 2,
    /// Ignition on (15)
    DW_VIO_IGNITION_STATUS_IGN_ON = 3,
    /// Ignition start (50)
    DW_VIO_IGNITION_STATUS_IGN_START = 4,
    DW_VIO_IGNITION_STATUS_FORCE32   = 0x7FFFFFFF
} dwVioIgnitionStatus;

//# sergen(generate)
typedef enum dwVioSpeedDirectionESC {
    /// Neither forward nor backward (stop)
    DW_VIO_SPEED_DIRECTION_E_S_C_VOID = 0,
    /// Direction forward
    DW_VIO_SPEED_DIRECTION_E_S_C_FORWARD = 1,
    /// Direction backward
    DW_VIO_SPEED_DIRECTION_E_S_C_BACKWARD = 2,
    DW_VIO_SPEED_DIRECTION_E_S_C_FORCE32  = 0x7FFFFFFF
} dwVioSpeedDirectionESC;

//# sergen(generate)
typedef enum dwVioSpeedQualityESC {
    /// undefined
    DW_VIO_SPEED_QUALITY_E_S_C_NOT_DEFINED = 0,
    /// normal as specified
    DW_VIO_SPEED_QUALITY_E_S_C_NORMAL_OPERATION = 1,
    /// reduced signal integrity, "best effort"
    DW_VIO_SPEED_QUALITY_E_S_C_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_SPEED_QUALITY_E_S_C_SIG_DEF = 3,
    DW_VIO_SPEED_QUALITY_E_S_C_FORCE32 = 0x7FFFFFFF
} dwVioSpeedQualityESC;

//# sergen(generate)
typedef enum dwVioVehicleStopped {
    /// Schroedingers Vehicle Motion
    DW_VIO_VEHICLE_STOPPED_UNKNOWN = 0,
    /// Vehicle moving
    DW_VIO_VEHICLE_STOPPED_FALSE = 1,
    /// Vehicle not moving
    DW_VIO_VEHICLE_STOPPED_TRUE    = 2,
    DW_VIO_VEHICLE_STOPPED_FORCE32 = 0x7FFFFFFF
} dwVioVehicleStopped;

//# sergen(generate)
typedef enum dwVioWheelSpeedQuality {
    /// undefined
    DW_VIO_WHEEL_SPEED_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity, Electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_WHEEL_SPEED_QUALITY_SIG_DEF = 3,
    DW_VIO_WHEEL_SPEED_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioWheelSpeedQuality;

//# sergen(generate)
typedef enum dwVioWheelTicksQuality {
    /// undefined
    DW_VIO_WHEEL_TICKS_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_WHEEL_TICKS_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity, Electrical checks passed
    DW_VIO_WHEEL_TICKS_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_WHEEL_TICKS_QUALITY_SIG_DEF = 3,
    DW_VIO_WHEEL_TICKS_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioWheelTicksQuality;

//# sergen(generate)
typedef enum dwVioWheelTicksDirection {
    /// Neither forward nor backward (stop)
    DW_VIO_WHEEL_TICKS_DIRECTION_VOID = 0,
    /// Direction forward
    DW_VIO_WHEEL_TICKS_DIRECTION_FORWARD = 1,
    /// Direction backward
    DW_VIO_WHEEL_TICKS_DIRECTION_BACKWARD = 2,
    DW_VIO_WHEEL_TICKS_DIRECTION_FORCE32  = 0x7FFFFFFF
} dwVioWheelTicksDirection;

//# sergen(generate)
typedef enum dwVioWheelTicksTimestampQuality {
    /// Not Initialized. still initializing
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_NOT_INIT = 0,
    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_OK = 1,
    /// Synchronization lost.
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_FORCE32   = 0x7FFFFFFF
} dwVioWheelTicksTimestampQuality;

//# sergen(generate)
typedef enum dwVioWheelTorqueQuality {
    /// undefined
    DW_VIO_WHEEL_TORQUE_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_WHEEL_TORQUE_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_WHEEL_TORQUE_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_WHEEL_TORQUE_QUALITY_SIG_DEF = 3,
    DW_VIO_WHEEL_TORQUE_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioWheelTorqueQuality;

//# sergen(generate)
typedef enum dwVioBrakeTorqueWheelsQuality {
    /// undefined
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_SIG_DEF = 3,
    DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioBrakeTorqueWheelsQuality;

//# sergen(generate)
typedef enum dwVioBrakeStatus {
    /// No Braking
    DW_VIO_BRAKE_STATUS_NO_BRAKING = 0,
    /// Braking
    DW_VIO_BRAKE_STATUS_BRAKING = 1,
    /// unknown status
    DW_VIO_BRAKE_STATUS_UNKNOWN = 2,
    DW_VIO_BRAKE_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioBrakeStatus;

//# sergen(generate)
typedef enum dwVioBrakeAllWheelsABS {
    /// Not all wheels
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_INACTIVE = 0,
    /// All wheels in ABS
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_ACTIVE = 1,
    /// unknown status
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_UNKNOWN = 2,
    DW_VIO_BRAKE_ALL_WHEELS_A_B_S_FORCE32 = 0x7FFFFFFF
} dwVioBrakeAllWheelsABS;

//# sergen(generate)
typedef enum dwVioWheelTorqueTimestampsQuality {
    /// Not Initialized. still initializing
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_NOT_INIT = 0,
    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_OK = 1,
    /// Synchronization lost.
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_SYNC_LOST = 2,
    DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_FORCE32   = 0x7FFFFFFF
} dwVioWheelTorqueTimestampsQuality;

//# sergen(generate)
typedef enum dwVioFrontSteeringAngleQuality {
    /// undefined
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_REDUCED_QUALITY = 2,
    /// not initialized
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_INIT = 3,
    /// Signal defect detected
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_SIG_DEF = 4,
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioFrontSteeringAngleQuality;

//# sergen(generate)
typedef enum dwVioFrontSteeringAngleOffsetQuality {
    /// undefined
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_SIG_DEF = 3,
    DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioFrontSteeringAngleOffsetQuality;

//# sergen(generate)
typedef enum dwVioFrontSteeringTimestampQuality {
    /// Not Initialized. still initializing
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_NOT_INIT = 0,
    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_OK = 1,
    /// Synchronization lost.
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_FORCE32   = 0x7FFFFFFF
} dwVioFrontSteeringTimestampQuality;

//# sergen(generate)
typedef enum dwVioRearWheelAngleQuality {
    /// undefined
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_REDUCED_QUALITY = 2,
    /// not initialized
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_INIT = 3,
    /// Signal defect detected
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_SIG_DEF = 4,
    DW_VIO_REAR_WHEEL_ANGLE_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioRearWheelAngleQuality;

//# sergen(generate)
typedef enum dwVioRearWheelAngleOffsetQuality {
    /// undefined
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_SIG_DEF = 3,
    DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioRearWheelAngleOffsetQuality;

//# sergen(generate)
typedef enum dwVioRearWheelAngleTimestampQuality {
    /// Not Initialized. still initializing
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_NOT_INIT = 0,
    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_OK = 1,
    /// Synchronization lost.
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_FORCE32   = 0x7FFFFFFF
} dwVioRearWheelAngleTimestampQuality;

//# sergen(generate)
typedef enum dwVioAbsIntervention {
    /// Normal operation
    DW_VIO_ABS_INTERVENTION_NORM = 0,
    /// Initialization
    DW_VIO_ABS_INTERVENTION_INIT = 1,
    /// Diagnostics
    DW_VIO_ABS_INTERVENTION_DIAG = 2,
    /// Exhaust emission test
    DW_VIO_ABS_INTERVENTION_EMT = 3,
    /// Test bench cruise control mode
    DW_VIO_ABS_INTERVENTION_TBCC = 4,
    /// Temporary or continously system error
    DW_VIO_ABS_INTERVENTION_FLT = 5,
    /// ESP or ASR control active
    DW_VIO_ABS_INTERVENTION_ESP_ASR_CTRL_ACTV = 6,
    /// SPORT-Version of vehicle
    DW_VIO_ABS_INTERVENTION_SPORT_OFF = 7,
    /// ESP off mode (not sport version) or Sport (sport version)
    DW_VIO_ABS_INTERVENTION_SPORT2_OFF = 8,
    /// ABS control active
    DW_VIO_ABS_INTERVENTION_ABS_CTRL_ACTV = 9,
    DW_VIO_ABS_INTERVENTION_FORCE32       = 0x7FFFFFFF
} dwVioAbsIntervention;

//# sergen(generate)
typedef enum dwVioMirrorFoldState {
    /// Mirror/Camera is not in end position and not being moved / ERROR
    DW_VIO_MIRROR_FOLD_STATE_UNKNOWN = 0,
    /// Mirror/Camera is in folded position
    DW_VIO_MIRROR_FOLD_STATE_FOLDED = 1,
    /// Mirror/Camera is in unfolded position
    DW_VIO_MIRROR_FOLD_STATE_UNFOLDED = 2,
    /// Mirror/Camera is folding in
    DW_VIO_MIRROR_FOLD_STATE_FOLD_IN = 3,
    /// Mirror/Camera is folding out
    DW_VIO_MIRROR_FOLD_STATE_FOLD_OUT = 4,
    DW_VIO_MIRROR_FOLD_STATE_FORCE32  = 0x7FFFFFFF
} dwVioMirrorFoldState;

//# sergen(generate)
typedef enum dwVioCameraFoldState {
    /// Mirror/Camera is not in end position and not being moved / ERROR
    DW_VIO_CAMERA_FOLD_STATE_UNKNOWN = 0,
    /// Mirror/Camera is in folded position
    DW_VIO_CAMERA_FOLD_STATE_FOLDED = 1,
    /// Mirror/Camera is in unfolded position
    DW_VIO_CAMERA_FOLD_STATE_UNFOLDED = 2,
    /// Mirror/Camera is folding in
    DW_VIO_CAMERA_FOLD_STATE_FOLD_IN = 3,
    /// Mirror/Camera is folding out
    DW_VIO_CAMERA_FOLD_STATE_FOLD_OUT = 4,
    DW_VIO_CAMERA_FOLD_STATE_FORCE32  = 0x7FFFFFFF
} dwVioCameraFoldState;

//# sergen(generate)
typedef enum dwVioCameraFoldRequest {
    /// No actuation
    DW_VIO_CAMERA_FOLD_REQUEST_NONE = 0,
    /// Mirror should fold in
    DW_VIO_CAMERA_FOLD_REQUEST_FOLD_IN = 1,
    /// Mirror should out
    DW_VIO_CAMERA_FOLD_REQUEST_FOLD_OUT = 2,
    DW_VIO_CAMERA_FOLD_REQUEST_FORCE32  = 0x7FFFFFFF
} dwVioCameraFoldRequest;

//# sergen(generate)
typedef enum dwVioSuspensionLevelQuality {
    /// undefined
    DW_VIO_SUSPENSION_LEVEL_QUALITY_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_SUSPENSION_LEVEL_QUALITY_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_SUSPENSION_LEVEL_QUALITY_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_SUSPENSION_LEVEL_QUALITY_SIG_DEF = 3,
    DW_VIO_SUSPENSION_LEVEL_QUALITY_FORCE32 = 0x7FFFFFFF
} dwVioSuspensionLevelQuality;

//# sergen(generate)
typedef enum dwVioSuspensionLevelTimestampQuality {
    /// Not Initialized. still initializing
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_NOT_INIT = 0,
    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_OK = 1,
    /// Synchronization lost.
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_SYNC_LOST = 2,
    DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_FORCE32   = 0x7FFFFFFF
} dwVioSuspensionLevelTimestampQuality;

//# sergen(generate)
typedef enum dwVioSuspensionLevelCalibrationState {
    /// False
    DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_FALSE = 0,
    /// True
    DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_TRUE    = 1,
    DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_FORCE32 = 0x7FFFFFFF
} dwVioSuspensionLevelCalibrationState;

//# sergen(generate)
typedef enum dwVioEmStatus {
    /// undefined
    DW_VIO_EM_STATUS_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_EM_STATUS_NORMAL_OPERATION = 1,
    /// reduced signal integrity
    DW_VIO_EM_STATUS_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_EM_STATUS_SIG_DEF = 3,
    DW_VIO_EM_STATUS_FORCE32 = 0x7FFFFFFF
} dwVioEmStatus;

//# sergen(generate)
typedef enum dwVioEmStandStill {
    /// Vehicle moving
    DW_VIO_EM_STAND_STILL_FALSE = 0,
    /// Vehicle not moving
    DW_VIO_EM_STAND_STILL_TRUE = 1,
    /// Schroedingers Vehicle Motion
    DW_VIO_EM_STAND_STILL_UNKNOWN = 2,
    DW_VIO_EM_STAND_STILL_FORCE32 = 0x7FFFFFFF
} dwVioEmStandStill;

//# sergen(generate)
typedef enum dwVioTirePressureQuality {
    /// undefined
    DW_VIO_TIRE_PRESSURE_QUALITY_NOT_DEFINED = 0,
    /// normal as specified
    DW_VIO_TIRE_PRESSURE_QUALITY_NORMAL_OPERATION = 1,
    /// slow deflation
    DW_VIO_TIRE_PRESSURE_QUALITY_SOFT_WARNING = 2,
    /// low pressure threshold exceeded
    DW_VIO_TIRE_PRESSURE_QUALITY_LOW_PRESSURE = 3,
    /// fast deflation - pressure drop
    DW_VIO_TIRE_PRESSURE_QUALITY_FAST_DEFLATION = 4,
    DW_VIO_TIRE_PRESSURE_QUALITY_FORCE32        = 0x7FFFFFFF
} dwVioTirePressureQuality;

//# sergen(generate)
typedef enum dwVioTirePressureMonitoringState {
    /// TPMS active
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_ACTIVE = 0,
    /// Waiting for pressure values
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_WAIT = 1,
    /// TPM system error
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_ERROR = 2,
    /// no wheel sensors
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_NO_SENSORS = 3,
    /// TPM activation acknowledged
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_RESET_ACK = 4,
    DW_VIO_TIRE_PRESSURE_MONITORING_STATE_FORCE32   = 0x7FFFFFFF
} dwVioTirePressureMonitoringState;

//# sergen(generate)
typedef enum dwVioTrailerConnected {
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_UNKNOWN = 0,
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_NO      = 1,
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_YES     = 2,
    DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_ERROR   = 3,
    DW_VIO_TRAILER_CONNECTED_FORCE32                   = 0x7FFFFFFF
} dwVioTrailerConnected;

//# sergen(generate)
typedef enum dwVioWheelSpeedQualityHigh {
    /// undefined
    DW_VIO_WHEEL_SPEED_QUALITY_HIGH_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_HIGH_NORMAL_OPERATION = 1,
    /// reduced signal integrity, Electrical checks passed
    DW_VIO_WHEEL_SPEED_QUALITY_HIGH_REDUCED_QUALITY = 2,
    /// Signal defect detected
    DW_VIO_WHEEL_SPEED_QUALITY_HIGH_SIG_DEF = 3,
    DW_VIO_WHEEL_SPEED_QUALITY_HIGH_FORCE32 = 0x7FFFFFFF
} dwVioWheelSpeedQualityHigh;

//# sergen(generate)
typedef enum dwVioWheelTicksDirectionHigh {
    /// Neither forward nor backward (stop)
    DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_VOID = 0,
    /// Direction forward
    DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_FORWARD = 1,
    /// Direction backward
    DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_BACKWARD = 2,
    DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_FORCE32  = 0x7FFFFFFF
} dwVioWheelTicksDirectionHigh;

//# sergen(generate)
typedef enum dwVioWheelTicksTimestampQualityHigh {
    /// Not Initialized. still initializing
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_NOT_INIT = 0,
    /// Normal Operation. Functional and Electrical Checks Passed
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_OK = 1,
    /// Synchronization lost.
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_SYNC_LOST = 2,
    DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_FORCE32   = 0x7FFFFFFF
} dwVioWheelTicksTimestampQualityHigh;

//# sergen(generate)
typedef enum dwVioFrontSteeringAngleQualityHigh {
    /// undefined
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_NOT_DEFINED = 0,
    /// Functional and electrical checks passed
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_NORMAL_OPERATION = 1,
    /// Upper Limit temporarily exceeded
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_TMP_HIGH = 2,
    /// Lower Limit temporarily exceeded
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_TMP_LOW = 3,
    /// Upper Limit and Error Integral exceeded
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_PERM_HIGH = 4,
    /// Lower Limit and Error Integral exceeded
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_PERM_LOW = 5,
    DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_FORCE32  = 0x7FFFFFFF
} dwVioFrontSteeringAngleQualityHigh;

//# sergen(generate)
typedef enum dwVioDriverInterventionDetectionHigh {
    /// no detection
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_NO_DETECTION = 0,
    /// Driver not in the loop
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_NOT_IN_LOOP = 1,
    /// Driver in the loop Step1 ABC
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_1_ABC = 2,
    /// Driver in the loop Step1 EH
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_1_EH = 3,
    /// Driver in the loop Step2
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_2 = 4,
    DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_FORCE32            = 0x7FFFFFFF
} dwVioDriverInterventionDetectionHigh;

//# sergen(generate)
typedef enum dwVioSteeringSystemStatusHigh {
    /// Not available
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_NOT_AVBL = 0,
    /// Degraded available
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_DEG_AVBL = 1,
    /// Available
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_AVBL = 2,
    DW_VIO_STEERING_SYSTEM_STATUS_HIGH_FORCE32      = 0x7FFFFFFF
} dwVioSteeringSystemStatusHigh;

//# sergen(generate)
typedef enum dwVioSteeringSystemFailureReasonHigh {
    /// EPS fully available no reason
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_NO_REASON = 0,
    /// EPS temporarily degraded
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_Temp = 1,
    /// EPS temporarily degraded
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_Temp = 2,
    /// EPS permanently degraded
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_PERM = 3,
    /// EPS permanently degraded
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_PERM = 4,
    /// EPS degraded due to IPC failure
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_IPC = 5,
    /// EPS degraded due to IPC failure
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_IPC = 6,
    /// EPS not available due to EPS1 and EPS2 failure
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS_NA  = 28,
    DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_FORCE32 = 0x7FFFFFFF
} dwVioSteeringSystemFailureReasonHigh;

//# sergen(generate)
typedef enum dwVioSteeringSystemOffStatusHigh {
    /// not off
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_NOT_OFF = 0,
    /// HLC-Off-State in EPS because of ADSE-activation
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_ADSE = 1,
    /// HLC-Off-State in EPS because of driver activation
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_DRVINT = 2,
    /// HLC-Off-State in EPS because of Hand-over-time expired
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_NO_TERM_IDC = 3,
    /// HLC-Off-State in EPS because of EPS activation
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_EPSFKT = 4,
    /// HLC-Off-State in EPS because of high vehicle speed
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_VEHSPDLIM = 5,
    /// HLC-Off-State in EPS because of der driving state not in D
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_PT_DRVPOS = 6,
    /// HLC-Off-State in EPS because of driving backwards
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_VEHDRVDIR = 7,
    /// HLC-Off-State in EPS because of limited steering angle
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_FWA_POS_LIM = 8,
    /// HLC-Off-State in EPS because of limited steering angle speed
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_FWA_SPD_LIM = 9,
    /// HLC-Off-State in EPS because of other reasons
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_OTHER = 10,
    DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_FORCE32       = 0x7FFFFFFF
} dwVioSteeringSystemOffStatusHigh;

//# sergen(generate)
typedef enum dwVioSteeringSystemInterfaceStatusHigh {
    /// Init
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_INIT = 0,
    /// Off
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_OFF = 1,
    /// Ready
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_READY = 2,
    /// Ramp to HAF
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2H = 3,
    /// ABC Steer
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_ABC_STEER = 4,
    /// EH Steer
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_EH_STEER = 5,
    /// Ramp to Ready
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2R = 6,
    /// Ramp to Off
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2O = 7,
    /// Ramp to Error
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2E = 8,
    /// Error
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_ERROR = 9,
    DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_FORCE32       = 0x7FFFFFFF
} dwVioSteeringSystemInterfaceStatusHigh;

//# sergen(generate)
typedef enum dwVioFrontSteeringAngleLimitationStatusHigh {
    /// No Limit
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_NO_LIM = 0,
    /// Position Limit
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_POS_LIM = 1,
    /// Speed Limit
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_SPD_LIM = 2,
    /// Position und Speed Limit
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_POS_SPD_LIM = 3,
    DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_FORCE32          = 0x7FFFFFFF
} dwVioFrontSteeringAngleLimitationStatusHigh;

//# sergen(generate)
typedef struct dwVehicleIOSafetyCommandValidityInfo
{
    dwSignalValidity latCtrlCrossTrackError;
    dwSignalValidity latCtrlReadyForCollaborativeSteering;
    dwSignalValidity longCtrlBrakePrefillRequest;
    dwSignalValidity longCtrlHapticWarningRequest;
    dwSignalValidity longCtrlHapticWarningTargetType;
    dwSignalValidity latCtrlCurvRequest;
    dwSignalValidity latCtrlReferenceInputSelect;
    dwSignalValidity latCtrlASILStatus;
    dwSignalValidity latCtrlFrontWheelAngleRequest;
    dwSignalValidity latCtrlSteeringWheelAngleRequest;
    dwSignalValidity latCtrlSteeringWheelAngleRateMax;
    dwSignalValidity latCtrlInterventionDirectionLKA;
    dwSignalValidity latCtrlInterventionDirectionELK;
    dwSignalValidity latCtrlLaneChangePushingLaterally;
    dwSignalValidity latCtrlRearWheelAngleRequest;
    dwSignalValidity longCtrGearCommand;
    dwSignalValidity longCtrlRemainingDistance;
    dwSignalValidity longCtrlRedundCheckRequest;
    dwSignalValidity longCtrlReferenceInputRequest;
    dwSignalValidity longCtrlAccelRequest;
    dwSignalValidity longCtrlThrottlePedalRequest;
    dwSignalValidity longCtrlBrakePedalRequest;
    dwSignalValidity longCtrlMaxSpeedRequest;
    dwSignalValidity latCtrlCurvReqPred;
    dwSignalValidity latCtrlCurvReqAdditional;
    dwSignalValidity latCtrlCurvReqAdditionalActive;
    dwSignalValidity latCtrlCurvReqAdditionalPrefill;
    dwSignalValidity latCtrlActivationRequest;
    dwSignalValidity longCtrlActivationRequest;
    dwSignalValidity longCtrlInteractionModeRequest;
    dwSignalValidity longCtrlHoldRequest;
    dwSignalValidity longCtrlAccelPerfRequest;
    dwSignalValidity latCtrlModeRequest;
    dwSignalValidity latCtrlHapticWarningRequest;
    dwSignalValidity lonCtrlSafetyLimRequest;
    dwSignalValidity timestamp_us;
    dwSignalValidity emLinearVelocity[3];
    dwSignalValidity emLinearVelocityStdev[3];
    dwSignalValidity emLinearAccel[3];
    dwSignalValidity emAngularVelocity[3];
    dwSignalValidity emAngularAccel[3];
    dwSignalValidity emOrientation[3];
    dwSignalValidity emOrientationStdev[3];
    dwSignalValidity emTranslation[3];
    dwSignalValidity emTimestamp;
    dwSignalValidity emStatus;
    dwSignalValidity emSensorPosition[3];
    dwSignalValidity emStandStill;
    dwSignalValidity reserved[64];
} dwVehicleIOSafetyCommandValidityInfo;

/**
* Safety critical RoV commands. Expected to be sent from NDAS to Actuation Module.
*/
#ifndef DOXYGEN_SHOULD_SKIP_THIS
//# sergen(generate)
#endif
typedef struct dwVehicleIOSafetyCommand
{
    dwVehicleIOSafetyCommandValidityInfo validityInfo;

    /// @note ID VS-10071
    /// @note description Used for debugging controller integration..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m
    float32_t latCtrlCrossTrackError;

    /// @note ID VS-10075
    /// @note description BP is ready in context of cooperative steering.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlReadyForCollaborativeSteering;

    /// @note ID VS-11110
    /// @note description brake pressure prefill charge request.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t longCtrlBrakePrefillRequest;

    /// @note ID VS-11111
    /// @note description e.g. reversible pre-tension of seat belt or brake jolt.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t longCtrlHapticWarningRequest;

    /// @note ID VS-11112
    /// @note description multi stage signal used when the haptic warning is a seat belt pre-tensioner.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_NONE,
    ///                DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_SOFT_TARGET,
    ///                DW_VIO_LONG_CTRL_HAPTIC_WARNING_TARGET_TYPE_HARD_TARGET
    ///        }
    dwVioLongCtrlHapticWarningTargetType longCtrlHapticWarningTargetType;

    /// @note ID VS-11130
    /// @note description Effective curvature request (in code rearAxleCurvatureValue). RearAxle is the reference point.
    /// @note min -1.0737    max 1.0737
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvRequest;

    /// @note ID VS-11131
    /// @note description selecting what mode of lateral control is active (curvature or steering angle)..
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_CURVATURE,
    ///                DW_VIO_LAT_CTRL_REFERENCE_INPUT_SELECT_STEERINGANGLE
    ///        }
    dwVioLatCtrlReferenceInputSelect latCtrlReferenceInputSelect;

    /// @note ID VS-11136
    /// @note description ASIL Status of control input.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_A_S_I_L_STATUS_QM,
    ///                DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_A,
    ///                DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_B,
    ///                DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_C,
    ///                DW_VIO_LAT_CTRL_A_S_I_L_STATUS_ASIL_D
    ///        }
    dwVioLatCtrlASILStatus latCtrlASILStatus;

    /// @note ID VS-11140
    /// @note description Effective front steering angle request, used for parking control.
    /// @note min -1.4297    max 1.4297
    /// @note freq 100    unit rad
    float32_t latCtrlFrontWheelAngleRequest;

    /// @note ID VS-11145
    /// @note description Steering Wheel Angle Request.
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t latCtrlSteeringWheelAngleRequest;

    /// @note ID VS-11146
    /// @note description Rate Limit for Steering Wheel Angle Request.
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t latCtrlSteeringWheelAngleRateMax;

    /// @note ID VS-11150
    /// @note description direction of the steering intervention, opposite to side of departure.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_INVALID,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_FRONT,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_LEFT,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_RIGHT,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_L_K_A_EVENT_DIRECTION_REAR
    ///        }
    dwVioLatCtrlInterventionDirectionLKA latCtrlInterventionDirectionLKA;

    /// @note ID VS-11151
    /// @note description direction of the steering intervention, opposite to side of departure.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_INVALID,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_FRONT,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_LEFT,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_RIGHT,
    ///                DW_VIO_LAT_CTRL_INTERVENTION_DIRECTION_E_L_K_EVENT_DIRECTION_REAR
    ///        }
    dwVioLatCtrlInterventionDirectionELK latCtrlInterventionDirectionELK;

    /// @note ID VS-11152
    /// @note description This bit is set if lateral movement has started.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlLaneChangePushingLaterally;

    /// @note ID VS-11170
    /// @note description Effective rear steering angle request, for low speed maneuvering.
    /// @note min -0.35744343    max 0.35744343
    /// @note freq 100    unit rad
    float32_t latCtrlRearWheelAngleRequest;

    /// @note ID VS-11200
    /// @note description Requested vehicle gear.
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTR_GEAR_COMMAND_IDLE,
    ///                DW_VIO_LONG_CTR_GEAR_COMMAND_D,
    ///                DW_VIO_LONG_CTR_GEAR_COMMAND_R,
    ///                DW_VIO_LONG_CTR_GEAR_COMMAND_P
    ///        }
    dwVioLongCtrGearCommand longCtrGearCommand;

    /// @note ID VS-11220
    /// @note description Remaining distance the vehicle can travel before stopping. Applicable forward and in reverse directions. Combined with max speed request..
    /// @note min -0.15    max 10.08
    /// @note freq 100    unit meter
    float32_t longCtrlRemainingDistance;

    /// @note ID VS-11221
    /// @note description signal for remote parking to check for redundancy.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t longCtrlRedundCheckRequest;

    /// @note ID VS-11224
    /// @note description Signalizes which reference input (acceleration, remaining distance, velocity) should be used.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_IDLE,
    ///                DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_ACCEL_INPUT,
    ///                DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_SPEED_INPUT,
    ///                DW_VIO_LONG_CTRL_REFERENCE_INPUT_REQUEST_DIST_INPUT
    ///        }
    dwVioLongCtrlReferenceInputRequest longCtrlReferenceInputRequest;

    /// @note ID VS-11230
    /// @note description Time derivative of longitudinal velocity request.
    /// @note min -40    max 25
    /// @note freq 100    unit meter/sec2
    float32_t longCtrlAccelRequest;

    /// @note ID VS-11245
    /// @note description legacy control signal.
    /// @note min 0    max 1
    /// @note freq 100    unit unitless
    float32_t longCtrlThrottlePedalRequest;

    /// @note ID VS-11246
    /// @note description legacy control signal.
    /// @note min 0    max 1
    /// @note freq 100    unit unitless
    float32_t longCtrlBrakePedalRequest;

    /// @note ID VS-11260
    /// @note description Maximum speed the vehice can travel in while using distance2stop request. .
    /// @note min 0    max 5
    /// @note freq 100    unit meter/sec
    float32_t longCtrlMaxSpeedRequest;

    /// @note ID VS-11320
    /// @note description The target curvature without feedback compensation. Can be used to represent the target curvature also at some brief period in the future..
    /// @note min -1.0737    max 1.0737
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvReqPred;

    /// @note ID VS-11325
    /// @note description Effective secondary curvature request. Curvature for the secondary means of actuation (e.g. differential braking).
    /// @note min -1.0737    max 1.0737
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvReqAdditional;

    /// @note ID VS-11326
    /// @note description This signal describes whether a secondary curvature request is requested.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlCurvReqAdditionalActive;

    /// @note ID VS-11327
    /// @note description If the secondary control is a braking interface, this requests to pre-fill the braking system for shorter response.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlCurvReqAdditionalPrefill;

    /// @note ID VS-17000
    /// @note description Activation request of lateral control.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlActivationRequest;

    /// @note ID VS-17002
    /// @note description Activation request of longitudinal control.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t longCtrlActivationRequest;

    /// @note ID VS-17003
    /// @note description Signalizes requested behaviour for driver interaction.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_IDLE,
    ///                DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_REGENERATION_MODE,
    ///                DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_MIN_MODE,
    ///                DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_MAX_MODE,
    ///                DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_DIRECT_MODE,
    ///                DW_VIO_LONG_CTRL_INTERACTION_MODE_REQUEST_DECOUPLING_MODE
    ///        }
    dwVioLongCtrlInteractionModeRequest longCtrlInteractionModeRequest;

    /// @note ID VS-17004
    /// @note description Signalizes request for StillStand Coordination.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_HOLD_REQUEST_NOMON_FLWUP,
    ///                DW_VIO_LONG_CTRL_HOLD_REQUEST_SSCMON_STNDSTILL_SEC,
    ///                DW_VIO_LONG_CTRL_HOLD_REQUEST_SSC_SEC_RQ
    ///        }
    dwVioLongCtrlHoldRequest longCtrlHoldRequest;

    /// @note ID VS-17011
    /// @note description Request for precision or "slack" allowed for control to choose optimal strategy vs. high accuracy.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_NONE,
    ///                DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_COMFORT,
    ///                DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_DYNAMIC,
    ///                DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_HIGH_ACCURACY,
    ///                DW_VIO_LONG_CTRL_ACCEL_PERF_REQUEST_EMERGENCY
    ///        }
    dwVioLongCtrlAccelPerfRequest longCtrlAccelPerfRequest;

    /// @note ID VS-17110
    /// @note description requested mode for the lateral control interface.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_IDLE,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_L2,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_L2_PLUS,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_L2_HFE,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_AES,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_L3,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_L3_EMG,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_LSS,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_L2,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_L3,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_PARK_RECORD,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_ESS,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_ARP,
    ///                DW_VIO_LAT_CTRL_MODE_REQUEST_L2_PLUS_PLUS
    ///        }
    dwVioLatCtrlModeRequest latCtrlModeRequest;

    /// @note ID VS-17111
    /// @note description triggers a haptic warning, e.g. in the steering wheel or seat.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t latCtrlHapticWarningRequest;

    /// @note ID VS-17120
    /// @note description Longitudinal Mode Request for functions that have medium safety requirements on activation Request for Longitudinal interface to go into one of the following modes: manual/human driving, active safety, L1/L2, parking.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_NONE,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_MANEUVERING,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_PARKING_CONTROL,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_REMOTE_OR_L4_PARKING,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_DRIVER_BRAKE_SUPPORT,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_COLLISION_AVOIDANCE,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_COLLISION_AVOIDANCE_PLUS,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_CRUISE_CONTROL,
    ///                DW_VIO_LON_CTRL_SAFETY_LIM_REQUEST_L3_DRIVING
    ///        }
    dwVioLonCtrlSafetyLimRequest lonCtrlSafetyLimRequest;

    /// @note ID VS-17510
    /// @note description SafetyCommand Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t timestamp_us;

    /// @note ID VS-31010
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m/s
    float32_t emLinearVelocity[3];

    /// @note ID VS-31011
    /// @note description Vehicle linear velocity standard deviation aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m/s
    float32_t emLinearVelocityStdev[3];

    /// @note ID VS-31020
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m/s²
    float32_t emLinearAccel[3];

    /// @note ID VS-31030
    /// @note description Vehicle angular velocity aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float32_t emAngularVelocity[3];

    /// @note ID VS-31040
    /// @note description Vehicle angular acceleration aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float32_t emAngularAccel[3];

    /// @note ID VS-31110
    /// @note description Vehicle orientation (integrated, as Euler angles, since t0). Differently from VS-90020 (which is a signal that can be provided by certain types of IMUs as part of their internal state estimation, and is not used by egomotion), this is an output signal from egomotion estimator. Egomotion outputs the orientation of the vehicle, as NDAS “rig” coordinate frame, relative to a local horizontal, local vertical coordinate frame.  Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases    A Kalman filter and integrator combine information from wheel odometry (incl. steering), suspension and IMU into a 6 degrees of freedom motion estimation, also known as dead reckoning. The orientation representation in VS-31110 uses the DriveWorks Euler angle convention, described as:    - One rotation is applied about each of the axes (use of a Tait-Bryan convention)  - The order of the rotations is either of (both are equivalent):  -- z-y’-x’’: (1) yaw about original fixed z axis, (2) pitch about interim rotated y axis, (3) roll about interim rotated x axis  -- x-y-z: (1) roll about fixed x axis, (2) pitch about fixed y axis, (3) yaw about fixed z axis  All coordinate frames are right-handed.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t emOrientation[3];

    /// @note ID VS-31111
    /// @note description Vehicle orientation standard deviation (for each Euler angle) (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t emOrientationStdev[3];

    /// @note ID VS-31120
    /// @note description Vehicle translation (integrated, since t0). The translation representation in VS-31120 is the position of the vehicle in the local horizontal, local vertical coordinate frame defined at t=0. As egomotion is a dead reckoning solution, the position values should only be used and compared in a local sense; the motion of the vehicle between two points nearby in time (order: a couple seconds, tens of seconds, depending on the application and accuracy requirements). Egomotion will drift and interpreting the position signal as an absolute signal in a fixed coordinate frame will lead to incorrect use. Egomotion is not localization. Localization will provide an absolute position in a global coordinate system (e.g. WGS-84). Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m
    float64_t emTranslation[3];

    /// @note ID VS-31130
    /// @note description Timestamp of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t emTimestamp;

    /// @note ID VS-31140
    /// @note description Validity of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_EM_STATUS_NOT_DEFINED,
    ///                DW_VIO_EM_STATUS_NORMAL_OPERATION,
    ///                DW_VIO_EM_STATUS_REDUCED_QUALITY,
    ///                DW_VIO_EM_STATUS_SIG_DEF
    ///        }
    dwVioEmStatus emStatus;

    /// @note ID VS-31141
    /// @note description Egomotion Position of "virtual" sensor.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m
    float32_t emSensorPosition[3];

    /// @note ID VS-31142
    /// @note description Egomotion standstill detected based on wheel ticks.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_EM_STAND_STILL_FALSE,
    ///                DW_VIO_EM_STAND_STILL_TRUE,
    ///                DW_VIO_EM_STAND_STILL_UNKNOWN
    ///        }
    dwVioEmStandStill emStandStill;

    uint8_t reserved[512];
} dwVehicleIOSafetyCommand;

//# sergen(generate)
typedef struct dwVehicleIOActuationFeedbackValidityInfo
{
    dwSignalValidity latCtrlCurvatureActual;
    dwSignalValidity rearWheelAngle;
    dwSignalValidity rearWheelAngleFactor;
    dwSignalValidity steeringWheelTorque;
    dwSignalValidity steeringWheelAngle;
    dwSignalValidity steeringWheelAngleQuality;
    dwSignalValidity holdStatus;
    dwSignalValidity throttleValue;
    dwSignalValidity driverBrakePedal;
    dwSignalValidity gearStatus;
    dwSignalValidity gearTarget;
    dwSignalValidity drivePositionStatus;
    dwSignalValidity drivePositionTarget;
    dwSignalValidity driverOverrideThrottle;
    dwSignalValidity latCtrlCurvCapMin[10];
    dwSignalValidity latCtrlCurvCapMax[10];
    dwSignalValidity latCtrlEPSLimitStatus;
    dwSignalValidity latCtrlLoopStatus;
    dwSignalValidity longCtrlRedundCheckStatus;
    dwSignalValidity longCtrlEstimatedStopDistance;
    dwSignalValidity longCtrlFrictionRangeEstimation;
    dwSignalValidity latCtrlCurvReqAdditionalStatus;
    dwSignalValidity longCtrlStatus;
    dwSignalValidity longCtrlFaultStatus;
    dwSignalValidity longCtrlBrakeTorqueAvailable;
    dwSignalValidity longCtrlAccelAvailable;
    dwSignalValidity longCtrlActiveSystem;
    dwSignalValidity brakePedalStatus;
    dwSignalValidity longCtrlEcoAssistStatus;
    dwSignalValidity longCtrlComAvailable;
    dwSignalValidity latCtrlStatus;
    dwSignalValidity latCtrlModeStatus;
    dwSignalValidity latCtrlModeAvail;
    dwSignalValidity latCtrlDriverInterventionStatus;
    dwSignalValidity handsoffDetectedFiltered;
    dwSignalValidity latCtrlErrorStatus;
    dwSignalValidity latCtrlMaxFrontWheelAngleRequestAllowed;
    dwSignalValidity latCtrlMinFrontWheelAngleRequestAllowed;
    dwSignalValidity latCtrlMaxRearWheelAngleRequestAllowed;
    dwSignalValidity timestamp_us;
    dwSignalValidity trailerHitchStatus;
    dwSignalValidity speedESC;
    dwSignalValidity speedDirectionESC;
    dwSignalValidity speedQualityESC;
    dwSignalValidity speedMin;
    dwSignalValidity speedMax;
    dwSignalValidity speedESCTimestamp;
    dwSignalValidity vehicleStopped;
    dwSignalValidity wheelSpeed[4];
    dwSignalValidity wheelSpeedQuality[4];
    dwSignalValidity wheelTicks[4];
    dwSignalValidity wheelTicksQuality[4];
    dwSignalValidity wheelTicksDirection[4];
    dwSignalValidity wheelTicksTimestamp[4];
    dwSignalValidity wheelTicksTimestampQuality[4];
    dwSignalValidity wheelTorque[4];
    dwSignalValidity wheelTorqueQuality[4];
    dwSignalValidity brakeTorqueWheels[4];
    dwSignalValidity brakeTorqueWheelsQuality[4];
    dwSignalValidity brakeTorque;
    dwSignalValidity brakeStatus;
    dwSignalValidity brakeAllWheelsABS;
    dwSignalValidity wheelTorqueTimestamps[4];
    dwSignalValidity wheelTorqueTimestampsQuality[4];
    dwSignalValidity frontSteeringAngle;
    dwSignalValidity frontSteeringAngleQuality;
    dwSignalValidity frontSteeringAngleOffset;
    dwSignalValidity frontSteeringAngleOffsetQuality;
    dwSignalValidity frontSteeringTimestamp;
    dwSignalValidity frontSteeringTimestampQuality;
    dwSignalValidity rearWheelAngleQuality;
    dwSignalValidity rearWheelAngleOffset;
    dwSignalValidity rearWheelAngleOffsetQuality;
    dwSignalValidity rearWheelAngleTimestamp;
    dwSignalValidity rearWheelAngleTimestampQuality;
    dwSignalValidity rearWheelAngleMaximum;
    dwSignalValidity absIntervention;
    dwSignalValidity wheelSpeedHigh[4];
    dwSignalValidity wheelSpeedQualityHigh[4];
    dwSignalValidity wheelTicksHigh[4];
    dwSignalValidity wheelTicksDirectionHigh[4];
    dwSignalValidity wheelTicksTimestampHigh[4];
    dwSignalValidity wheelTicksTimestampQualityHigh[4];
    dwSignalValidity frontSteeringAngleHigh;
    dwSignalValidity frontSteeringAngleQualityHigh;
    dwSignalValidity steeringWheelTorqueHigh;
    dwSignalValidity frontSteeringTimestampHigh;
    dwSignalValidity driverInterventionDetectionHigh;
    dwSignalValidity steeringSystemStatusHigh;
    dwSignalValidity steeringSystemFailureReasonHigh;
    dwSignalValidity steeringSystemOffStatusHigh;
    dwSignalValidity steeringSystemInterfaceStatusHigh;
    dwSignalValidity frontSteeringAngleLimitationStatusHigh;
    dwSignalValidity latCtrlMaxFrontWheelAngleRequestAllowedHigh;
    dwSignalValidity latCtrlMaxFrontWheelAngleSpeedRequestAllowedHigh;
    dwSignalValidity latCtrlFrontWheelAngleRequestLimitedHigh;
    dwSignalValidity latCtrlFailedDegradedSteeringTimeToTakeoverHigh;
    dwSignalValidity latCtrlRackForceHigh;
    dwSignalValidity latCtrlRackForceEffectiveHigh;
    dwSignalValidity reserved[64];
} dwVehicleIOActuationFeedbackValidityInfo;

/**
* Feedback from actuation. Expected to be sent from FSI actuation code back to NDAS.
*/
#ifndef DOXYGEN_SHOULD_SKIP_THIS
//# sergen(generate)
#endif
typedef struct dwVehicleIOActuationFeedback
{
    dwVehicleIOActuationFeedbackValidityInfo validityInfo;

    /// @note ID VS-10040
    /// @note description Vector form of effective curvature request (uniform time-spaced).
    /// @note min -0.16384    max 0.16384
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvatureActual;

    /// @note ID VS-10080
    /// @note description Effective rear steering angle (wheel to driving axis), positive to left.
    /// @note min -0.3573    max 0.3573
    /// @note freq 100    unit rad
    float32_t rearWheelAngle;

    /// @note ID VS-10082
    /// @note description Effective rear steering angle ratio ().
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    float32_t rearWheelAngleFactor;

    /// @note ID VS-10090
    /// @note description Measurement driver's torque input from steering wheel, unfiltered.
    /// @note min -81.9    max 81.9
    /// @note freq 100    unit newton.meter
    float32_t steeringWheelTorque;

    /// @note ID VS-10091
    /// @note description Angle of the steering wheel as picked up by the sensor close to the steering wheel, positive to left.
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t steeringWheelAngle;

    /// @note ID VS-10092
    /// @note description Integrity quality of steering wheel angle.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR_INI,
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_INI,
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR,
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_OK
    ///        }
    dwVioSteeringWheelAngleQuality steeringWheelAngleQuality;

    /// @note ID VS-10120
    /// @note description Parking brake / hold state report.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_HOLD_STATUS_UNKNOWN,
    ///                DW_VIO_HOLD_STATUS_NOHOLD,
    ///                DW_VIO_HOLD_STATUS_HOLD,
    ///                DW_VIO_HOLD_STATUS_TRANSITION
    ///        }
    dwVioHoldStatus holdStatus;

    /// @note ID VS-10130
    /// @note description Current state/postiion of the accelerator pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t throttleValue;

    /// @note ID VS-10140
    /// @note description Current state/position of the brake pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t driverBrakePedal;

    /// @note ID VS-10150
    /// @note description Current vehicle gear.
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_GEAR_STATUS_N,
    ///                DW_VIO_GEAR_STATUS_D1,
    ///                DW_VIO_GEAR_STATUS_D2,
    ///                DW_VIO_GEAR_STATUS_D3,
    ///                DW_VIO_GEAR_STATUS_D4,
    ///                DW_VIO_GEAR_STATUS_D5,
    ///                DW_VIO_GEAR_STATUS_D6,
    ///                DW_VIO_GEAR_STATUS_D7,
    ///                DW_VIO_GEAR_STATUS_D8,
    ///                DW_VIO_GEAR_STATUS_D9,
    ///                DW_VIO_GEAR_STATUS_R,
    ///                DW_VIO_GEAR_STATUS_R2,
    ///                DW_VIO_GEAR_STATUS_P,
    ///                DW_VIO_GEAR_STATUS_PWRFREE
    ///        }
    dwVioGearStatus gearStatus;

    /// @note ID VS-10151
    /// @note description Gear that will be shifted to..
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_GEAR_TARGET_N,
    ///                DW_VIO_GEAR_TARGET_D1,
    ///                DW_VIO_GEAR_TARGET_D2,
    ///                DW_VIO_GEAR_TARGET_D3,
    ///                DW_VIO_GEAR_TARGET_D4,
    ///                DW_VIO_GEAR_TARGET_D5,
    ///                DW_VIO_GEAR_TARGET_D6,
    ///                DW_VIO_GEAR_TARGET_D7,
    ///                DW_VIO_GEAR_TARGET_D8,
    ///                DW_VIO_GEAR_TARGET_D9,
    ///                DW_VIO_GEAR_TARGET_R,
    ///                DW_VIO_GEAR_TARGET_R2,
    ///                DW_VIO_GEAR_TARGET_P,
    ///                DW_VIO_GEAR_TARGET_PWRFREE
    ///        }
    dwVioGearTarget gearTarget;

    /// @note ID VS-10152
    /// @note description Current vehicle drive position (PRND).
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_DRIVE_POSITION_STATUS_D,
    ///                DW_VIO_DRIVE_POSITION_STATUS_N,
    ///                DW_VIO_DRIVE_POSITION_STATUS_R,
    ///                DW_VIO_DRIVE_POSITION_STATUS_P
    ///        }
    dwVioDrivePositionStatus drivePositionStatus;

    /// @note ID VS-10153
    /// @note description Drive Position that will be shifted to (PRND).
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_DRIVE_POSITION_TARGET_D,
    ///                DW_VIO_DRIVE_POSITION_TARGET_N,
    ///                DW_VIO_DRIVE_POSITION_TARGET_R,
    ///                DW_VIO_DRIVE_POSITION_TARGET_P
    ///        }
    dwVioDrivePositionTarget drivePositionTarget;

    /// @note ID VS-10230
    /// @note description Indicator if driver override longitudinal control.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_DRIVER_OVERRIDE_THROTTLE_IDLE,
    ///                DW_VIO_DRIVER_OVERRIDE_THROTTLE_NDEF1,
    ///                DW_VIO_DRIVER_OVERRIDE_THROTTLE_DRV_OVERRIDE
    ///        }
    dwVioDriverOverrideThrottle driverOverrideThrottle;

    /// @note ID VS-11159
    /// @note description Minumum (asymetric) curvature capability the vehicle is capable of at various velocities in L2/L3 mode. Communicated as a vector. .
    /// @note min -0.1638    max 0
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvCapMin[10];

    /// @note ID VS-11160
    /// @note description Maximum curvature capability the vehicle is capable of at various velocities in L2/L3 mode. Communicated as a vector..
    /// @note min 0    max 0.1638
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvCapMax[10];

    /// @note ID VS-11161
    /// @note description Report of which limit within EPS is reached on a request.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_NO_LIM,
    ///                DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_ANGLE,
    ///                DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_FORCE,
    ///                DW_VIO_LAT_CTRL_E_P_S_LIMIT_STATUS_LIM_ANGLE_FORCE
    ///        }
    dwVioLatCtrlEPSLimitStatus latCtrlEPSLimitStatus;

    /// @note ID VS-11162
    /// @note description Collaborative steering status, whether driver is in control or the system is controlling the vehicle, or both..
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_LOOP_STATUS_UNKNOWN,
    ///                DW_VIO_LAT_CTRL_LOOP_STATUS_OPEN,
    ///                DW_VIO_LAT_CTRL_LOOP_STATUS_BLENDING,
    ///                DW_VIO_LAT_CTRL_LOOP_STATUS_CLOSED
    ///        }
    dwVioLatCtrlLoopStatus latCtrlLoopStatus;

    /// @note ID VS-11222
    /// @note description signal for remote parking to signal status of redundancy.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_NOT_AVBL,
    ///                DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_PARK_REDUNDANCY_AVL,
    ///                DW_VIO_LONG_CTRL_REDUND_CHECK_STATUS_DRIVER_REDUNDANCY_AVL
    ///        }
    dwVioLongCtrlRedundCheckStatus longCtrlRedundCheckStatus;

    /// @note ID VS-11261
    /// @note description Estimated stopping distance for parking control.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit meter
    float32_t longCtrlEstimatedStopDistance;

    /// @note ID VS-11262
    /// @note description Friction range estimation from brake system.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_UNKNOWN,
    ///                DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_LOW_FRICTION,
    ///                DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_MID_FRICTION,
    ///                DW_VIO_LONG_CTRL_FRICTION_RANGE_ESTIMATION_HIGH_FRICTION
    ///        }
    dwVioLongCtrlFrictionRangeEstimation longCtrlFrictionRangeEstimation;

    /// @note ID VS-11328
    /// @note description This signal describes whether a secondary curvature request is actuated on.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_INIT,
    ///                DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_IDLE,
    ///                DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_ACTIVE,
    ///                DW_VIO_LAT_CTRL_CURV_REQ_ADDITIONAL_STATUS_ERROR
    ///        }
    dwVioLatCtrlCurvReqAdditionalStatus latCtrlCurvReqAdditionalStatus;

    /// @note ID VS-17001
    /// @note description MMLON module state.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_STATUS_UNKNOWN,
    ///                DW_VIO_LONG_CTRL_STATUS_INIT,
    ///                DW_VIO_LONG_CTRL_STATUS_RUN,
    ///                DW_VIO_LONG_CTRL_STATUS_TERM,
    ///                DW_VIO_LONG_CTRL_STATUS_TERMINATED,
    ///                DW_VIO_LONG_CTRL_STATUS_IDLE,
    ///                DW_VIO_LONG_CTRL_STATUS_ERROR
    ///        }
    dwVioLongCtrlStatus longCtrlStatus;

    /// @note ID VS-17007
    /// @note description Longitudinal Actuation Health Status .
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_INIT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_HYDRAULIC_CONTROL_UNIT_FLT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_EPB_FLT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_LTI_FLT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_COM_FLT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_CHECK_FAILED,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_OVERHEATED,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_BRAKE_DEGRADATION,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_SAFETY_LIMITS_VIOLATED,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_ASU_SGNL_INPUT_PLAUSI_CHCK_FLT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_REDUNDANCY_UNIT_FLT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_DRIVER_ABSENT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_SSC_FLT,
    ///                DW_VIO_LONG_CTRL_FAULT_STATUS_ESP_OR_ASR_CTRL_ACTV
    ///        }
    bitmask longCtrlFaultStatus;

    /// @note ID VS-17009
    /// @note description Brake torque availability full / reduced.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_NO_BRKTRQ_AVL,
    ///                DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_RED_BRKTRQ_AVL,
    ///                DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_RED_BRKTRQ_PT_AVL,
    ///                DW_VIO_LONG_CTRL_BRAKE_TORQUE_AVAILABLE_FULL_BRKTRQ_AVL
    ///        }
    dwVioLongCtrlBrakeTorqueAvailable longCtrlBrakeTorqueAvailable;

    /// @note ID VS-17010
    /// @note description Actual available maximum vehicle accelleration  .
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m/s2
    float32_t longCtrlAccelAvailable;

    /// @note ID VS-17013
    /// @note description Active ADAS Mode.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_NONE,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_MANEUVER_CTRL,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_PARK_CTRL,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_REMOTE_CTRL,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_DBS,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CA,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CA_PLUS,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_CRUISE_CTRL,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ASU_L3,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LCS,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LIMITER,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ADSE_LOW,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_ADSE_HIGH,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LIMITER_FIXED,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_LIMITER_VAR,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_CMS_REAR,
    ///                DW_VIO_LONG_CTRL_ACTIVE_SYSTEM_PSIR
    ///        }
    dwVioLongCtrlActiveSystem longCtrlActiveSystem;

    /// @note ID VS-17015
    /// @note description Brake pedal state.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_PEDAL_STATUS_UPSTOP,
    ///                DW_VIO_BRAKE_PEDAL_STATUS_PSD,
    ///                DW_VIO_BRAKE_PEDAL_STATUS_NDEF2
    ///        }
    dwVioBrakePedalStatus brakePedalStatus;

    /// @note ID VS-17020
    /// @note description with this signal VAL can give Information to BP about the Status of ECOAssist values: Inactive Active Controlling.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_UNKNOWN,
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_INACTIVE,
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ACTIVE,
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ENGAGED
    ///        }
    dwVioLongCtrlEcoAssistStatus longCtrlEcoAssistStatus;

    /// @note ID VS-17030
    /// @note description This signal shows the availability of the L3 communication of the Motion Management longitudinal interface..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_NO_PATH_VALID,
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_VALID,
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_SAT_VALID,
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_SAT_VALID,
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_BMRM_VALID,
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_BMRM_VALID,
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_SAT_BMRM_VALID,
    ///                DW_VIO_LONG_CTRL_COM_AVAILABLE_MAIN_SAT_BMRM_VALID
    ///        }
    dwVioLongCtrlComAvailable longCtrlComAvailable;

    /// @note ID VS-17100
    /// @note description SW mModule state.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_STATUS_INIT,
    ///                DW_VIO_LAT_CTRL_STATUS_IDLE,
    ///                DW_VIO_LAT_CTRL_STATUS_CTRL,
    ///                DW_VIO_LAT_CTRL_STATUS_TERMINATED,
    ///                DW_VIO_LAT_CTRL_STATUS_ERROR
    ///        }
    dwVioLatCtrlStatus latCtrlStatus;

    /// @note ID VS-17130
    /// @note description Current returned mode of the lateral interface: manual/human driving, active safety, L1/L2/L3, parking (from MM to NDAS).
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_IDLE,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_L2,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_L2_PLUS,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_L2_HFE,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_AES,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_L3,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_L3_EMG,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_LSS,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_PARK_L2,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_PARK_L3,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_PARK_RECORD,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_ESS,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_ARP,
    ///                DW_VIO_LAT_CTRL_MODE_STATUS_L2_PLUS_PLUS
    ///        }
    dwVioLatCtrlModeStatus latCtrlModeStatus;

    /// @note ID VS-17131
    /// @note description Currently available Modes (bitmask definition).
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_DFLT,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L2,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L2_PLUS,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L2_HFE,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_AES,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L3,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_L3_EMG,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_LSS,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L2,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_L3,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_PARK_RECORD,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_ESS,
    ///                DW_VIO_LAT_CTRL_MODE_AVAIL_ARP
    ///        }
    bitmask latCtrlModeAvail;

    /// @note ID VS-17135
    /// @note description Steering system override status.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_NOHOWDETECTION,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_TOUCH,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_GRASP,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_DOUBLEGRABBED,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVPARKINTERRUPT,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVL3INTERRUPT,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINERRHOSWD,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_DRVINLOOP_DEGRADEDHOSWD,
    ///                DW_VIO_LAT_CTRL_DRIVER_INTERVENTION_STATUS_NOHOWDETECTION_DEGRADEDHOSWD
    ///        }
    dwVioLatCtrlDriverInterventionStatus latCtrlDriverInterventionStatus;

    /// @note ID VS-17137
    /// @note description detection if driver has their hands on the wheel, for ECE lane change and EESF.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t handsoffDetectedFiltered;

    /// @note ID VS-17140
    /// @note description Currently active Error (bitmask definition)    (0 means no error present  65535 all possible errors are present).
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_ENGMNT_RQ_SPD,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARKERROR_MAX_SPD_LIM_MODE_MAX_SPD,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_PT_OFF,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PARK_ERROR_MISC,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_REV_GR,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_EPS_TMP_OFF_SSA,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2ERROR_OTHER,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_PLAUSIERROR,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_COMMERROR,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_1,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L3_ERROR_2,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_TIMEOUTDTCTD,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_ENGAGEMENTPREVENTIONCOND,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_SAFETYDRIVERCNDTNSFLT,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_DERATING,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_RAS_ERROR_MD_MAN_CANCEL,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_ABSM_ERROR_IFCPERMCLOSED,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_TMP_OFF_REJECT,
    ///                DW_VIO_LAT_CTRL_ERROR_STATUS_L2Error_EPS_DERATE
    ///        }
    bitmask latCtrlErrorStatus;

    /// @note ID VS-17155
    /// @note description Max allowed front wheel angle request.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit deg
    float32_t latCtrlMaxFrontWheelAngleRequestAllowed;

    /// @note ID VS-17156
    /// @note description Min allowed front wheel angle request.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit deg
    float32_t latCtrlMinFrontWheelAngleRequestAllowed;

    /// @note ID VS-17160
    /// @note description additional to the MAX-limit a min-limited is needed to allow non-symmetric limits.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit deg
    float32_t latCtrlMaxRearWheelAngleRequestAllowed;

    /// @note ID VS-17520
    /// @note description ActuationFeedback Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t timestamp_us;

    /// @note ID VS-21090
    /// @note description Status of Trailer Hitch.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_UNKNOWN,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_ERROR,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_NOT_FITTED,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_RETRACTED,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED_ATTACHED
    ///        }
    dwVioTrailerHitchStatus trailerHitchStatus;

    /// @note ID VS-30100
    /// @note description Velocity of the vehicle in the longitudinal direction as measured by ESP, always positive..
    /// @note min 0    max 113
    /// @note freq 100    unit meter/sec
    float32_t speedESC;

    /// @note ID VS-30101
    /// @note description Direction of travel as measured by ESP (forward, backward, undefined) .
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_SPEED_DIRECTION_E_S_C_VOID,
    ///                DW_VIO_SPEED_DIRECTION_E_S_C_FORWARD,
    ///                DW_VIO_SPEED_DIRECTION_E_S_C_BACKWARD
    ///        }
    dwVioSpeedDirectionESC speedDirectionESC;

    /// @note ID VS-30102
    /// @note description Quality of velocity of the vehicle in the longitudinal direction as measured by ESC.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_SPEED_QUALITY_E_S_C_NOT_DEFINED,
    ///                DW_VIO_SPEED_QUALITY_E_S_C_NORMAL_OPERATION,
    ///                DW_VIO_SPEED_QUALITY_E_S_C_REDUCED_QUALITY,
    ///                DW_VIO_SPEED_QUALITY_E_S_C_SIG_DEF
    ///        }
    dwVioSpeedQualityESC speedQualityESC;

    /// @note ID VS-30103
    /// @note description Lower bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit meter/sec
    float32_t speedMin;

    /// @note ID VS-30104
    /// @note description Higher bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit meter/sec
    float32_t speedMax;

    /// @note ID VS-30106
    /// @note description ESC Longitudinal Speed timestamp. Should be filled at sender.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t speedESCTimestamp;

    /// @note ID VS-30107
    /// @note description Vehicle in Standstill as detected by ESC.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_VEHICLE_STOPPED_UNKNOWN,
    ///                DW_VIO_VEHICLE_STOPPED_FALSE,
    ///                DW_VIO_VEHICLE_STOPPED_TRUE
    ///        }
    dwVioVehicleStopped vehicleStopped;

    /// @note ID VS-30110
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit rad/sec
    float32_t wheelSpeed[4];

    /// @note ID VS-30111
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_SPEED_QUALITY_NOT_DEFINED,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_SIG_DEF
    ///        }
    dwVioWheelSpeedQuality wheelSpeedQuality[4];

    /// @note ID VS-30120
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    int16_t wheelTicks[4];

    /// @note ID VS-30121
    /// @note description Quality of the wheel ticks (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_QUALITY_NOT_DEFINED,
    ///                DW_VIO_WHEEL_TICKS_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_TICKS_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_TICKS_QUALITY_SIG_DEF
    ///        }
    dwVioWheelTicksQuality wheelTicksQuality[4];

    /// @note ID VS-30130
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_VOID,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_FORWARD,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_BACKWARD
    ///        }
    dwVioWheelTicksDirection wheelTicksDirection[4];

    /// @note ID VS-30140
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t wheelTicksTimestamp[4];

    /// @note ID VS-30141
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_OK,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_SYNC_LOST
    ///        }
    dwVioWheelTicksTimestampQuality wheelTicksTimestampQuality[4];

    /// @note ID VS-30150
    /// @note description Torque of each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit Nm
    float32_t wheelTorque[4];

    /// @note ID VS-30151
    /// @note description Quality of torque of each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_SIG_DEF
    ///        }
    dwVioWheelTorqueQuality wheelTorqueQuality[4];

    /// @note ID VS-30160
    /// @note description Currently applied brake torque on each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit Nm
    float32_t brakeTorqueWheels[4];

    /// @note ID VS-30161
    /// @note description Quality of currently applied brake torque on each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NOT_DEFINED,
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_SIG_DEF
    ///        }
    dwVioBrakeTorqueWheelsQuality brakeTorqueWheelsQuality[4];

    /// @note ID VS-30162
    /// @note description Currently applied brake torque on all wheels.
    /// @note min nan    max nan
    /// @note freq 100    unit Nm
    float32_t brakeTorque;

    /// @note ID VS-30163
    /// @note description Signals whether the main brake applied.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_STATUS_NO_BRAKING,
    ///                DW_VIO_BRAKE_STATUS_BRAKING,
    ///                DW_VIO_BRAKE_STATUS_UNKNOWN
    ///        }
    dwVioBrakeStatus brakeStatus;

    /// @note ID VS-30164
    /// @note description ABS Lock control on all wheels.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_ALL_WHEELS_A_B_S_INACTIVE,
    ///                DW_VIO_BRAKE_ALL_WHEELS_A_B_S_ACTIVE,
    ///                DW_VIO_BRAKE_ALL_WHEELS_A_B_S_UNKNOWN
    ///        }
    dwVioBrakeAllWheelsABS brakeAllWheelsABS;

    /// @note ID VS-30165
    /// @note description Timestamp(s) of wheel torques (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t wheelTorqueTimestamps[4];

    /// @note ID VS-30166
    /// @note description Quality of timestamp(s) of wheel torques (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_NOT_INIT,
    ///                DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_OK,
    ///                DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_SYNC_LOST
    ///        }
    dwVioWheelTorqueTimestampsQuality wheelTorqueTimestampsQuality[4];

    /// @note ID VS-30170
    /// @note description Current front axle steering angle, positive to left.
    /// @note min -80    max 80
    /// @note freq 100    unit rad
    float32_t frontSteeringAngle;

    /// @note ID VS-30171
    /// @note description Current front axle angle status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_INIT,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_SIG_DEF
    ///        }
    dwVioFrontSteeringAngleQuality frontSteeringAngleQuality;

    /// @note ID VS-30180
    /// @note description Current front axle steering angle offset, positive to left.
    /// @note TODO: Backend not yet implemented
    /// @note min -80    max 80
    /// @note freq 100    unit rad
    float32_t frontSteeringAngleOffset;

    /// @note ID VS-30181
    /// @note description Current front axle steering angle offset quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NOT_DEFINED,
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_SIG_DEF
    ///        }
    dwVioFrontSteeringAngleOffsetQuality frontSteeringAngleOffsetQuality;

    /// @note ID VS-30185
    /// @note description Front axle steering angle timestamp.
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t frontSteeringTimestamp;

    /// @note ID VS-30186
    /// @note description Front axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_OK,
    ///                DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_SYNC_LOST
    ///        }
    dwVioFrontSteeringTimestampQuality frontSteeringTimestampQuality;

    /// @note ID VS-30191
    /// @note description Current rear axle steering angle quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_INIT,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_SIG_DEF
    ///        }
    dwVioRearWheelAngleQuality rearWheelAngleQuality;

    /// @note ID VS-30200
    /// @note description Current rear axle steering angle offset, positive to left.
    /// @note TODO: Backend not yet implemented
    /// @note min -80    max 80
    /// @note freq 100    unit rad
    float32_t rearWheelAngleOffset;

    /// @note ID VS-30201
    /// @note description Current rear axlesteering angle offset quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NOT_DEFINED,
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_SIG_DEF
    ///        }
    dwVioRearWheelAngleOffsetQuality rearWheelAngleOffsetQuality;

    /// @note ID VS-30205
    /// @note description Rear axle steering angle timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t rearWheelAngleTimestamp;

    /// @note ID VS-30206
    /// @note description Rear axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_OK,
    ///                DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_SYNC_LOST
    ///        }
    dwVioRearWheelAngleTimestampQuality rearWheelAngleTimestampQuality;

    /// @note ID VS-30208
    /// @note description Maximum rear angle steering capability.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 10
    /// @note freq 100    unit rad
    float32_t rearWheelAngleMaximum;

    /// @note ID VS-30210
    /// @note description Indicator of ESP/ABS intervention status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_ABS_INTERVENTION_NORM,
    ///                DW_VIO_ABS_INTERVENTION_INIT,
    ///                DW_VIO_ABS_INTERVENTION_DIAG,
    ///                DW_VIO_ABS_INTERVENTION_EMT,
    ///                DW_VIO_ABS_INTERVENTION_TBCC,
    ///                DW_VIO_ABS_INTERVENTION_FLT,
    ///                DW_VIO_ABS_INTERVENTION_ESP_ASR_CTRL_ACTV,
    ///                DW_VIO_ABS_INTERVENTION_SPORT_OFF,
    ///                DW_VIO_ABS_INTERVENTION_SPORT2_OFF,
    ///                DW_VIO_ABS_INTERVENTION_ABS_CTRL_ACTV
    ///        }
    dwVioAbsIntervention absIntervention;

    /// @note ID VS-95010
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit rad/s
    float32_t wheelSpeedHigh[4];

    /// @note ID VS-95011
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_NOT_DEFINED,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_SIG_DEF
    ///        }
    dwVioWheelSpeedQualityHigh wheelSpeedQualityHigh[4];

    /// @note ID VS-95020
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit unitless
    int16_t wheelTicksHigh[4];

    /// @note ID VS-95021
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_VOID,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_FORWARD,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_BACKWARD
    ///        }
    dwVioWheelTicksDirectionHigh wheelTicksDirectionHigh[4];

    /// @note ID VS-95040
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit us
    dwTime_t wheelTicksTimestampHigh[4];

    /// @note ID VS-95041
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR). Redundant signal..
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_NOT_INIT,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_OK,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_SYNC_LOST
    ///        }
    dwVioWheelTicksTimestampQualityHigh wheelTicksTimestampQualityHigh[4];

    /// @note ID VS-95050
    /// @note description Current front axle steering angle. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit rad
    float32_t frontSteeringAngleHigh;

    /// @note ID VS-95051
    /// @note description Current front axle angle status. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_NOT_DEFINED,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_NORMAL_OPERATION,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_TMP_HIGH,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_TMP_LOW,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_PERM_HIGH,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_PERM_LOW
    ///        }
    dwVioFrontSteeringAngleQualityHigh frontSteeringAngleQualityHigh;

    /// @note ID VS-95060
    /// @note description Measurement driver's torque input from steering wheel. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min -81.9    max 81.9
    /// @note freq 100    unit Nm
    float32_t steeringWheelTorqueHigh;

    /// @note ID VS-95070
    /// @note description Front axle steering angle timestamp. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit us
    dwTime_t frontSteeringTimestampHigh;

    /// @note ID VS-95080
    /// @note description Driver Intervention Detection. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_NO_DETECTION,
    ///                DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_NOT_IN_LOOP,
    ///                DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_1_ABC,
    ///                DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_1_EH,
    ///                DW_VIO_DRIVER_INTERVENTION_DETECTION_HIGH_DRV_IN_LOOP_STEP_2
    ///        }
    dwVioDriverInterventionDetectionHigh driverInterventionDetectionHigh;

    /// @note ID VS-95090
    /// @note description Failure indicator for components related to High steering. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_NOT_AVBL,
    ///                DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_DEG_AVBL,
    ///                DW_VIO_STEERING_SYSTEM_STATUS_HIGH_EPS_HLC_AVBL
    ///        }
    dwVioSteeringSystemStatusHigh steeringSystemStatusHigh;

    /// @note ID VS-95100
    /// @note description Failure reason for components related to High steering. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_NO_REASON,
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_Temp,
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_Temp,
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_PERM,
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_PERM,
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS1_IPC,
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS2_IPC,
    ///                DW_VIO_STEERING_SYSTEM_FAILURE_REASON_HIGH_EPS_NA
    ///        }
    dwVioSteeringSystemFailureReasonHigh steeringSystemFailureReasonHigh;

    /// @note ID VS-95110
    /// @note description High Steering System Off Status. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_NOT_OFF,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_ADSE,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_DRVINT,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_NO_TERM_IDC,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_EPSFKT,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_VEHSPDLIM,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_PT_DRVPOS,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_VEHDRVDIR,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_FWA_POS_LIM,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_FWA_SPD_LIM,
    ///                DW_VIO_STEERING_SYSTEM_OFF_STATUS_HIGH_EPS_OFF_OTHER
    ///        }
    dwVioSteeringSystemOffStatusHigh steeringSystemOffStatusHigh;

    /// @note ID VS-95120
    /// @note description High Steering System Interface Status. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_INIT,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_OFF,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_READY,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2H,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_ABC_STEER,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_EH_STEER,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2R,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2O,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_R2E,
    ///                DW_VIO_STEERING_SYSTEM_INTERFACE_STATUS_HIGH_HLC_EPS_ERROR
    ///        }
    dwVioSteeringSystemInterfaceStatusHigh steeringSystemInterfaceStatusHigh;

    /// @note ID VS-95130
    /// @note description Front wheel angle limitation status. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_NO_LIM,
    ///                DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_POS_LIM,
    ///                DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_SPD_LIM,
    ///                DW_VIO_FRONT_STEERING_ANGLE_LIMITATION_STATUS_HIGH_ANGL_POS_SPD_LIM
    ///        }
    dwVioFrontSteeringAngleLimitationStatusHigh frontSteeringAngleLimitationStatusHigh;

    /// @note ID VS-95140
    /// @note description Max allowed front wheel angle request until SW limitation. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit deg
    float32_t latCtrlMaxFrontWheelAngleRequestAllowedHigh;

    /// @note ID VS-95150
    /// @note description Max allowed front wheel angle speed request until SW limitation. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit deg/s
    float32_t latCtrlMaxFrontWheelAngleSpeedRequestAllowedHigh;

    /// @note ID VS-95160
    /// @note description Front wheel angle after limiter. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit deg
    float32_t latCtrlFrontWheelAngleRequestLimitedHigh;

    /// @note ID VS-95170
    /// @note description Time for Takeover in Fail-Degraded situation of High Steering System. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit s
    float32_t latCtrlFailedDegradedSteeringTimeToTakeoverHigh;

    /// @note ID VS-95180
    /// @note description High Steering System rack force after controller. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit N
    float32_t latCtrlRackForceHigh;

    /// @note ID VS-95190
    /// @note description High Steering System effective actuating rack force. Available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit N
    float32_t latCtrlRackForceEffectiveHigh;

    uint8_t reserved[512];
} dwVehicleIOActuationFeedback;

//# sergen(generate)
typedef struct dwVehicleIOSafetyStateValidityInfo
{
    dwSignalValidity rearWheelAngle;
    dwSignalValidity rearWheelAngleFactor;
    dwSignalValidity steeringWheelAngle;
    dwSignalValidity steeringWheelAngleQuality;
    dwSignalValidity timestamp_us;
    dwSignalValidity rearWheelAngleQuality;
    dwSignalValidity rearWheelAngleTimestamp;
    dwSignalValidity reserved[64];
} dwVehicleIOSafetyStateValidityInfo;

/**
* Safety critical VIO state. Expected to be sent from from VAL to AV Stack.
*/
#ifndef DOXYGEN_SHOULD_SKIP_THIS
//# sergen(generate)
#endif
typedef struct dwVehicleIOSafetyState
{
    dwVehicleIOSafetyStateValidityInfo validityInfo;

    /// @note ID VS-10080
    /// @note description Effective rear steering angle (wheel to driving axis), positive to left.
    /// @note min -0.3573    max 0.3573
    /// @note freq 100    unit rad
    float32_t rearWheelAngle;

    /// @note ID VS-10082
    /// @note description Effective rear steering angle ratio ().
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    float32_t rearWheelAngleFactor;

    /// @note ID VS-10091
    /// @note description Angle of the steering wheel as picked up by the sensor close to the steering wheel, positive to left.
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t steeringWheelAngle;

    /// @note ID VS-10092
    /// @note description Integrity quality of steering wheel angle.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR_INI,
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_INI,
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_ERR,
    ///                DW_VIO_STEERING_WHEEL_ANGLE_QUALITY_OK
    ///        }
    dwVioSteeringWheelAngleQuality steeringWheelAngleQuality;

    /// @note ID VS-17530
    /// @note description SafetyState Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t timestamp_us;

    /// @note ID VS-30191
    /// @note description Current rear axle steering angle quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_INIT,
    ///                DW_VIO_REAR_WHEEL_ANGLE_QUALITY_SIG_DEF
    ///        }
    dwVioRearWheelAngleQuality rearWheelAngleQuality;

    /// @note ID VS-30205
    /// @note description Rear axle steering angle timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t rearWheelAngleTimestamp;

    uint8_t reserved[512];
} dwVehicleIOSafetyState;

//# sergen(generate)
typedef struct dwVehicleIONonSafetyStateValidityInfo
{
    dwSignalValidity kickdownStatus;
    dwSignalValidity latCtrlCurvatureActual;
    dwSignalValidity holdStatus;
    dwSignalValidity throttleValue;
    dwSignalValidity driverBrakePedal;
    dwSignalValidity gearStatus;
    dwSignalValidity gearTarget;
    dwSignalValidity drivePositionStatus;
    dwSignalValidity drivePositionTarget;
    dwSignalValidity hazardFlasherStatus;
    dwSignalValidity turnSignalStatus;
    dwSignalValidity brakePedalStatus;
    dwSignalValidity longCtrlEcoAssistStatus;
    dwSignalValidity handsoffDetectedFiltered;
    dwSignalValidity ESCOperationalState;
    dwSignalValidity timestamp_us;
    dwSignalValidity headlightState;
    dwSignalValidity outsideTemperature;
    dwSignalValidity outsideTemperatureQuality;
    dwSignalValidity wetnessLevelUnfiltered;
    dwSignalValidity wetnessLevelFiltered;
    dwSignalValidity rainLevel;
    dwSignalValidity rainSensorFault;
    dwSignalValidity lightSensorTwilight;
    dwSignalValidity lightSensorFault;
    dwSignalValidity microSirenID;
    dwSignalValidity microSirenDetected;
    dwSignalValidity microSirenAvailable;
    dwSignalValidity microSirenConfidenceLevel;
    dwSignalValidity buckleStateDriver;
    dwSignalValidity buckleStateFrontPassenger;
    dwSignalValidity doorFrontLeftState;
    dwSignalValidity doorFrontRightState;
    dwSignalValidity doorRearLeftState;
    dwSignalValidity doorRearRightState;
    dwSignalValidity rearTrunkState;
    dwSignalValidity frontHoodState;
    dwSignalValidity trailerHitchStatus;
    dwSignalValidity ignitionStatus;
    dwSignalValidity speedESC;
    dwSignalValidity speedDirectionESC;
    dwSignalValidity speedQualityESC;
    dwSignalValidity speedMin;
    dwSignalValidity speedMax;
    dwSignalValidity speedIndicated;
    dwSignalValidity speedESCTimestamp;
    dwSignalValidity vehicleStopped;
    dwSignalValidity wheelSpeed[4];
    dwSignalValidity wheelSpeedQuality[4];
    dwSignalValidity wheelTicks[4];
    dwSignalValidity wheelTicksQuality[4];
    dwSignalValidity wheelTicksDirection[4];
    dwSignalValidity wheelTicksTimestamp[4];
    dwSignalValidity wheelTicksTimestampQuality[4];
    dwSignalValidity wheelTorque[4];
    dwSignalValidity wheelTorqueQuality[4];
    dwSignalValidity brakeTorqueWheels[4];
    dwSignalValidity brakeTorqueWheelsQuality[4];
    dwSignalValidity brakeTorque;
    dwSignalValidity brakeStatus;
    dwSignalValidity brakeAllWheelsABS;
    dwSignalValidity wheelTorqueTimestamps[4];
    dwSignalValidity wheelTorqueTimestampsQuality[4];
    dwSignalValidity frontSteeringAngle;
    dwSignalValidity frontSteeringAngleQuality;
    dwSignalValidity frontSteeringAngleOffset;
    dwSignalValidity frontSteeringAngleOffsetQuality;
    dwSignalValidity frontSteeringTimestamp;
    dwSignalValidity frontSteeringTimestampQuality;
    dwSignalValidity rearWheelAngleOffset;
    dwSignalValidity rearWheelAngleOffsetQuality;
    dwSignalValidity rearWheelAngleTimestampQuality;
    dwSignalValidity rearWheelAngleMaximum;
    dwSignalValidity absIntervention;
    dwSignalValidity mirrorFoldState[2];
    dwSignalValidity cameraFoldState[2];
    dwSignalValidity suspensionLevel[4];
    dwSignalValidity suspensionLevelQuality;
    dwSignalValidity suspensionLevelTimestamp;
    dwSignalValidity suspensionLevelTimestampQuality;
    dwSignalValidity suspensionLevelCalibrationState;
    dwSignalValidity tirePressure[4];
    dwSignalValidity tirePressureQuality[4];
    dwSignalValidity tirePressureStateTimestamp[4];
    dwSignalValidity tirePressureMonitoringState;
    dwSignalValidity tireSwitched[4];
    dwSignalValidity trailerMass;
    dwSignalValidity trailerArticulationAngle;
    dwSignalValidity trailerConnected;
    dwSignalValidity axleFrontLoad;
    dwSignalValidity axlePusherLoad;
    dwSignalValidity axleDriverLoad;
    dwSignalValidity axleTrailerLoad;
    dwSignalValidity wiperStatusRear;
    dwSignalValidity wiperFrontSecondaryStatus;
    dwSignalValidity wiperFrontStatus;
    dwSignalValidity wheelSpeedHigh[4];
    dwSignalValidity wheelSpeedQualityHigh[4];
    dwSignalValidity wheelTicksHigh[4];
    dwSignalValidity wheelTicksDirectionHigh[4];
    dwSignalValidity wheelTicksTimestampHigh[4];
    dwSignalValidity wheelTicksTimestampQualityHigh[4];
    dwSignalValidity frontSteeringAngleHigh;
    dwSignalValidity frontSteeringAngleQualityHigh;
    dwSignalValidity frontSteeringTimestampHigh;
    dwSignalValidity reserved[64];
} dwVehicleIONonSafetyStateValidityInfo;

/**
* Non-safety critical RoV state. Expected to be sent from VAL in CCPLEX to AV Stack
*/
#ifndef DOXYGEN_SHOULD_SKIP_THIS
//# sergen(generate)
#endif
typedef struct dwVehicleIONonSafetyState
{
    dwVehicleIONonSafetyStateValidityInfo validityInfo;

    /// @note ID VS-10010
    /// @note description Whether kickdown of accelerator pedal.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t kickdownStatus;

    /// @note ID VS-10040
    /// @note description Vector form of effective curvature request (uniform time-spaced).
    /// @note min -0.16384    max 0.16384
    /// @note freq 100    unit 1/m
    float32_t latCtrlCurvatureActual;

    /// @note ID VS-10120
    /// @note description Parking brake / hold state report.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_HOLD_STATUS_UNKNOWN,
    ///                DW_VIO_HOLD_STATUS_NOHOLD,
    ///                DW_VIO_HOLD_STATUS_HOLD,
    ///                DW_VIO_HOLD_STATUS_TRANSITION
    ///        }
    dwVioHoldStatus holdStatus;

    /// @note ID VS-10130
    /// @note description Current state/postiion of the accelerator pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t throttleValue;

    /// @note ID VS-10140
    /// @note description Current state/position of the brake pedal.
    /// @note min 0    max 100
    /// @note freq 100    unit unitless
    float32_t driverBrakePedal;

    /// @note ID VS-10150
    /// @note description Current vehicle gear.
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_GEAR_STATUS_N,
    ///                DW_VIO_GEAR_STATUS_D1,
    ///                DW_VIO_GEAR_STATUS_D2,
    ///                DW_VIO_GEAR_STATUS_D3,
    ///                DW_VIO_GEAR_STATUS_D4,
    ///                DW_VIO_GEAR_STATUS_D5,
    ///                DW_VIO_GEAR_STATUS_D6,
    ///                DW_VIO_GEAR_STATUS_D7,
    ///                DW_VIO_GEAR_STATUS_D8,
    ///                DW_VIO_GEAR_STATUS_D9,
    ///                DW_VIO_GEAR_STATUS_R,
    ///                DW_VIO_GEAR_STATUS_R2,
    ///                DW_VIO_GEAR_STATUS_P,
    ///                DW_VIO_GEAR_STATUS_PWRFREE
    ///        }
    dwVioGearStatus gearStatus;

    /// @note ID VS-10151
    /// @note description Gear that will be shifted to..
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_GEAR_TARGET_N,
    ///                DW_VIO_GEAR_TARGET_D1,
    ///                DW_VIO_GEAR_TARGET_D2,
    ///                DW_VIO_GEAR_TARGET_D3,
    ///                DW_VIO_GEAR_TARGET_D4,
    ///                DW_VIO_GEAR_TARGET_D5,
    ///                DW_VIO_GEAR_TARGET_D6,
    ///                DW_VIO_GEAR_TARGET_D7,
    ///                DW_VIO_GEAR_TARGET_D8,
    ///                DW_VIO_GEAR_TARGET_D9,
    ///                DW_VIO_GEAR_TARGET_R,
    ///                DW_VIO_GEAR_TARGET_R2,
    ///                DW_VIO_GEAR_TARGET_P,
    ///                DW_VIO_GEAR_TARGET_PWRFREE
    ///        }
    dwVioGearTarget gearTarget;

    /// @note ID VS-10152
    /// @note description Current vehicle drive position (PRND).
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_DRIVE_POSITION_STATUS_D,
    ///                DW_VIO_DRIVE_POSITION_STATUS_N,
    ///                DW_VIO_DRIVE_POSITION_STATUS_R,
    ///                DW_VIO_DRIVE_POSITION_STATUS_P
    ///        }
    dwVioDrivePositionStatus drivePositionStatus;

    /// @note ID VS-10153
    /// @note description Drive Position that will be shifted to (PRND).
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_DRIVE_POSITION_TARGET_D,
    ///                DW_VIO_DRIVE_POSITION_TARGET_N,
    ///                DW_VIO_DRIVE_POSITION_TARGET_R,
    ///                DW_VIO_DRIVE_POSITION_TARGET_P
    ///        }
    dwVioDrivePositionTarget drivePositionTarget;

    /// @note ID VS-10220
    /// @note description Indicator of emergency/hazard lights.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_HAZARD_FLASHER_STATUS_OFF,
    ///                DW_VIO_HAZARD_FLASHER_STATUS_ON,
    ///                DW_VIO_HAZARD_FLASHER_STATUS_UNKNOWN
    ///        }
    dwVioHazardFlasherStatus hazardFlasherStatus;

    /// @note ID VS-10260
    /// @note description Indication of turn indicators.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_TURN_SIGNAL_STATUS_UNKNOWN,
    ///                DW_VIO_TURN_SIGNAL_STATUS_OFF,
    ///                DW_VIO_TURN_SIGNAL_STATUS_LEFT,
    ///                DW_VIO_TURN_SIGNAL_STATUS_RIGHT,
    ///                DW_VIO_TURN_SIGNAL_STATUS_EMERGENCY
    ///        }
    dwVioTurnSignalStatus turnSignalStatus;

    /// @note ID VS-17015
    /// @note description Brake pedal state.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_PEDAL_STATUS_UPSTOP,
    ///                DW_VIO_BRAKE_PEDAL_STATUS_PSD,
    ///                DW_VIO_BRAKE_PEDAL_STATUS_NDEF2
    ///        }
    dwVioBrakePedalStatus brakePedalStatus;

    /// @note ID VS-17020
    /// @note description with this signal VAL can give Information to BP about the Status of ECOAssist values: Inactive Active Controlling.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_UNKNOWN,
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_INACTIVE,
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ACTIVE,
    ///                DW_VIO_LONG_CTRL_ECO_ASSIST_STATUS_ENGAGED
    ///        }
    dwVioLongCtrlEcoAssistStatus longCtrlEcoAssistStatus;

    /// @note ID VS-17137
    /// @note description detection if driver has their hands on the wheel, for ECE lane change and EESF.
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t handsoffDetectedFiltered;

    /// @note ID VS-17202
    /// @note description ESP operation state for assistance systems.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_NORM,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_INIT,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_DIAG,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_EMT,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_TBCC,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_FLT,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_ESP_ASR_CTRL_ACTV,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_SPORT_OFF,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_OFF_SPORT_PLUS,
    ///                DW_VIO__E_S_C_OPERATIONAL_STATE_ABS_CTRL_ACTV
    ///        }
    dwVioESCOperationalState ESCOperationalState;

    /// @note ID VS-17540
    /// @note description NonSafetyState Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t timestamp_us;

    /// @note ID VS-20010
    /// @note description UNKNOWN   = 0, OFF   = 1, LOW_BEAM  = 2, HIGH_BEAM = 3, DRL   = 4 //DAYTIME RUNNING LIGHTS.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_HEADLIGHT_STATE_UNKNOWN,
    ///                DW_VIO_HEADLIGHT_STATE_OFF,
    ///                DW_VIO_HEADLIGHT_STATE_LOW_BEAM,
    ///                DW_VIO_HEADLIGHT_STATE_HIGH_BEAM,
    ///                DW_VIO_HEADLIGHT_STATE_DRL
    ///        }
    dwVioHeadlightState headlightState;

    /// @note ID VS-20040
    /// @note description Ambient temperature value.
    /// @note min nan    max nan
    /// @note freq 10    unit Celsius
    float32_t outsideTemperature;

    /// @note ID VS-20041
    /// @note description Ambient temperature Signal Quality identifier.
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_OUTSIDE_TEMPERATURE_QUALITY_SIG_DEF
    ///        }
    dwVioOutsideTemperatureQuality outsideTemperatureQuality;

    /// @note ID VS-20060
    /// @note description Wetness level unfiltered.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit unitless
    uint8_t wetnessLevelUnfiltered;

    /// @note ID VS-20061
    /// @note description Wetness level "robust"/filtered and therefore slower one.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit unitless
    uint8_t wetnessLevelFiltered;

    /// @note ID VS-20070
    /// @note description Rain Level, proportinal to droplets / minute.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 6
    /// @note freq nan    unit nan
    uint8_t rainLevel;

    /// @note ID VS-20080
    /// @note description Rain sensor fault.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_RAIN_SENSOR_FAULT_UNKNOWN,
    ///                DW_VIO_RAIN_SENSOR_FAULT_FALSE,
    ///                DW_VIO_RAIN_SENSOR_FAULT_TRUE
    ///        }
    dwVioRainSensorFault rainSensorFault;

    /// @note ID VS-20090
    /// @note description Twilight state light sensor, lightlevel from 0 (dark) to 7 (bright) in steps of 150 lux (0...150,150...300,...).
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 7
    /// @note freq nan    unit nan
    uint8_t lightSensorTwilight;

    /// @note ID VS-20100
    /// @note description Light sensor fault.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LIGHT_SENSOR_FAULT_UNKNOWN,
    ///                DW_VIO_LIGHT_SENSOR_FAULT_FALSE,
    ///                DW_VIO_LIGHT_SENSOR_FAULT_TRUE
    ///        }
    dwVioLightSensorFault lightSensorFault;

    /// @note ID VS-20110
    /// @note description Micro Siren ID.
    /// @note TODO: Backend not yet implemented
    /// @note min 1    max 30
    /// @note freq nan    unit nan
    uint8_t microSirenID;

    /// @note ID VS-20120
    /// @note description Micro Siren detected.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_MICRO_SIREN_DETECTED_UNKNOWN,
    ///                DW_VIO_MICRO_SIREN_DETECTED_FALSE,
    ///                DW_VIO_MICRO_SIREN_DETECTED_TRUE
    ///        }
    dwVioMicroSirenDetected microSirenDetected;

    /// @note ID VS-20130
    /// @note description Micro Siren available.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_MICRO_SIREN_AVAILABLE_UNKNOWN,
    ///                DW_VIO_MICRO_SIREN_AVAILABLE_FALSE,
    ///                DW_VIO_MICRO_SIREN_AVAILABLE_TRUE
    ///        }
    dwVioMicroSirenAvailable microSirenAvailable;

    /// @note ID VS-20140
    /// @note description Micro Siren Detection Confidence Level.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 100
    /// @note freq nan    unit nan
    uint8_t microSirenConfidenceLevel;

    /// @note ID VS-21010
    /// @note description State of drivers safety belt.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BUCKLE_STATE_DRIVER_CLOSED,
    ///                DW_VIO_BUCKLE_STATE_DRIVER_OPEN,
    ///                DW_VIO_BUCKLE_STATE_DRIVER_UNKNOWN
    ///        }
    dwVioBuckleStateDriver buckleStateDriver;

    /// @note ID VS-21020
    /// @note description State of front passenger safety belt.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_CLOSED,
    ///                DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_OPEN,
    ///                DW_VIO_BUCKLE_STATE_FRONT_PASSENGER_UNKNOWN
    ///        }
    dwVioBuckleStateFrontPassenger buckleStateFrontPassenger;

    /// @note ID VS-21030
    /// @note description Door lock (latch) state.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 20    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LOCK_STATE_UNKNOWN,
    ///                DW_VIO_LOCK_STATE_SECURE_CLOSED,
    ///                DW_VIO_LOCK_STATE_UNKNOWN_CLOSED,
    ///                DW_VIO_LOCK_STATE_OPEN,
    ///                DW_VIO_LOCK_STATE_FORCE_32
    ///        }
    dwVioLockState doorFrontLeftState;

    /// @note ID VS-21040
    /// @note description Door lock (latch) state.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 20    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LOCK_STATE_UNKNOWN,
    ///                DW_VIO_LOCK_STATE_SECURE_CLOSED,
    ///                DW_VIO_LOCK_STATE_UNKNOWN_CLOSED,
    ///                DW_VIO_LOCK_STATE_OPEN,
    ///                DW_VIO_LOCK_STATE_FORCE_32
    ///        }
    dwVioLockState doorFrontRightState;

    /// @note ID VS-21050
    /// @note description Door lock (latch) state.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 20    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LOCK_STATE_UNKNOWN,
    ///                DW_VIO_LOCK_STATE_SECURE_CLOSED,
    ///                DW_VIO_LOCK_STATE_UNKNOWN_CLOSED,
    ///                DW_VIO_LOCK_STATE_OPEN,
    ///                DW_VIO_LOCK_STATE_FORCE_32
    ///        }
    dwVioLockState doorRearLeftState;

    /// @note ID VS-21060
    /// @note description Door lock (latch) state.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 20    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LOCK_STATE_UNKNOWN,
    ///                DW_VIO_LOCK_STATE_SECURE_CLOSED,
    ///                DW_VIO_LOCK_STATE_UNKNOWN_CLOSED,
    ///                DW_VIO_LOCK_STATE_OPEN,
    ///                DW_VIO_LOCK_STATE_FORCE_32
    ///        }
    dwVioLockState doorRearRightState;

    /// @note ID VS-21070
    /// @note description Trunk lock state.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 20    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LOCK_STATE_UNKNOWN,
    ///                DW_VIO_LOCK_STATE_SECURE_CLOSED,
    ///                DW_VIO_LOCK_STATE_UNKNOWN_CLOSED,
    ///                DW_VIO_LOCK_STATE_OPEN,
    ///                DW_VIO_LOCK_STATE_FORCE_32
    ///        }
    dwVioLockState rearTrunkState;

    /// @note ID VS-21080
    /// @note description Door lock (latch) state.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 20    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_LOCK_STATE_UNKNOWN,
    ///                DW_VIO_LOCK_STATE_SECURE_CLOSED,
    ///                DW_VIO_LOCK_STATE_UNKNOWN_CLOSED,
    ///                DW_VIO_LOCK_STATE_OPEN,
    ///                DW_VIO_LOCK_STATE_FORCE_32
    ///        }
    dwVioLockState frontHoodState;

    /// @note ID VS-21090
    /// @note description Status of Trailer Hitch.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_UNKNOWN,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_ERROR,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_NOT_FITTED,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_RETRACTED,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED,
    ///                DW_VIO_TRAILER_HITCH_STATUS_HITCH_EXTENDED_ATTACHED
    ///        }
    dwVioTrailerHitchStatus trailerHitchStatus;

    /// @note ID VS-21100
    /// @note description Status of vehicle ignition.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_IGNITION_STATUS_IGN_LOCK,
    ///                DW_VIO_IGNITION_STATUS_IGN_OFF,
    ///                DW_VIO_IGNITION_STATUS_IGN_ACC,
    ///                DW_VIO_IGNITION_STATUS_IGN_ON,
    ///                DW_VIO_IGNITION_STATUS_IGN_START
    ///        }
    dwVioIgnitionStatus ignitionStatus;

    /// @note ID VS-30100
    /// @note description Velocity of the vehicle in the longitudinal direction as measured by ESP, always positive..
    /// @note min 0    max 113
    /// @note freq 100    unit meter/sec
    float32_t speedESC;

    /// @note ID VS-30101
    /// @note description Direction of travel as measured by ESP (forward, backward, undefined) .
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_SPEED_DIRECTION_E_S_C_VOID,
    ///                DW_VIO_SPEED_DIRECTION_E_S_C_FORWARD,
    ///                DW_VIO_SPEED_DIRECTION_E_S_C_BACKWARD
    ///        }
    dwVioSpeedDirectionESC speedDirectionESC;

    /// @note ID VS-30102
    /// @note description Quality of velocity of the vehicle in the longitudinal direction as measured by ESC.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_SPEED_QUALITY_E_S_C_NOT_DEFINED,
    ///                DW_VIO_SPEED_QUALITY_E_S_C_NORMAL_OPERATION,
    ///                DW_VIO_SPEED_QUALITY_E_S_C_REDUCED_QUALITY,
    ///                DW_VIO_SPEED_QUALITY_E_S_C_SIG_DEF
    ///        }
    dwVioSpeedQualityESC speedQualityESC;

    /// @note ID VS-30103
    /// @note description Lower bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit meter/sec
    float32_t speedMin;

    /// @note ID VS-30104
    /// @note description Higher bound of vehicle velocity in the longitudinal direction as measured by ESP.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit meter/sec
    float32_t speedMax;

    /// @note ID VS-30105
    /// @note description Indicated speed for warnings associated with speed violations.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit meter/sec
    float32_t speedIndicated;

    /// @note ID VS-30106
    /// @note description ESC Longitudinal Speed timestamp. Should be filled at sender.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t speedESCTimestamp;

    /// @note ID VS-30107
    /// @note description Vehicle in Standstill as detected by ESC.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_VEHICLE_STOPPED_UNKNOWN,
    ///                DW_VIO_VEHICLE_STOPPED_FALSE,
    ///                DW_VIO_VEHICLE_STOPPED_TRUE
    ///        }
    dwVioVehicleStopped vehicleStopped;

    /// @note ID VS-30110
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit rad/sec
    float32_t wheelSpeed[4];

    /// @note ID VS-30111
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_SPEED_QUALITY_NOT_DEFINED,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_SIG_DEF
    ///        }
    dwVioWheelSpeedQuality wheelSpeedQuality[4];

    /// @note ID VS-30120
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    int16_t wheelTicks[4];

    /// @note ID VS-30121
    /// @note description Quality of the wheel ticks (vector of enums) (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_QUALITY_NOT_DEFINED,
    ///                DW_VIO_WHEEL_TICKS_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_TICKS_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_TICKS_QUALITY_SIG_DEF
    ///        }
    dwVioWheelTicksQuality wheelTicksQuality[4];

    /// @note ID VS-30130
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_VOID,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_FORWARD,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_BACKWARD
    ///        }
    dwVioWheelTicksDirection wheelTicksDirection[4];

    /// @note ID VS-30140
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t wheelTicksTimestamp[4];

    /// @note ID VS-30141
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_OK,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_SYNC_LOST
    ///        }
    dwVioWheelTicksTimestampQuality wheelTicksTimestampQuality[4];

    /// @note ID VS-30150
    /// @note description Torque of each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit Nm
    float32_t wheelTorque[4];

    /// @note ID VS-30151
    /// @note description Quality of torque of each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_TORQUE_QUALITY_SIG_DEF
    ///        }
    dwVioWheelTorqueQuality wheelTorqueQuality[4];

    /// @note ID VS-30160
    /// @note description Currently applied brake torque on each individual wheel (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit Nm
    float32_t brakeTorqueWheels[4];

    /// @note ID VS-30161
    /// @note description Quality of currently applied brake torque on each individual wheel (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NOT_DEFINED,
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_BRAKE_TORQUE_WHEELS_QUALITY_SIG_DEF
    ///        }
    dwVioBrakeTorqueWheelsQuality brakeTorqueWheelsQuality[4];

    /// @note ID VS-30162
    /// @note description Currently applied brake torque on all wheels.
    /// @note min nan    max nan
    /// @note freq 100    unit Nm
    float32_t brakeTorque;

    /// @note ID VS-30163
    /// @note description Signals whether the main brake applied.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_STATUS_NO_BRAKING,
    ///                DW_VIO_BRAKE_STATUS_BRAKING,
    ///                DW_VIO_BRAKE_STATUS_UNKNOWN
    ///        }
    dwVioBrakeStatus brakeStatus;

    /// @note ID VS-30164
    /// @note description ABS Lock control on all wheels.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_BRAKE_ALL_WHEELS_A_B_S_INACTIVE,
    ///                DW_VIO_BRAKE_ALL_WHEELS_A_B_S_ACTIVE,
    ///                DW_VIO_BRAKE_ALL_WHEELS_A_B_S_UNKNOWN
    ///        }
    dwVioBrakeAllWheelsABS brakeAllWheelsABS;

    /// @note ID VS-30165
    /// @note description Timestamp(s) of wheel torques (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t wheelTorqueTimestamps[4];

    /// @note ID VS-30166
    /// @note description Quality of timestamp(s) of wheel torques (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_NOT_INIT,
    ///                DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_OK,
    ///                DW_VIO_WHEEL_TORQUE_TIMESTAMPS_QUALITY_SYNC_LOST
    ///        }
    dwVioWheelTorqueTimestampsQuality wheelTorqueTimestampsQuality[4];

    /// @note ID VS-30170
    /// @note description Current front axle steering angle, positive to left.
    /// @note min -80    max 80
    /// @note freq 100    unit rad
    float32_t frontSteeringAngle;

    /// @note ID VS-30171
    /// @note description Current front axle angle status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_INIT,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_SIG_DEF
    ///        }
    dwVioFrontSteeringAngleQuality frontSteeringAngleQuality;

    /// @note ID VS-30180
    /// @note description Current front axle steering angle offset, positive to left.
    /// @note TODO: Backend not yet implemented
    /// @note min -80    max 80
    /// @note freq 100    unit rad
    float32_t frontSteeringAngleOffset;

    /// @note ID VS-30181
    /// @note description Current front axle steering angle offset quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NOT_DEFINED,
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_FRONT_STEERING_ANGLE_OFFSET_QUALITY_SIG_DEF
    ///        }
    dwVioFrontSteeringAngleOffsetQuality frontSteeringAngleOffsetQuality;

    /// @note ID VS-30185
    /// @note description Front axle steering angle timestamp.
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t frontSteeringTimestamp;

    /// @note ID VS-30186
    /// @note description Front axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_OK,
    ///                DW_VIO_FRONT_STEERING_TIMESTAMP_QUALITY_SYNC_LOST
    ///        }
    dwVioFrontSteeringTimestampQuality frontSteeringTimestampQuality;

    /// @note ID VS-30200
    /// @note description Current rear axle steering angle offset, positive to left.
    /// @note TODO: Backend not yet implemented
    /// @note min -80    max 80
    /// @note freq 100    unit rad
    float32_t rearWheelAngleOffset;

    /// @note ID VS-30201
    /// @note description Current rear axlesteering angle offset quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NOT_DEFINED,
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_REAR_WHEEL_ANGLE_OFFSET_QUALITY_SIG_DEF
    ///        }
    dwVioRearWheelAngleOffsetQuality rearWheelAngleOffsetQuality;

    /// @note ID VS-30206
    /// @note description Rear axle steering angle timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_OK,
    ///                DW_VIO_REAR_WHEEL_ANGLE_TIMESTAMP_QUALITY_SYNC_LOST
    ///        }
    dwVioRearWheelAngleTimestampQuality rearWheelAngleTimestampQuality;

    /// @note ID VS-30208
    /// @note description Maximum rear angle steering capability.
    /// @note TODO: Backend not yet implemented
    /// @note min 0    max 10
    /// @note freq 100    unit rad
    float32_t rearWheelAngleMaximum;

    /// @note ID VS-30210
    /// @note description Indicator of ESP/ABS intervention status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_ABS_INTERVENTION_NORM,
    ///                DW_VIO_ABS_INTERVENTION_INIT,
    ///                DW_VIO_ABS_INTERVENTION_DIAG,
    ///                DW_VIO_ABS_INTERVENTION_EMT,
    ///                DW_VIO_ABS_INTERVENTION_TBCC,
    ///                DW_VIO_ABS_INTERVENTION_FLT,
    ///                DW_VIO_ABS_INTERVENTION_ESP_ASR_CTRL_ACTV,
    ///                DW_VIO_ABS_INTERVENTION_SPORT_OFF,
    ///                DW_VIO_ABS_INTERVENTION_SPORT2_OFF,
    ///                DW_VIO_ABS_INTERVENTION_ABS_CTRL_ACTV
    ///        }
    dwVioAbsIntervention absIntervention;

    /// @note ID VS-30220
    /// @note description State of mirror folding procedure (FOLD, MOVING, UNFOLD). mirrorFoldState[0] corresponds to the left mirror and mirrorFoldState[1] corresponds to the right one..
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_MIRROR_FOLD_STATE_UNKNOWN,
    ///                DW_VIO_MIRROR_FOLD_STATE_FOLDED,
    ///                DW_VIO_MIRROR_FOLD_STATE_UNFOLDED,
    ///                DW_VIO_MIRROR_FOLD_STATE_FOLD_IN,
    ///                DW_VIO_MIRROR_FOLD_STATE_FOLD_OUT
    ///        }
    dwVioMirrorFoldState mirrorFoldState[2];

    /// @note ID VS-30230
    /// @note description State of SVS cameras (front/rear) folding procedure (FOLD, MOVING, UNFOLD).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_CAMERA_FOLD_STATE_UNKNOWN,
    ///                DW_VIO_CAMERA_FOLD_STATE_FOLDED,
    ///                DW_VIO_CAMERA_FOLD_STATE_UNFOLDED,
    ///                DW_VIO_CAMERA_FOLD_STATE_FOLD_IN,
    ///                DW_VIO_CAMERA_FOLD_STATE_FOLD_OUT
    ///        }
    dwVioCameraFoldState cameraFoldState[2];

    /// @note ID VS-30310
    /// @note description Vehicle suspension level measurements (Order is FL, FR, RL, RR).
    /// @note min nan    max nan
    /// @note freq 100    unit m
    float32_t suspensionLevel[4];

    /// @note ID VS-30320
    /// @note description Vehicle suspension level quality quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_SUSPENSION_LEVEL_QUALITY_NOT_DEFINED,
    ///                DW_VIO_SUSPENSION_LEVEL_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_SUSPENSION_LEVEL_QUALITY_REDUCED_QUALITY,
    ///                DW_VIO_SUSPENSION_LEVEL_QUALITY_SIG_DEF
    ///        }
    dwVioSuspensionLevelQuality suspensionLevelQuality;

    /// @note ID VS-30330
    /// @note description Vehicle suspension level timestamp.
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t suspensionLevelTimestamp;

    /// @note ID VS-30331
    /// @note description Vehicle suspension level timestamp quality.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_NOT_INIT,
    ///                DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_OK,
    ///                DW_VIO_SUSPENSION_LEVEL_TIMESTAMP_QUALITY_SYNC_LOST
    ///        }
    dwVioSuspensionLevelTimestampQuality suspensionLevelTimestampQuality;

    /// @note ID VS-30340
    /// @note description Vehicle suspension calibration status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_FALSE,
    ///                DW_VIO_SUSPENSION_LEVEL_CALIBRATION_STATE_TRUE
    ///        }
    dwVioSuspensionLevelCalibrationState suspensionLevelCalibrationState;

    /// @note ID VS-32210
    /// @note description Vehicle tire pressure (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit kPA
    float32_t tirePressure[4];

    /// @note ID VS-32211
    /// @note description Vehicle tire pressure quality (Order FL,FR,RL,RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_TIRE_PRESSURE_QUALITY_NOT_DEFINED,
    ///                DW_VIO_TIRE_PRESSURE_QUALITY_NORMAL_OPERATION,
    ///                DW_VIO_TIRE_PRESSURE_QUALITY_SOFT_WARNING,
    ///                DW_VIO_TIRE_PRESSURE_QUALITY_LOW_PRESSURE,
    ///                DW_VIO_TIRE_PRESSURE_QUALITY_FAST_DEFLATION
    ///        }
    dwVioTirePressureQuality tirePressureQuality[4];

    /// @note ID VS-32220
    /// @note description Vehicle tire pressure status timestamp (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t tirePressureStateTimestamp[4];

    /// @note ID VS-32222
    /// @note description Tire Pressure Monitoring System Status.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_TIRE_PRESSURE_MONITORING_STATE_ACTIVE,
    ///                DW_VIO_TIRE_PRESSURE_MONITORING_STATE_WAIT,
    ///                DW_VIO_TIRE_PRESSURE_MONITORING_STATE_ERROR,
    ///                DW_VIO_TIRE_PRESSURE_MONITORING_STATE_NO_SENSORS,
    ///                DW_VIO_TIRE_PRESSURE_MONITORING_STATE_RESET_ACK
    ///        }
    dwVioTirePressureMonitoringState tirePressureMonitoringState;

    /// @note ID VS-32230
    /// @note description Indicates if tires have been switched (Order is FL, FR, RL, RR).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t tireSwitched[4];

    /// @note ID VS-40005
    /// @note description Total mass of trailer unit.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit kg
    float32_t trailerMass;

    /// @note ID VS-40010
    /// @note description Yaw articulation angle between truck and trailer measured at rear axle, Angle measured as described by ISO8855. For example, 0 when driving in line, positive when turning left.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t trailerArticulationAngle;

    /// @note ID VS-40015
    /// @note description  - .
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_UNKNOWN,
    ///                DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_NO,
    ///                DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_YES,
    ///                DW_VIO_TRAILER_CONNECTED_TRAILER_CONNECTED_ERROR
    ///        }
    dwVioTrailerConnected trailerConnected;

    /// @note ID VS-40020
    /// @note description Load on front axle.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit kg
    float32_t axleFrontLoad;

    /// @note ID VS-40025
    /// @note description Load on pusher axle.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit kg
    float32_t axlePusherLoad;

    /// @note ID VS-40030
    /// @note description Load on driver axle.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit kg
    float32_t axleDriverLoad;

    /// @note ID VS-40035
    /// @note description Load on all trailer axles.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit kg
    float32_t axleTrailerLoad;

    /// @note ID VS-80010
    /// @note description Indicator of the wiper status (setting).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit Hz
    float32_t wiperStatusRear;

    /// @note ID VS-80020
    /// @note description Indicator of the windshield wiper status (setting) in case it is independend to primary.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit Hz
    float32_t wiperFrontSecondaryStatus;

    /// @note ID VS-80050
    /// @note description Indicator of the windshield wiper status (setting).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit Hz
    float32_t wiperFrontStatus;

    /// @note ID VS-95010
    /// @note description Speeds of all wheels of the vehicle (vector of float, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit rad/s
    float32_t wheelSpeedHigh[4];

    /// @note ID VS-95011
    /// @note description Quality of the wheel speed signal (vector of enums) (Order FL,FR,RL,RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_NOT_DEFINED,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_NORMAL_OPERATION,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_REDUCED_QUALITY,
    ///                DW_VIO_WHEEL_SPEED_QUALITY_HIGH_SIG_DEF
    ///        }
    dwVioWheelSpeedQualityHigh wheelSpeedQualityHigh[4];

    /// @note ID VS-95020
    /// @note description Wheel ticks for all wheels of the vehicle (vector of integers, order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit unitless
    int16_t wheelTicksHigh[4];

    /// @note ID VS-95021
    /// @note description Wheel directions for all wheels of the vehicle (vector of integers, Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_VOID,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_FORWARD,
    ///                DW_VIO_WHEEL_TICKS_DIRECTION_HIGH_BACKWARD
    ///        }
    dwVioWheelTicksDirectionHigh wheelTicksDirectionHigh[4];

    /// @note ID VS-95040
    /// @note description Timestamp(s) of wheel speeds and ticks (Order is FL, FR, RL, RR). Redundant signal..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit us
    dwTime_t wheelTicksTimestampHigh[4];

    /// @note ID VS-95041
    /// @note description Quality of timestamp(s) of wheel speeds and ticks (Order FL,FR,RL,RR). Redundant signal..
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_NOT_INIT,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_OK,
    ///                DW_VIO_WHEEL_TICKS_TIMESTAMP_QUALITY_HIGH_SYNC_LOST
    ///        }
    dwVioWheelTicksTimestampQualityHigh wheelTicksTimestampQualityHigh[4];

    /// @note ID VS-95050
    /// @note description Current front axle steering angle. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit rad
    float32_t frontSteeringAngleHigh;

    /// @note ID VS-95051
    /// @note description Current front axle angle status. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_NOT_DEFINED,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_NORMAL_OPERATION,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_TMP_HIGH,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_TMP_LOW,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_PERM_HIGH,
    ///                DW_VIO_FRONT_STEERING_ANGLE_QUALITY_HIGH_PERM_LOW
    ///        }
    dwVioFrontSteeringAngleQualityHigh frontSteeringAngleQualityHigh;

    /// @note ID VS-95070
    /// @note description Front axle steering angle timestamp. Second signal source available in HIGH only..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq nan    unit us
    dwTime_t frontSteeringTimestampHigh;

    uint8_t reserved[512];
} dwVehicleIONonSafetyState;

//# sergen(generate)
typedef struct dwVehicleIONonSafetyCommandValidityInfo
{
    dwSignalValidity mirrorFoldRequest;
    dwSignalValidity hazardFlasherRequest;
    dwSignalValidity headlightRequest;
    dwSignalValidity turnSignalRequest;
    dwSignalValidity timestamp_us;
    dwSignalValidity cameraFoldRequest[2];
    dwSignalValidity emLinearVelocity[3];
    dwSignalValidity emLinearVelocityStdev[3];
    dwSignalValidity emLinearAccel[3];
    dwSignalValidity emAngularVelocity[3];
    dwSignalValidity emAngularAccel[3];
    dwSignalValidity emOrientation[3];
    dwSignalValidity emOrientationStdev[3];
    dwSignalValidity emTranslation[3];
    dwSignalValidity emTimestamp;
    dwSignalValidity emStatus;
    dwSignalValidity emSensorPosition[3];
    dwSignalValidity emStandStill;
    dwSignalValidity emIntegrationHalted;
    dwSignalValidity wiperFrontSecondaryRequest;
    dwSignalValidity wiperFrontRequest;
    dwSignalValidity reserved[64];
} dwVehicleIONonSafetyCommandValidityInfo;

/**
* Non-safety critical RoV commands. Expected to be received by VAL in CCPLEX from AV Stack
*/
#ifndef DOXYGEN_SHOULD_SKIP_THIS
//# sergen(generate)
#endif
typedef struct dwVehicleIONonSafetyCommand
{
    dwVehicleIONonSafetyCommandValidityInfo validityInfo;

    /// @note ID VS-11280
    /// @note description Request to fold / unfold the outside mirrors.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_MIRROR_FOLD_REQUEST_REQ_NONE,
    ///                DW_VIO_MIRROR_FOLD_REQUEST_FOLD_IN,
    ///                DW_VIO_MIRROR_FOLD_REQUEST_FOLD_OUT
    ///        }
    dwVioMirrorFoldRequest mirrorFoldRequest;

    /// @note ID VS-11290
    /// @note description Request of emergency/hazard lights.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t hazardFlasherRequest;

    /// @note ID VS-11300
    /// @note description Request of low beam/high beam.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_HEADLIGHT_REQUEST_NONE,
    ///                DW_VIO_HEADLIGHT_REQUEST_DRL,
    ///                DW_VIO_HEADLIGHT_REQUEST_LOWBEAM,
    ///                DW_VIO_HEADLIGHT_REQUEST_HIGHBEAM,
    ///                DW_VIO_HEADLIGHT_REQUEST_AUTO
    ///        }
    dwVioHeadlightRequest headlightRequest;

    /// @note ID VS-11310
    /// @note description request of turn indicators.
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_TURN_SIGNAL_REQUEST_IDLE,
    ///                DW_VIO_TURN_SIGNAL_REQUEST_OFF,
    ///                DW_VIO_TURN_SIGNAL_REQUEST_LEFT,
    ///                DW_VIO_TURN_SIGNAL_REQUEST_RIGHT,
    ///                DW_VIO_TURN_SIGNAL_REQUEST_EMERGENCY
    ///        }
    dwVioTurnSignalRequest turnSignalRequest;

    /// @note ID VS-17550
    /// @note description NonSafetyCommand Timestamp.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t timestamp_us;

    /// @note ID VS-30231
    /// @note description State of SVS cameras (front/rear) folding procedure (FOLD, MOVING, UNFOLD).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_CAMERA_FOLD_REQUEST_NONE,
    ///                DW_VIO_CAMERA_FOLD_REQUEST_FOLD_IN,
    ///                DW_VIO_CAMERA_FOLD_REQUEST_FOLD_OUT
    ///        }
    dwVioCameraFoldRequest cameraFoldRequest[2];

    /// @note ID VS-31010
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m/s
    float32_t emLinearVelocity[3];

    /// @note ID VS-31011
    /// @note description Vehicle linear velocity standard deviation aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m/s
    float32_t emLinearVelocityStdev[3];

    /// @note ID VS-31020
    /// @note description Vehicle linear velocity aligned to body coordinate frame. Output of a KF filtering wheel odometry (VS-10080, VS-30110, VS-30120, VS-30130, VS-30170), linear accelerometer (VS-90050), angular velocity (VS-90040), angular acceleration (VS-90120), suspension signals (VS-30310), including their corresponding timestamps. Accuracy limited by quality of effective wheel radius calibration. Expect approx. 0.2% error 1σ. Will be validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m/s²
    float32_t emLinearAccel[3];

    /// @note ID VS-31030
    /// @note description Vehicle angular velocity aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float32_t emAngularVelocity[3];

    /// @note ID VS-31040
    /// @note description Vehicle angular acceleration aligned to body coordinate frame (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad/s
    float32_t emAngularAccel[3];

    /// @note ID VS-31110
    /// @note description Vehicle orientation (integrated, as Euler angles, since t0). Differently from VS-90020 (which is a signal that can be provided by certain types of IMUs as part of their internal state estimation, and is not used by egomotion), this is an output signal from egomotion estimator. Egomotion outputs the orientation of the vehicle, as NDAS “rig” coordinate frame, relative to a local horizontal, local vertical coordinate frame.  Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases    A Kalman filter and integrator combine information from wheel odometry (incl. steering), suspension and IMU into a 6 degrees of freedom motion estimation, also known as dead reckoning. The orientation representation in VS-31110 uses the DriveWorks Euler angle convention, described as:    - One rotation is applied about each of the axes (use of a Tait-Bryan convention)  - The order of the rotations is either of (both are equivalent):  -- z-y’-x’’: (1) yaw about original fixed z axis, (2) pitch about interim rotated y axis, (3) roll about interim rotated x axis  -- x-y-z: (1) roll about fixed x axis, (2) pitch about fixed y axis, (3) yaw about fixed z axis  All coordinate frames are right-handed.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t emOrientation[3];

    /// @note ID VS-31111
    /// @note description Vehicle orientation standard deviation (for each Euler angle) (X-Y-Z Axis).
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit rad
    float32_t emOrientationStdev[3];

    /// @note ID VS-31120
    /// @note description Vehicle translation (integrated, since t0). The translation representation in VS-31120 is the position of the vehicle in the local horizontal, local vertical coordinate frame defined at t=0. As egomotion is a dead reckoning solution, the position values should only be used and compared in a local sense; the motion of the vehicle between two points nearby in time (order: a couple seconds, tens of seconds, depending on the application and accuracy requirements). Egomotion will drift and interpreting the position signal as an absolute signal in a fixed coordinate frame will lead to incorrect use. Egomotion is not localization. Localization will provide an absolute position in a global coordinate system (e.g. WGS-84). Validated against a reference INS solution (e.g. Novatel dGPS) on a selection of maneuvers representative of use cases.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m
    float64_t emTranslation[3];

    /// @note ID VS-31130
    /// @note description Timestamp of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit us
    dwTime_t emTimestamp;

    /// @note ID VS-31140
    /// @note description Validity of egomotion signals.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_EM_STATUS_NOT_DEFINED,
    ///                DW_VIO_EM_STATUS_NORMAL_OPERATION,
    ///                DW_VIO_EM_STATUS_REDUCED_QUALITY,
    ///                DW_VIO_EM_STATUS_SIG_DEF
    ///        }
    dwVioEmStatus emStatus;

    /// @note ID VS-31141
    /// @note description Egomotion Position of "virtual" sensor.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit m
    float32_t emSensorPosition[3];

    /// @note ID VS-31142
    /// @note description Egomotion standstill detected based on wheel ticks.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit  -
    /// @note *** valid values**: {
    ///                DW_VIO_EM_STAND_STILL_FALSE,
    ///                DW_VIO_EM_STAND_STILL_TRUE,
    ///                DW_VIO_EM_STAND_STILL_UNKNOWN
    ///        }
    dwVioEmStandStill emStandStill;

    /// @note ID VS-31143
    /// @note description Egomotion Integration of Dead Reckoning halted  Integration is active while vehicle motion is detected (based on consensus from odometry signals). Integration is halted at standstill to avoid unwanted drifts..
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 100    unit unitless
    /// @note bool type (please use bool relevant functions)
    /// @note *** valid values**: {0, 1}
    uint8_t emIntegrationHalted;

    /// @note ID VS-80120
    /// @note description request of the second windshield wiper, in case it is independend to primary.
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit Hz
    float32_t wiperFrontSecondaryRequest;

    /// @note ID VS-80130
    /// @note description request of the windshield wiper .
    /// @note TODO: Backend not yet implemented
    /// @note min nan    max nan
    /// @note freq 10    unit Hz
    float32_t wiperFrontRequest;

    uint8_t reserved[512];
} dwVehicleIONonSafetyCommand;

#ifdef __cplusplus
}
#endif

#endif // DW_VEHICLEIO_VAL_STRUCTURES_H_

/** @} */
